import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
// import { MatSnackBar } from '@angular/material';
import { Subject } from 'rxjs';
import { NSystemService } from './n-system.service';
import { NPubSubService } from './n-pubSub.service';
let NSnackbarService = class NSnackbarService {
    constructor(nPubSubService) {
        this.nPubSubService = nPubSubService;
        this.snackService = new Subject();
        if (NSystemService.getInstance().getVal('useDefaultExceptionUI')) {
            this.snackBarListner = this.nPubSubService.$sub('openSnackBar', (msg) => {
                this.openSnackBar(msg);
            });
        }
    }
    get() {
        return this.snackService.asObservable();
    }
    add(data) {
        this.snackService.next({
            action: 'add',
            data: data
        });
    }
    remove(id) {
        this.snackService.next({ action: 'remove', id: id });
    }
    clear() {
        this.snackService.next({ action: 'clear' });
    }
    openSnackBar(message, timeout) {
        this.add({
            msg: message,
            timeout: timeout || 5000,
            action: {
                text: 'Close',
                onClick: (snack) => {
                },
            },
            onAdd: (snack) => {
            },
            onRemove: (snack) => {
            }
        });
    }
};
NSnackbarService.ctorParameters = () => [
    { type: NPubSubService }
];
NSnackbarService = __decorate([
    Injectable()
], NSnackbarService);
export { NSnackbarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zbmFja2Jhci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tc25hY2tiYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxtREFBbUQ7QUFDbkQsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSXBELElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBRzNCLFlBQW9CLGNBQThCO1FBQTlCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUQxQyxpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFFeEMsSUFBSSxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEVBQUU7WUFDaEUsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDdEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQTtTQUNIO0lBQ0gsQ0FBQztJQUVELEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUMsQ0FBQztJQUlELEdBQUcsQ0FBQyxJQUdIO1FBQ0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7WUFDckIsTUFBTSxFQUFFLEtBQUs7WUFDYixJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsRUFBVTtRQUNmLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBUTtRQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ1AsR0FBRyxFQUFFLE9BQU87WUFDWixPQUFPLEVBQUUsT0FBTyxJQUFJLElBQUk7WUFDeEIsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSxPQUFPO2dCQUNiLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNuQixDQUFDO2FBQ0Y7WUFDRCxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNqQixDQUFDO1lBQ0QsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDcEIsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FFRixDQUFBOztZQWhEcUMsY0FBYzs7QUFIdkMsZ0JBQWdCO0lBRDVCLFVBQVUsRUFBRTtHQUNBLGdCQUFnQixDQW1ENUI7U0FuRFksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vLyBpbXBvcnQgeyBNYXRTbmFja0JhciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcclxuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBOU3lzdGVtU2VydmljZSB9IGZyb20gJy4vbi1zeXN0ZW0uc2VydmljZSc7XHJcbmltcG9ydCB7IE5QdWJTdWJTZXJ2aWNlIH0gZnJvbSAnLi9uLXB1YlN1Yi5zZXJ2aWNlJztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOU25hY2tiYXJTZXJ2aWNlIHtcclxuICBzbmFja0Jhckxpc3RuZXI7XHJcbiAgcHJpdmF0ZSBzbmFja1NlcnZpY2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBuUHViU3ViU2VydmljZTogTlB1YlN1YlNlcnZpY2UpIHtcclxuICAgIGlmIChOU3lzdGVtU2VydmljZS5nZXRJbnN0YW5jZSgpLmdldFZhbCgndXNlRGVmYXVsdEV4Y2VwdGlvblVJJykpIHtcclxuICAgICAgdGhpcy5zbmFja0Jhckxpc3RuZXIgPSB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRzdWIoJ29wZW5TbmFja0JhcicsIChtc2cpID0+IHtcclxuICAgICAgICB0aGlzLm9wZW5TbmFja0Jhcihtc2cpO1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc25hY2tTZXJ2aWNlLmFzT2JzZXJ2YWJsZSgpO1xyXG4gIH1cclxuXHJcblxyXG5cclxuICBhZGQoZGF0YToge1xyXG4gICAgbXNnOiBzdHJpbmcsIHRpbWVvdXQ/OiBudW1iZXIsIGJhY2tncm91bmQ/OiBzdHJpbmcsIGNvbG9yPzogc3RyaW5nLCBjdXN0b21DbGFzcz86IGFueSxcclxuICAgIGFjdGlvbj86IHsgdGV4dDogc3RyaW5nLCBvbkNsaWNrPzogRnVuY3Rpb24sIGNvbG9yPzogc3RyaW5nIH0sIG9uQWRkPzogRnVuY3Rpb24sIG9uUmVtb3ZlPzogRnVuY3Rpb25cclxuICB9KSB7XHJcbiAgICB0aGlzLnNuYWNrU2VydmljZS5uZXh0KHtcclxuICAgICAgYWN0aW9uOiAnYWRkJyxcclxuICAgICAgZGF0YTogZGF0YVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmUoaWQ6IHN0cmluZykge1xyXG4gICAgdGhpcy5zbmFja1NlcnZpY2UubmV4dCh7IGFjdGlvbjogJ3JlbW92ZScsIGlkOiBpZCB9KTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy5zbmFja1NlcnZpY2UubmV4dCh7IGFjdGlvbjogJ2NsZWFyJyB9KTtcclxuICB9XHJcblxyXG4gIG9wZW5TbmFja0JhcihtZXNzYWdlLCB0aW1lb3V0PywgKSB7XHJcbiAgICB0aGlzLmFkZCh7XHJcbiAgICAgIG1zZzogbWVzc2FnZSxcclxuICAgICAgdGltZW91dDogdGltZW91dCB8fCA1MDAwLFxyXG4gICAgICBhY3Rpb246IHtcclxuICAgICAgICB0ZXh0OiAnQ2xvc2UnLFxyXG4gICAgICAgIG9uQ2xpY2s6IChzbmFjaykgPT4ge1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uQWRkOiAoc25hY2spID0+IHtcclxuICAgICAgfSxcclxuICAgICAgb25SZW1vdmU6IChzbmFjaykgPT4ge1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==