import { __decorate } from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpHeaders, HttpErrorResponse, HttpClient } from '@angular/common/http';
import { BehaviorSubject, throwError } from 'rxjs';
import { NHTTPLoaderService } from './n-HTTPLoader.service';
import { NSystemService } from './n-system.service';
import { NSessionStorageService } from './n-sessionStorage.service';
import { NLocalStorageService } from './n-localStorage.service';
import { NTokenService } from './n-token.service';
import { NPubSubService } from './n-pubSub.service';
import { timeout, catchError, finalize, switchMap, filter, take } from 'rxjs/operators';
let NHttpService = class NHttpService {
    constructor(nHTTPLoader, inj, nLocalStorageService, nTokenService) {
        this.nHTTPLoader = nHTTPLoader;
        this.inj = inj;
        this.nLocalStorageService = nLocalStorageService;
        this.nTokenService = nTokenService;
        this.timeout = 90000;
        this.isRefreshingToken = false;
        this.tokenSubject = new BehaviorSubject(null);
        this.systemService = NSystemService.getInstance();
        this.nSessionStorage = new NSessionStorageService();
        this.appProperties = this.systemService.getVal('properties');
        this.nPubSubService = new NPubSubService();
    }
    intercept(req, next) {
        this.requestInterceptor();
        // Pass on the cloned request instead of the original request.
        return next.handle(this.requestOptions(req))
            .pipe(timeout(this.timeout), catchError(error => this.onCatch(error, req, next)), finalize(() => {
            this.onFinally();
        }));
    }
    updateToken(error, req, next) {
        if (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||
            this.appProperties.appAuthenticationStrategy === 'localAuth') {
            if (!this.isRefreshingToken) {
                this.isRefreshingToken = true;
                // Reset here so that the following requests wait until the token
                // comes back from the refreshToken call.
                this.tokenSubject.next(null);
                return this.refreshToken()
                    .pipe(switchMap((tokensObj) => {
                    if (tokensObj) {
                        this.nTokenService.updateTokens(tokensObj);
                        const newToken = tokensObj['accessToken'];
                        this.tokenSubject.next(newToken);
                        return next.handle(this.requestOptions(req));
                    }
                    return throwError(new Error('Can\'t refresh the token'));
                }), catchError(err => this.onCatchError(err)), finalize(() => this.isRefreshingToken = false));
            }
            else {
                return this.tokenSubject.pipe(filter(token => token != null), take(1), switchMap(token => next.handle(this.requestOptions(req))));
            }
        }
        else {
            return this.onCatchError(error);
        }
    }
    refreshToken() {
        const http = this.inj.get(HttpClient);
        const appProperties = this.systemService.getVal('properties');
        const refreshUrl = this.systemService.getAuthUrl() + appProperties.appName + '/refresh';
        const body = {
            'platformDetails': this.systemService.getPlatformDetails(this.systemService.checkDevice()),
            'userKey': this.nSessionStorage.getValue('userObj')['userKey'],
            'refreshToken': this.nSessionStorage.getValue('refreshToken')
        };
        body.platformDetails['uuid'] = this.nLocalStorageService.getValue('uuid');
        return http.post(refreshUrl, body);
    }
    /**
     * Request options.
     * @param options
     * @returns HttpRequest
     */
    requestOptions(req) {
        let headers = req.headers;
        if (req.headers == null) {
            headers = new HttpHeaders();
        }
        req = req.clone({
            url: this.getFullUrl(req.url),
            headers: headers
        });
        const baseUrl = NSystemService.getInstance().getVal('baseUrl');
        const isArt = (baseUrl !== '' && req.url.includes(baseUrl));
        return isArt ? this.addDefaultHeaders(req) : req;
    }
    /**
    * Default options.
    * @param options
    * @returns HttpHeadedrs
    */
    addDefaultHeaders(req) {
        /**
         * TODO: Add all default Headers over here
         */
        if (!req.headers.has('Access-Control-Allow-Origin')) {
            req.headers = req.headers.set('Access-Control-Allow-Origin', '*');
        }
        if (!req.headers.has('Content-Type')) {
            req.headers = req.headers.set('Content-Type', 'application/json');
        }
        else if (req.headers.has('Content-Type') && (req.headers.get('Content-Type') === 'no-content')) {
            req.headers = req.headers.delete('Content-Type');
        }
        if (!req.headers.has('Accept')) {
            req.headers = req.headers.set('Accept', 'application/json');
        }
        if (!req.headers.has('Authorization')) {
            this.appProperties = this.systemService.getVal('properties');
            if (this.appProperties && this.appProperties.appAuthenticationStrategy === 'basicAuth') {
                let username, password;
                if (this.appProperties.basicAuthUser && this.appProperties.basicAuthPassword) {
                    username = this.appProperties.basicAuthUser;
                    password = this.appProperties.basicAuthPassword;
                }
                else {
                    username = "bhive-art-proxyuser";
                    password = "password";
                    console.warn("Authentication strategy: Basic Auth. basicAuthUser and basicAuthPassword are not configured in environment. Setting default values.");
                }
                req.headers = req.headers.set('Authorization', 'Basic ' + btoa(username + ":" + password));
            }
            else if (this.appProperties && (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||
                this.appProperties.appAuthenticationStrategy === 'localAuth')) {
                if (this.nSessionStorage.getValue('accessToken')) {
                    req.headers = req.headers.set('Authorization', 'Bearer ' + this.nSessionStorage.getValue('accessToken'));
                }
            }
        }
        return req;
    }
    /**
     * Build API url.
     * @param url
     * @returns string
     */
    getFullUrl(url) {
        // return full URL to API here
        return url;
    }
    /**
     * Request interceptor.
     */
    requestInterceptor() {
        this.nHTTPLoader.isHTTPRequestInProgress(true);
    }
    /**
     * Response interceptor.
     */
    responseInterceptor() {
        this.nHTTPLoader.isHTTPRequestInProgress(false);
    }
    /**
      * Error handler.
      * @param error
      * @param caught
      * @returns ErrorObservable
      */
    onCatch(error, req, next) {
        if (error instanceof HttpErrorResponse) {
            if (error.status === 403 && error.error.message === 'jwt expired') {
                return this.updateToken(error, req, next);
            }
            else {
                return this.onSubscribeError(error);
            }
        }
        else {
            return this.onSubscribeError(error);
        }
    }
    /**
     * onSubscribeError
     * @param error
     */
    onSubscribeError(err) {
        this.nHTTPLoader.alertError(err);
        return this.onCatchError(err);
    }
    /**
     * onFinally
     */
    onFinally() {
        this.responseInterceptor();
    }
    onCatchError(error) {
        return throwError(error);
    }
};
NHttpService.ctorParameters = () => [
    { type: NHTTPLoaderService },
    { type: Injector },
    { type: NLocalStorageService },
    { type: NTokenService }
];
NHttpService = __decorate([
    Injectable()
], NHttpService);
export { NHttpService };
//# sourceMappingURL=data:application/json;base64,