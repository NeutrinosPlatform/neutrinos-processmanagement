import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
// import { NSnackbarService } from './n-snackbar.service';
import { NLogoutService } from './n-logout.service';
import { NPubSubService } from './n-pubSub.service';
// import { NSnackbarService } from './snackbar/service/snackbar.service';
let NHTTPLoaderService = class NHTTPLoaderService {
    constructor(nLogoutService, nPubSubService) {
        this.nLogoutService = nLogoutService;
        this.nPubSubService = nPubSubService;
        this.pendingRequests = 0;
        this.showLoading = false;
        this._isHTTPRequestInProgress = new Subject();
        this._isHTTPRequestInProgress$ = this._isHTTPRequestInProgress.asObservable();
    }
    isHTTPRequestInProgress(bool) {
        if (bool) {
            this.pendingRequests++;
            if (!this.showLoading) {
                this._isHTTPRequestInProgress.next(bool);
            }
            this.showLoading = true;
        }
        else {
            this.pendingRequests--;
            if (this.pendingRequests <= 0) {
                if (this.showLoading) {
                    this._isHTTPRequestInProgress.next(bool);
                }
                this.showLoading = false;
            }
        }
    }
    alertError(error) {
        if (error.status < 200 || error.status > 500) {
            if (error.status === 0) {
                this.nPubSubService.$pub('openSnackBar', 'Connectivity issue');
            }
            else {
                this.nPubSubService.$pub('openSnackBar', 'Response failure');
            }
        }
        else if (error.status === 401) {
            this.nLogoutService.logout();
            if (error.error) {
                this.nPubSubService.$pub('openSnackBar', error.error);
            }
            else {
                this.nPubSubService.$pub('openSnackBar', error);
            }
        }
        else if (error.error) {
            if (error.error instanceof Object) {
                this.nPubSubService.$pub('openSnackBar', error.error.message);
            }
            else {
                this.nPubSubService.$pub('openSnackBar', error.error);
            }
        }
        else {
            this.nPubSubService.$pub('openSnackBar', 'Response failure');
        }
    }
};
NHTTPLoaderService.ctorParameters = () => [
    { type: NLogoutService },
    { type: NPubSubService }
];
NHTTPLoaderService = __decorate([
    Injectable()
], NHTTPLoaderService);
export { NHTTPLoaderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1IVFRQTG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvbi1IVFRQTG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDN0MsMkRBQTJEO0FBQzNELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsMEVBQTBFO0FBRzFFLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBTTdCLFlBQW9CLGNBQThCLEVBQVUsY0FBOEI7UUFBdEUsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQVUsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBTG5GLG9CQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ25CLDZCQUF3QixHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFDMUQsOEJBQXlCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFlBQVksRUFBRSxDQUFDO0lBSXpFLENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxJQUFJO1FBQzFCLElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNyQixJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzFDO1lBQ0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDekI7YUFBTTtZQUNMLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN2QixJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxFQUFFO2dCQUM3QixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ3BCLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzFDO2dCQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO2FBQzFCO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQUs7UUFDZCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQzVDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO2FBQ2hFO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO2FBQzdEO1NBQ0Y7YUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO1lBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDN0IsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNmLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7YUFDdEQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFBO2FBQ2hEO1NBQ0Y7YUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDdEIsSUFBSSxLQUFLLENBQUMsS0FBSyxZQUFZLE1BQU0sRUFBRTtnQkFDakMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7YUFDOUQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTthQUN0RDtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtTQUM3RDtJQUNILENBQUM7Q0FFRixDQUFBOztZQS9DcUMsY0FBYztZQUEwQixjQUFjOztBQU4vRSxrQkFBa0I7SUFEOUIsVUFBVSxFQUFFO0dBQ0Esa0JBQWtCLENBcUQ5QjtTQXJEWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgLCAgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG4vLyBpbXBvcnQgeyBOU25hY2tiYXJTZXJ2aWNlIH0gZnJvbSAnLi9uLXNuYWNrYmFyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOTG9nb3V0U2VydmljZSB9IGZyb20gJy4vbi1sb2dvdXQuc2VydmljZSc7XHJcbmltcG9ydCB7IE5TeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnLi9uLXN5c3RlbS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTlB1YlN1YlNlcnZpY2UgfSBmcm9tICcuL24tcHViU3ViLnNlcnZpY2UnO1xyXG4vLyBpbXBvcnQgeyBOU25hY2tiYXJTZXJ2aWNlIH0gZnJvbSAnLi9zbmFja2Jhci9zZXJ2aWNlL3NuYWNrYmFyLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTkhUVFBMb2FkZXJTZXJ2aWNlIHtcclxuICBwdWJsaWMgcGVuZGluZ1JlcXVlc3RzID0gMDtcclxuICBwdWJsaWMgc2hvd0xvYWRpbmcgPSBmYWxzZTtcclxuICBwcml2YXRlIF9pc0hUVFBSZXF1ZXN0SW5Qcm9ncmVzcyA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XHJcbiAgX2lzSFRUUFJlcXVlc3RJblByb2dyZXNzJCA9IHRoaXMuX2lzSFRUUFJlcXVlc3RJblByb2dyZXNzLmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5Mb2dvdXRTZXJ2aWNlOiBOTG9nb3V0U2VydmljZSwgcHJpdmF0ZSBuUHViU3ViU2VydmljZTogTlB1YlN1YlNlcnZpY2UpIHtcclxuXHJcbiAgfVxyXG5cclxuICBpc0hUVFBSZXF1ZXN0SW5Qcm9ncmVzcyhib29sKSB7XHJcbiAgICBpZiAoYm9vbCkge1xyXG4gICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0cysrO1xyXG4gICAgICBpZiAoIXRoaXMuc2hvd0xvYWRpbmcpIHtcclxuICAgICAgICB0aGlzLl9pc0hUVFBSZXF1ZXN0SW5Qcm9ncmVzcy5uZXh0KGJvb2wpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2hvd0xvYWRpbmcgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdHMtLTtcclxuICAgICAgaWYgKHRoaXMucGVuZGluZ1JlcXVlc3RzIDw9IDApIHtcclxuICAgICAgICBpZiAodGhpcy5zaG93TG9hZGluZykge1xyXG4gICAgICAgICAgdGhpcy5faXNIVFRQUmVxdWVzdEluUHJvZ3Jlc3MubmV4dChib29sKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zaG93TG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhbGVydEVycm9yKGVycm9yKSB7XHJcbiAgICBpZiAoZXJyb3Iuc3RhdHVzIDwgMjAwIHx8IGVycm9yLnN0YXR1cyA+IDUwMCkge1xyXG4gICAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5uUHViU3ViU2VydmljZS4kcHViKCdvcGVuU25hY2tCYXInLCAnQ29ubmVjdGl2aXR5IGlzc3VlJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5uUHViU3ViU2VydmljZS4kcHViKCdvcGVuU25hY2tCYXInLCAnUmVzcG9uc2UgZmFpbHVyZScpXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MDEpIHtcclxuICAgICAgdGhpcy5uTG9nb3V0U2VydmljZS5sb2dvdXQoKTtcclxuICAgICAgaWYgKGVycm9yLmVycm9yKSB7XHJcbiAgICAgICAgdGhpcy5uUHViU3ViU2VydmljZS4kcHViKCdvcGVuU25hY2tCYXInLCBlcnJvci5lcnJvcilcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsIGVycm9yKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGVycm9yLmVycm9yKSB7XHJcbiAgICAgIGlmIChlcnJvci5lcnJvciBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG4gICAgICAgIHRoaXMublB1YlN1YlNlcnZpY2UuJHB1Yignb3BlblNuYWNrQmFyJywgZXJyb3IuZXJyb3IubWVzc2FnZSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsIGVycm9yLmVycm9yKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsICdSZXNwb25zZSBmYWlsdXJlJylcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5cclxuIl19