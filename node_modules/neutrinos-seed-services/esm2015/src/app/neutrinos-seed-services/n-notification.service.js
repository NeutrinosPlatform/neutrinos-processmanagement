import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { NSystemService } from './n-system.service';
import { NLocalStorageService } from './n-localStorage.service';
import * as firebase from 'firebase';
import { NPubSubService } from './n-pubSub.service';
import { HttpClient } from '@angular/common/http';
import { NSessionStorageService } from './n-sessionStorage.service';
// import { Router } from '@angular/router';
import { NHTTPLoaderService } from './n-HTTPLoader.service';
let NNotificationService = class NNotificationService {
    constructor(localStorageService, pubSubService, http, bHttpLoader) {
        this.localStorageService = localStorageService;
        this.pubSubService = pubSubService;
        this.http = http;
        this.bHttpLoader = bHttpLoader;
        // private static instance: NNotificationService;
        this.systemService = NSystemService.getInstance();
        this.possiblePushTypes = ['APNS', 'FCM'];
        this.firebaseSenderId = this.systemService.getVal('firebaseSenderId');
        this.isNotificationEnabled = this.systemService.getVal('isNotificationEnabled');
        this.appName = this.systemService.getVal('appName');
        this.deviceType = this.systemService.deviceType;
        this.sessionStorage = new NSessionStorageService();
        this.loginSubscribe = this.pubSubService.$sub('firebaseRegister', () => {
            this.enableNotification();
        });
    }
    ngOnInit() {
    }
    enableNotification() {
        let pushType = this.getPushType(this.systemService.getVal('pushType'));
        document.addEventListener('deviceready', event => {
            if (this.isNotificationEnabled) {
                if (this.deviceType && this.deviceType != 'browser') {
                    this.deviceType = this.systemService.deviceType;
                    this.checkPermission(pushType).then(res => {
                        if (res) {
                            this.initializeNotifications(pushType);
                        }
                    });
                }
            }
        });
        if (this.isNotificationEnabled && pushType !== 'APNS') {
            if (this.deviceType && this.deviceType == 'browser' && window['Notification']) {
                this.initialiseWebPush();
            }
        }
    }
    initialiseWebPush() {
        const __this = this;
        const messaging = firebase.messaging();
        Notification.requestPermission()
            .then(function () {
            return messaging.getToken();
        })
            .then(function (token) {
            if (token) {
                __this.sendRegDetails(token);
            }
        })
            .catch(function (err) {
            __this.bHttpLoader.alertError(err);
        });
        messaging.onMessage(function (payload) {
            if (payload['notification']) {
                let notificationObj = payload['notification'];
                let options = {
                    body: notificationObj.body,
                    icon: notificationObj.icon
                };
                // creating a native browser message
                let notificationUI = new Notification(notificationObj.title, options);
                notificationUI.onclick = function () {
                    window.focus(); // window is focused when the user clicks the notification using this
                };
            }
        });
    }
    checkPermission(pushType) {
        // Android & iOS only
        // Checks whether the push notification permission has been granted.
        return new Promise((resolve) => {
            pushType = this.getPushType(pushType);
            if ((this.deviceType === 'Android' || this.deviceType === 'iOS') && (pushType === 'FCM')) {
                PushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else if (this.deviceType === 'iOS' && pushType === 'APNS') {
                APNSPushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else {
                return resolve(true);
            }
        });
    }
    initializeNotifications(pushType) {
        //pushType = pushType ? pushType : 'FCM';
        pushType = this.getPushType(pushType);
        let push;
        // Default if for FCM
        if (pushType === 'FCM') {
            push = window['PushNotification'].init({
                android: {
                    senderID: this.firebaseSenderId
                },
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true",
                    senderID: this.firebaseSenderId
                },
            });
        }
        // New APNS plugin init
        else if (pushType === 'APNS') {
            push = window['APNSPushNotification'].init({
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true"
                }
            });
        }
        push.on('registration', (data) => {
            // data.registrationId
            this.sendRegDetails(data.registrationId);
        });
        // ToDo Christy get call back function from app user to change what happens once a notification arrives
        push.on('notification', (data) => {
            window['cordova'].plugins.notification.local.schedule({
                title: data.title,
                text: data.message,
                sound: data.sound,
                at: new Date().getTime()
            });
        });
        push.on('error', (e) => {
            // e.message
            console.error(e);
        });
    }
    sendRegDetails(registrationId) {
        this.localStorageService.setValue('registrationId', registrationId);
        var url = this.systemService.getTenantUrl() + 'notification/' + this.systemService.getVal('appName') + '/register';
        let pushType = this.getPushType(this.systemService.getVal('pushType'));
        this.http.post(url, {
            'key': this.sessionStorage.getValue('userObj')['userKey'],
            'uuid': this.localStorageService.getValue('uuid'),
            'fbregid': registrationId,
            'pushType': pushType
        }).subscribe(result => {
            // this.pubSubService.$pub('FBRegComp');
        }, error => {
            console.log(error);
        });
    }
    getPushType(currPushType) {
        let isValidPush = typeof currPushType !== 'undefined' && this.possiblePushTypes.includes(currPushType.toUpperCase());
        let pushType = isValidPush ? currPushType.toUpperCase() : 'FCM';
        return pushType;
    }
    ngOnDestroy() {
        this.loginSubscribe.unSubscribe();
    }
};
NNotificationService.ctorParameters = () => [
    { type: NLocalStorageService },
    { type: NPubSubService },
    { type: HttpClient },
    { type: NHTTPLoaderService }
];
NNotificationService = __decorate([
    Injectable()
], NNotificationService);
export { NNotificationService };
//# sourceMappingURL=data:application/json;base64,