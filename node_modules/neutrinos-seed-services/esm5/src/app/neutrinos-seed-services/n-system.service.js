import * as platform from 'platform';
// @dynamic
var NSystemService = /** @class */ (function () {
    function NSystemService() {
        this._deviceType = this.checkDevice();
    }
    NSystemService.getInstance = function () {
        if (!this.instance) {
            this.instance = new NSystemService();
        }
        return this.instance;
    };
    /**
     * Seter and getter for the environments
     */
    // set environments(properties) {
    //   console.log(properties);
    //   NSystemService.envProperties = properties;
    //   this.properties = this.getVal('properties');
    // }
    // get environments() {
    //   return NSystemService.envProperties;
    // }
    /**
     * Returna 'mobile' or 'browser' based on the platform
     */
    NSystemService.prototype.checkDevice = function () {
        if (window['device'] && (window['device']['platform'] != 'browser' || window['device']['platform'] != 'Browser')) {
            return 'mobile';
        }
        else if (window['device'] && (window['device']['platform'] == 'browser' || window['device']['platform'] == 'Browser')) {
            return 'cordova_browser';
        }
        else {
            return 'browser';
        }
    };
    Object.defineProperty(NSystemService.prototype, "deviceType", {
        get: function () {
            return this._deviceType;
        },
        enumerable: true,
        configurable: true
    });
    NSystemService.prototype.getVal = function (key) {
        if (!NSystemService.envProperties) {
            NSystemService.envProperties = window['neutrinos']['environments'];
            this.properties = NSystemService.envProperties.properties;
        }
        if (key == 'properties') {
            if (NSystemService.envProperties) {
                return NSystemService.envProperties.properties;
            }
            else {
                return undefined;
            }
        }
        else {
            if (NSystemService.envProperties && NSystemService.envProperties.properties) {
                return NSystemService.envProperties.properties[key];
            }
            else {
                return undefined;
            }
        }
    };
    NSystemService.prototype.isAndroid = function () {
        if (window['device'] && window['device']['platform'] == 'Android') {
            return true;
        }
        else {
            return false;
        }
    };
    NSystemService.prototype.isIOS = function () {
        if (window['device'] && window['device']['platform'] == 'iOS') {
            return true;
        }
        else {
            return false;
        }
    };
    NSystemService.prototype.getAndroidVersion = function () {
        if (this.isAndroid()) {
            return window['device']['version'];
        }
        else {
            return '';
        }
    };
    NSystemService.prototype.getAuthUrl = function () {
        // this.properties = this.getVal('properties');
        return this.properties.baseUrl + this.properties.tenantName + '/auth/';
    };
    NSystemService.prototype.getTenantUrl = function () {
        return this.properties.baseUrl + this.properties.tenantName + '/';
    };
    NSystemService.prototype.getAppUrl = function () {
        return this.properties.baseUrl + this.properties.tenantName + '/proxy/' + this.properties.appName + '/';
    };
    NSystemService.prototype.getProxyUrl = function () {
        return this.properties.baseUrl + this.properties.tenantName + '/proxy/';
    };
    NSystemService.prototype.getDataModelUrl = function () {
        return this.properties.baseUrl + this.properties.tenantName + '/datamodel/' + this.properties.appDataSource + '/' + this.properties.appName + '/';
    };
    NSystemService.prototype.getFileIOUrl = function () {
        return this.properties.baseUrl + this.properties.tenantName + '/fileio/' +
            this.properties.appDataSource + '/' + this.properties.appName + '/';
    };
    NSystemService.prototype.getPlatformDetails = function (type) {
        var pDetails = {
            platform: platform.os.family,
            platformVersion: platform.os.version,
        };
        if (type === 'browser') {
            return Object.assign(pDetails, {
                type: 'browser',
                browser: platform.name,
                browserVersion: platform.version,
            });
        }
        else if (type === 'mobile' || type === 'cordova_browser') {
            return Object.assign(pDetails, {
                type: 'mobile',
                model: window['device'].model,
                manufacturer: window['device'].manufacturer,
                isVirtual: window['device'].isVirtual
            });
        }
    };
    return NSystemService;
}());
export { NSystemService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zeXN0ZW0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uLXN5c3RlbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sS0FBSyxRQUFRLE1BQU0sVUFBVSxDQUFDO0FBRXJDLFdBQVc7QUFDWDtJQWVFO1FBQ0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQVRNLDBCQUFXLEdBQWxCO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFNRDs7T0FFRztJQUVILGlDQUFpQztJQUNqQyw2QkFBNkI7SUFDN0IsK0NBQStDO0lBQy9DLGlEQUFpRDtJQUNqRCxJQUFJO0lBRUosdUJBQXVCO0lBQ3ZCLHlDQUF5QztJQUN6QyxJQUFJO0lBRUo7O09BRUc7SUFDSCxvQ0FBVyxHQUFYO1FBQ0UsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksU0FBUyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxTQUFTLENBQUMsRUFBRTtZQUNoSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjthQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFNBQVMsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksU0FBUyxDQUFDLEVBQUU7WUFDdkgsT0FB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QztJQUVNLHFDQUFZLEdBQW5CO1FBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxVQUFVO1lBQ3RFLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7SUFDeEUsQ0FBQztJQUVNLDJDQUFrQixHQUF6QixVQUEwQixJQUFJO1FBQzVCLElBQU0sUUFBUSxHQUFHO1lBQ2YsUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTTtZQUM1QixlQUFlLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPO1NBQ3JDLENBQUM7UUFDRixJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDdEIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDN0IsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsT0FBTyxFQUFFLFFBQVEsQ0FBQyxJQUFJO2dCQUN0QixjQUFjLEVBQUUsUUFBUSxDQUFDLE9BQU87YUFDakMsQ0FBQyxDQUFDO1NBQ0o7YUFBTSxJQUFJLElBQUksS0FBSyxRQUFRLElBQUksSUFBSSxLQUFLLGlCQUFpQixFQUFFO1lBQzFELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7Z0JBQzdCLElBQUksRUFBRSxRQUFRO2dCQUNkLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSztnQkFDN0IsWUFBWSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZO2dCQUMzQyxTQUFTLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVM7YUFDdEMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBakpELElBaUpDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tICcuLi8uLi9lbnZpcm9ubWVudHMvZW52aXJvbm1lbnQnO1xyXG5pbXBvcnQgeyBOVXRpbGl0eSB9IGZyb20gJy4vbi11dGlsLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOTG9jYWxTdG9yYWdlU2VydmljZSB9IGZyb20gJy4vbi1sb2NhbFN0b3JhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgcGxhdGZvcm0gZnJvbSAncGxhdGZvcm0nO1xyXG5cclxuLy8gQGR5bmFtaWNcclxuZXhwb3J0IGNsYXNzIE5TeXN0ZW1TZXJ2aWNlIHtcclxuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogTlN5c3RlbVNlcnZpY2U7XHJcblxyXG4gIHByaXZhdGUgX2RldmljZVR5cGU6IHN0cmluZztcclxuICAvLyBwcml2YXRlIF9kZXZpY2VVVUlEO1xyXG4gIHV1aWQ7XHJcbiAgcHJvcGVydGllcztcclxuICBzdGF0aWMgZW52UHJvcGVydGllcztcclxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcclxuICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBOU3lzdGVtU2VydmljZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fZGV2aWNlVHlwZSA9IHRoaXMuY2hlY2tEZXZpY2UoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldGVyIGFuZCBnZXR0ZXIgZm9yIHRoZSBlbnZpcm9ubWVudHNcclxuICAgKi9cclxuXHJcbiAgLy8gc2V0IGVudmlyb25tZW50cyhwcm9wZXJ0aWVzKSB7XHJcbiAgLy8gICBjb25zb2xlLmxvZyhwcm9wZXJ0aWVzKTtcclxuICAvLyAgIE5TeXN0ZW1TZXJ2aWNlLmVudlByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xyXG4gIC8vICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy5nZXRWYWwoJ3Byb3BlcnRpZXMnKTtcclxuICAvLyB9XHJcblxyXG4gIC8vIGdldCBlbnZpcm9ubWVudHMoKSB7XHJcbiAgLy8gICByZXR1cm4gTlN5c3RlbVNlcnZpY2UuZW52UHJvcGVydGllcztcclxuICAvLyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybmEgJ21vYmlsZScgb3IgJ2Jyb3dzZXInIGJhc2VkIG9uIHRoZSBwbGF0Zm9ybVxyXG4gICAqL1xyXG4gIGNoZWNrRGV2aWNlKCk6IHN0cmluZyB7XHJcbiAgICBpZiAod2luZG93WydkZXZpY2UnXSAmJiAod2luZG93WydkZXZpY2UnXVsncGxhdGZvcm0nXSAhPSAnYnJvd3NlcicgfHwgd2luZG93WydkZXZpY2UnXVsncGxhdGZvcm0nXSAhPSAnQnJvd3NlcicpKSB7XHJcbiAgICAgIHJldHVybiAnbW9iaWxlJztcclxuICAgIH0gZWxzZSBpZiAod2luZG93WydkZXZpY2UnXSAmJiAod2luZG93WydkZXZpY2UnXVsncGxhdGZvcm0nXSA9PSAnYnJvd3NlcicgfHwgd2luZG93WydkZXZpY2UnXVsncGxhdGZvcm0nXSA9PSAnQnJvd3NlcicpKSB7XHJcbiAgICAgIHJldHVybiAnY29yZG92YV9icm93c2VyJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAnYnJvd3Nlcic7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgcHVibGljIGdldCBkZXZpY2VUeXBlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RldmljZVR5cGU7XHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIHB1YmxpYyBnZXRWYWwoa2V5KSB7XHJcbiAgICBpZiAoIU5TeXN0ZW1TZXJ2aWNlLmVudlByb3BlcnRpZXMpIHtcclxuICAgICAgTlN5c3RlbVNlcnZpY2UuZW52UHJvcGVydGllcyA9IHdpbmRvd1snbmV1dHJpbm9zJ11bJ2Vudmlyb25tZW50cyddO1xyXG4gICAgICB0aGlzLnByb3BlcnRpZXMgPSBOU3lzdGVtU2VydmljZS5lbnZQcm9wZXJ0aWVzLnByb3BlcnRpZXM7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGtleSA9PSAncHJvcGVydGllcycpIHtcclxuICAgICAgaWYgKE5TeXN0ZW1TZXJ2aWNlLmVudlByb3BlcnRpZXMpIHtcclxuICAgICAgICByZXR1cm4gTlN5c3RlbVNlcnZpY2UuZW52UHJvcGVydGllcy5wcm9wZXJ0aWVzO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChOU3lzdGVtU2VydmljZS5lbnZQcm9wZXJ0aWVzICYmIE5TeXN0ZW1TZXJ2aWNlLmVudlByb3BlcnRpZXMucHJvcGVydGllcykge1xyXG4gICAgICAgIHJldHVybiBOU3lzdGVtU2VydmljZS5lbnZQcm9wZXJ0aWVzLnByb3BlcnRpZXNba2V5XTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIHB1YmxpYyBpc0FuZHJvaWQoKSB7XHJcbiAgICBpZiAod2luZG93WydkZXZpY2UnXSAmJiB3aW5kb3dbJ2RldmljZSddWydwbGF0Zm9ybSddID09ICdBbmRyb2lkJykge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBpc0lPUygpIHtcclxuICAgIGlmICh3aW5kb3dbJ2RldmljZSddICYmIHdpbmRvd1snZGV2aWNlJ11bJ3BsYXRmb3JtJ10gPT0gJ2lPUycpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0QW5kcm9pZFZlcnNpb24oKSB7XHJcbiAgICBpZiAodGhpcy5pc0FuZHJvaWQoKSkge1xyXG4gICAgICByZXR1cm4gd2luZG93WydkZXZpY2UnXVsndmVyc2lvbiddO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEF1dGhVcmwoKSB7XHJcbiAgICAvLyB0aGlzLnByb3BlcnRpZXMgPSB0aGlzLmdldFZhbCgncHJvcGVydGllcycpO1xyXG4gICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5iYXNlVXJsICsgdGhpcy5wcm9wZXJ0aWVzLnRlbmFudE5hbWUgKyAnL2F1dGgvJztcclxuICB9XHJcbiAgcHVibGljIGdldFRlbmFudFVybCgpIHtcclxuICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMuYmFzZVVybCArIHRoaXMucHJvcGVydGllcy50ZW5hbnROYW1lICsgJy8nO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEFwcFVybCgpIHtcclxuICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMuYmFzZVVybCArIHRoaXMucHJvcGVydGllcy50ZW5hbnROYW1lICsgJy9wcm94eS8nICsgdGhpcy5wcm9wZXJ0aWVzLmFwcE5hbWUgKyAnLyc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0UHJveHlVcmwoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmJhc2VVcmwgKyB0aGlzLnByb3BlcnRpZXMudGVuYW50TmFtZSArICcvcHJveHkvJztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXREYXRhTW9kZWxVcmwoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmJhc2VVcmwgKyB0aGlzLnByb3BlcnRpZXMudGVuYW50TmFtZSArICcvZGF0YW1vZGVsLycgKyB0aGlzLnByb3BlcnRpZXMuYXBwRGF0YVNvdXJjZSArICcvJyArIHRoaXMucHJvcGVydGllcy5hcHBOYW1lICsgJy8nO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEZpbGVJT1VybCgpIHtcclxuICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMuYmFzZVVybCArIHRoaXMucHJvcGVydGllcy50ZW5hbnROYW1lICsgJy9maWxlaW8vJyArXHJcbiAgICAgIHRoaXMucHJvcGVydGllcy5hcHBEYXRhU291cmNlICsgJy8nICsgdGhpcy5wcm9wZXJ0aWVzLmFwcE5hbWUgKyAnLyc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0UGxhdGZvcm1EZXRhaWxzKHR5cGUpIHtcclxuICAgIGNvbnN0IHBEZXRhaWxzID0ge1xyXG4gICAgICBwbGF0Zm9ybTogcGxhdGZvcm0ub3MuZmFtaWx5LFxyXG4gICAgICBwbGF0Zm9ybVZlcnNpb246IHBsYXRmb3JtLm9zLnZlcnNpb24sXHJcbiAgICB9O1xyXG4gICAgaWYgKHR5cGUgPT09ICdicm93c2VyJykge1xyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwRGV0YWlscywge1xyXG4gICAgICAgIHR5cGU6ICdicm93c2VyJyxcclxuICAgICAgICBicm93c2VyOiBwbGF0Zm9ybS5uYW1lLFxyXG4gICAgICAgIGJyb3dzZXJWZXJzaW9uOiBwbGF0Zm9ybS52ZXJzaW9uLFxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ21vYmlsZScgfHwgdHlwZSA9PT0gJ2NvcmRvdmFfYnJvd3NlcicpIHtcclxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocERldGFpbHMsIHtcclxuICAgICAgICB0eXBlOiAnbW9iaWxlJyxcclxuICAgICAgICBtb2RlbDogd2luZG93WydkZXZpY2UnXS5tb2RlbCxcclxuICAgICAgICBtYW51ZmFjdHVyZXI6IHdpbmRvd1snZGV2aWNlJ10ubWFudWZhY3R1cmVyLFxyXG4gICAgICAgIGlzVmlydHVhbDogd2luZG93WydkZXZpY2UnXS5pc1ZpcnR1YWxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==