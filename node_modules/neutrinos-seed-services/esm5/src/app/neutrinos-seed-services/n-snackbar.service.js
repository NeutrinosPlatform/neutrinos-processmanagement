import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
// import { MatSnackBar } from '@angular/material';
import { Subject } from 'rxjs';
import { NSystemService } from './n-system.service';
import { NPubSubService } from './n-pubSub.service';
var NSnackbarService = /** @class */ (function () {
    function NSnackbarService(nPubSubService) {
        var _this = this;
        this.nPubSubService = nPubSubService;
        this.snackService = new Subject();
        if (NSystemService.getInstance().getVal('useDefaultExceptionUI')) {
            this.snackBarListner = this.nPubSubService.$sub('openSnackBar', function (msg) {
                _this.openSnackBar(msg);
            });
        }
    }
    NSnackbarService.prototype.get = function () {
        return this.snackService.asObservable();
    };
    NSnackbarService.prototype.add = function (data) {
        this.snackService.next({
            action: 'add',
            data: data
        });
    };
    NSnackbarService.prototype.remove = function (id) {
        this.snackService.next({ action: 'remove', id: id });
    };
    NSnackbarService.prototype.clear = function () {
        this.snackService.next({ action: 'clear' });
    };
    NSnackbarService.prototype.openSnackBar = function (message, timeout) {
        this.add({
            msg: message,
            timeout: timeout || 5000,
            action: {
                text: 'Close',
                onClick: function (snack) {
                },
            },
            onAdd: function (snack) {
            },
            onRemove: function (snack) {
            }
        });
    };
    NSnackbarService.ctorParameters = function () { return [
        { type: NPubSubService }
    ]; };
    NSnackbarService = __decorate([
        Injectable()
    ], NSnackbarService);
    return NSnackbarService;
}());
export { NSnackbarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zbmFja2Jhci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tc25hY2tiYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxtREFBbUQ7QUFDbkQsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSXBEO0lBR0UsMEJBQW9CLGNBQThCO1FBQWxELGlCQU1DO1FBTm1CLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUQxQyxpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFFeEMsSUFBSSxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEVBQUU7WUFDaEUsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBQyxHQUFHO2dCQUNsRSxLQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFBO1NBQ0g7SUFDSCxDQUFDO0lBRUQsOEJBQUcsR0FBSDtRQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBSUQsOEJBQUcsR0FBSCxVQUFJLElBR0g7UUFDQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNyQixNQUFNLEVBQUUsS0FBSztZQUNiLElBQUksRUFBRSxJQUFJO1NBQ1gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGlDQUFNLEdBQU4sVUFBTyxFQUFVO1FBQ2YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxnQ0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsdUNBQVksR0FBWixVQUFhLE9BQU8sRUFBRSxPQUFRO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDUCxHQUFHLEVBQUUsT0FBTztZQUNaLE9BQU8sRUFBRSxPQUFPLElBQUksSUFBSTtZQUN4QixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLE9BQU87Z0JBQ2IsT0FBTyxFQUFFLFVBQUMsS0FBSztnQkFDZixDQUFDO2FBQ0Y7WUFDRCxLQUFLLEVBQUUsVUFBQyxLQUFLO1lBQ2IsQ0FBQztZQUNELFFBQVEsRUFBRSxVQUFDLEtBQUs7WUFDaEIsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7O2dCQTlDbUMsY0FBYzs7SUFIdkMsZ0JBQWdCO1FBRDVCLFVBQVUsRUFBRTtPQUNBLGdCQUFnQixDQW1ENUI7SUFBRCx1QkFBQztDQUFBLEFBbkRELElBbURDO1NBbkRZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuLy8gaW1wb3J0IHsgTWF0U25hY2tCYXIgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XHJcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgTlN5c3RlbVNlcnZpY2UgfSBmcm9tICcuL24tc3lzdGVtLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOUHViU3ViU2VydmljZSB9IGZyb20gJy4vbi1wdWJTdWIuc2VydmljZSc7XHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTlNuYWNrYmFyU2VydmljZSB7XHJcbiAgc25hY2tCYXJMaXN0bmVyO1xyXG4gIHByaXZhdGUgc25hY2tTZXJ2aWNlID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgblB1YlN1YlNlcnZpY2U6IE5QdWJTdWJTZXJ2aWNlKSB7XHJcbiAgICBpZiAoTlN5c3RlbVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5nZXRWYWwoJ3VzZURlZmF1bHRFeGNlcHRpb25VSScpKSB7XHJcbiAgICAgIHRoaXMuc25hY2tCYXJMaXN0bmVyID0gdGhpcy5uUHViU3ViU2VydmljZS4kc3ViKCdvcGVuU25hY2tCYXInLCAobXNnKSA9PiB7XHJcbiAgICAgICAgdGhpcy5vcGVuU25hY2tCYXIobXNnKTtcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCgpIHtcclxuICAgIHJldHVybiB0aGlzLnNuYWNrU2VydmljZS5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG5cclxuXHJcbiAgYWRkKGRhdGE6IHtcclxuICAgIG1zZzogc3RyaW5nLCB0aW1lb3V0PzogbnVtYmVyLCBiYWNrZ3JvdW5kPzogc3RyaW5nLCBjb2xvcj86IHN0cmluZywgY3VzdG9tQ2xhc3M/OiBhbnksXHJcbiAgICBhY3Rpb24/OiB7IHRleHQ6IHN0cmluZywgb25DbGljaz86IEZ1bmN0aW9uLCBjb2xvcj86IHN0cmluZyB9LCBvbkFkZD86IEZ1bmN0aW9uLCBvblJlbW92ZT86IEZ1bmN0aW9uXHJcbiAgfSkge1xyXG4gICAgdGhpcy5zbmFja1NlcnZpY2UubmV4dCh7XHJcbiAgICAgIGFjdGlvbjogJ2FkZCcsXHJcbiAgICAgIGRhdGE6IGRhdGFcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlKGlkOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuc25hY2tTZXJ2aWNlLm5leHQoeyBhY3Rpb246ICdyZW1vdmUnLCBpZDogaWQgfSk7XHJcbiAgfVxyXG5cclxuICBjbGVhcigpIHtcclxuICAgIHRoaXMuc25hY2tTZXJ2aWNlLm5leHQoeyBhY3Rpb246ICdjbGVhcicgfSk7XHJcbiAgfVxyXG5cclxuICBvcGVuU25hY2tCYXIobWVzc2FnZSwgdGltZW91dD8sICkge1xyXG4gICAgdGhpcy5hZGQoe1xyXG4gICAgICBtc2c6IG1lc3NhZ2UsXHJcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXQgfHwgNTAwMCxcclxuICAgICAgYWN0aW9uOiB7XHJcbiAgICAgICAgdGV4dDogJ0Nsb3NlJyxcclxuICAgICAgICBvbkNsaWNrOiAoc25hY2spID0+IHtcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgICBvbkFkZDogKHNuYWNrKSA9PiB7XHJcbiAgICAgIH0sXHJcbiAgICAgIG9uUmVtb3ZlOiAoc25hY2spID0+IHtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=