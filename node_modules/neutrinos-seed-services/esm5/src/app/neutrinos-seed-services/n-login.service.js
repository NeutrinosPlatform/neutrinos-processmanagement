import { __decorate } from "tslib";
import { map } from 'rxjs/operators';
import { Injectable, EventEmitter, Output } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { NSystemService } from './n-system.service';
import { NTokenService } from './n-token.service';
import { NPubSubService } from './n-pubSub.service';
import { NSessionStorageService } from './n-sessionStorage.service';
import { NLocalStorageService } from './n-localStorage.service';
import { NNotificationService } from './n-notification.service';
var NLoginService = /** @class */ (function () {
    function NLoginService(http, pubSubService, notificationService, nLocalStorageService, nTokenService) {
        this.http = http;
        this.pubSubService = pubSubService;
        this.notificationService = notificationService;
        this.nLocalStorageService = nLocalStorageService;
        this.nTokenService = nTokenService;
        this.loginCompleted = new EventEmitter();
        this.systemService = NSystemService.getInstance();
        // this.nTokenService = new NTokenService();
        this.nSessionStorage = new NSessionStorageService();
        // this.nLocalStorageService = new NLocalStorageService();
    }
    NLoginService.prototype.login = function (userName, password, isRemember) {
        var _this = this;
        this.appProperties = this.systemService.getVal('properties');
        this.loginUrl = this.systemService.getAuthUrl() + this.appProperties.appName;
        this.uuid = this.nLocalStorageService.getValue('uuid');
        if (!this.uuid) {
            this.uuid = this.nLocalStorageService.checkDeviceId();
        }
        this.details = {
            username: userName,
            password: password,
        };
        this.details.platformDetails = this.systemService.getPlatformDetails(this.systemService.checkDevice());
        this.details.platformDetails['uuid'] = this.uuid;
        return this.http.post(this.loginUrl, JSON.stringify(this.details)).pipe(map(function (result) {
            var tokensObj = result;
            if (tokensObj) {
                _this.nTokenService.updateTokens(tokensObj, isRemember);
            }
            // TODO chris array of supported pushes currently only support APNS and Firebase
            if ((_this.systemService.getVal('firebaseSenderId') != 'FIREBASE_SENDER_ID' && _this.systemService.getVal('firebaseAuthKey') != 'FIREBASE_AUTH_KEY')
                || (_this.systemService.getVal('pushType') === 'APNS' && _this.systemService.isIOS())) {
                _this.pubSubService.$pub('firebaseRegister');
            }
            _this.pubSubService.$pub('loginComplete');
            return (result);
        }, function (error) {
            return (error);
        }));
    };
    NLoginService.prototype.isLoggedIn = function () {
        var _this = this;
        return this.nLocalStorageService.initStorage().then(function (result) {
            if (_this.nSessionStorage.getValue('accessToken') && _this.nSessionStorage.getValue('refreshToken') &&
                _this.nSessionStorage.getValue('accessToken') != 'null' && _this.nSessionStorage.getValue('refreshToken') != 'null') {
                return true;
            }
            return false;
        }).catch(function (error) {
            return false;
        });
    };
    NLoginService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: NPubSubService },
        { type: NNotificationService },
        { type: NLocalStorageService },
        { type: NTokenService }
    ]; };
    __decorate([
        Output()
    ], NLoginService.prototype, "loginCompleted", void 0);
    NLoginService = __decorate([
        Injectable()
    ], NLoginService);
    return NLoginService;
}());
export { NLoginService };
//# sourceMappingURL=data:application/json;base64,