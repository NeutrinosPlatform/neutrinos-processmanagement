import { __decorate } from "tslib";
import { HttpClient } from '@angular/common/http';
import { throwError } from 'rxjs';
import { Injectable } from '@angular/core';
import { NSystemService } from './n-system.service';
import { map, catchError } from 'rxjs/operators';
var NDataModelService = /** @class */ (function () {
    function NDataModelService(http) {
        this.http = http;
        this.invalidDataModelName = 'Invalid data model name.';
        this.invalidDataModelId = 'Invalid data model id.';
        this.invalidDataModelObj = 'Invalid data model object.';
        this.systemService = NSystemService.getInstance();
    }
    // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
    /**
     *
     * @param dataModelName
     * @param filter The filter query parameter allows to specify conditions on the documents to return.
     * The filter qparam value is any mongodb queryâ€¦ Defaults to {}
     * @param keys Projections to be applited on mongo db.
     * @param sort sort to be applied on the query results. Defaults to {}
     * @param pagenumber Page number for paginated queries. Defaults to 1
     * @param pagesize Size of each page to be returned. Defaults to 100.
     */
    NDataModelService.prototype.get = function (dataModelName, filter, keys, sort, pagenumber, pagesize) {
        if (dataModelName) {
            // let modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
            var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
            if (this.checkIfValid(filter) || this.checkIfValid(keys) || this.checkIfValid(sort) ||
                this.checkIfValid(pagenumber) || this.checkIfValid(pagesize)) {
                var queryString = "" + this.toQueryString({
                    'filter': filter,
                    'keys': keys,
                    'sort': sort,
                    'pagenumber': pagenumber,
                    'pagesize': pagesize
                });
                if (queryString === '') {
                    queryString += '?filter={}';
                }
                else {
                    queryString = '?'.concat(queryString);
                }
                modelNameUrl += queryString;
            }
            return this.http.get(modelNameUrl).pipe(map(function (value, index) {
                return value;
            }), catchError(function (error) {
                return throwError(error);
            }));
        }
        else {
            return throwError(new Error("Could not get " + dataModelName + ". " + this.invalidDataModelName));
        }
    };
    // PUT /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
    /**
     *
     * @param dataModelName Data model name of the app
     * @param dataModelObj Data Model object which is to be inserted
     */
    NDataModelService.prototype.put = function (dataModelName, dataModelObj) {
        if (dataModelName) {
            if (dataModelObj) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
                var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
                return this.http.put(modelNameUrl, dataModelObj).pipe(map(function (value, index) {
                    return value;
                }), catchError(function (error) {
                    return throwError(error);
                }));
            }
            else {
                return throwError(new Error("Could not put " + dataModelObj + " in " + dataModelName + ". " + this.invalidDataModelObj));
            }
        }
        else {
            return throwError(new Error("Could not put " + dataModelObj + " in " + dataModelName + ". " + this.invalidDataModelName));
        }
    };
    // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
    /**
     *
     * @param dataModelName
     * @param filter
     */
    NDataModelService.prototype.delete = function (dataModelName, filter) {
        var modelNameUrl;
        if (dataModelName) {
            // modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
            modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
            if (this.checkIfValid(filter) && filter != '') {
                modelNameUrl += "?filter=" + filter;
            }
            else {
                modelNameUrl += '?filter={}';
            }
            return this.http.delete(modelNameUrl).pipe(map(function (value, index) {
                return value;
            }), catchError(function (error) {
                return throwError(error);
            }));
        }
        else {
            return throwError(new Error("Could not delete " + dataModelName + ". " + this.invalidDataModelName));
        }
    };
    // PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
    /**
     *
     * @param dataModelName Data model name which is to be updated
     * @param dataModelObj New data model object
     */
    NDataModelService.prototype.update = function (dataModelName, updateObject) {
        if (dataModelName && updateObject) {
            // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
            var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
            return this.http.patch(modelNameUrl, updateObject).pipe(map(function (value, index) {
                return value;
            }), catchError(function (error) {
                return throwError(error);
            }));
        }
        else {
            return throwError(new Error("Could not update " + dataModelName + ". " + this.invalidDataModelName));
        }
    };
    // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}
    /**
     *
     * @param dataModelName Data model name which is to be updated
     * @param dataModelId Data model id which is to be updated
     */
    NDataModelService.prototype.getById = function (dataModelName, dataModelId) {
        if (dataModelName) {
            if (dataModelId) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                return this.http.get(modelNameUrl).pipe(map(function (value, index) {
                    return value;
                }), catchError(function (error) {
                    return throwError(error);
                }));
            }
            else {
                throwError(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelId));
            }
        }
        else {
            throwError(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelName));
        }
    };
    // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}
    /**
     *
     * @param dataModelName Data model name which is to be deleted
     * @param dataModelId Data model id which is to be deleted
     */
    NDataModelService.prototype.deleteById = function (dataModelName, dataModelId) {
        if (dataModelName) {
            if (dataModelId) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                return this.http.delete(modelNameUrl).pipe(map(function (value, index) {
                    return value;
                }), catchError(function (error) {
                    return throwError(error);
                }));
            }
            else {
                throwError(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelId));
            }
        }
        else {
            return throwError(new Error("Could not delete " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelName));
        }
    };
    //PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}
    /**
     *
     * @param dataModelName Data model name which is to be update
     * @param dataModelId Data model id which is to be updated
     * @param dataModelObj Data Model object which is to be inserted
     */
    NDataModelService.prototype.updateById = function (dataModelName, dataModelId, dataModelObj) {
        if (dataModelName) {
            if (dataModelId) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                var dmObj = Object.assign({}, dataModelObj);
                delete dmObj['_id'];
                return this.http.patch(modelNameUrl, dmObj).pipe(map(function (value, index) {
                    return value;
                }), catchError(function (error) {
                    return throwError(error);
                }));
            }
            else {
                throwError(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelId));
            }
        }
        else {
            return throwError(new Error("Could not delete " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelName));
        }
    };
    NDataModelService.prototype.toQueryString = function (obj) {
        var parts = [];
        for (var i in obj) {
            if (obj.hasOwnProperty(i) && this.checkIfValid(obj[i])) {
                parts.push((i) + '=' + JSON.stringify(obj[i]));
            }
        }
        return parts.join('&');
    };
    NDataModelService.prototype.checkIfValid = function (value) {
        if (value === undefined || value == null) {
            return false;
        }
        else {
            return true;
        }
    };
    NDataModelService.prototype.getDataSourceURL = function (dataModelName) {
        if (!this.dmDs) {
            this.dmDs = window['neutrinos']['dataSource'];
        }
        var dsDm = this.dmDs[dataModelName];
        var properties = this.systemService.properties;
        if (dsDm) {
            return properties.baseUrl + properties.tenantName + '/datamodel/' + dsDm + '/' + properties.appName + '/';
        }
        else {
            return this.systemService.getDataModelUrl();
        }
    };
    NDataModelService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    NDataModelService = __decorate([
        Injectable()
    ], NDataModelService);
    return NDataModelService;
}());
export { NDataModelService };
//# sourceMappingURL=data:application/json;base64,