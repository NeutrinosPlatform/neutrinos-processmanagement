import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { NSystemService } from './n-system.service';
import { NLocalStorageService } from './n-localStorage.service';
import * as firebase from 'firebase';
import { NPubSubService } from './n-pubSub.service';
import { HttpClient } from '@angular/common/http';
import { NSessionStorageService } from './n-sessionStorage.service';
// import { Router } from '@angular/router';
import { NHTTPLoaderService } from './n-HTTPLoader.service';
var NNotificationService = /** @class */ (function () {
    function NNotificationService(localStorageService, pubSubService, http, bHttpLoader) {
        var _this = this;
        this.localStorageService = localStorageService;
        this.pubSubService = pubSubService;
        this.http = http;
        this.bHttpLoader = bHttpLoader;
        // private static instance: NNotificationService;
        this.systemService = NSystemService.getInstance();
        this.possiblePushTypes = ['APNS', 'FCM'];
        this.firebaseSenderId = this.systemService.getVal('firebaseSenderId');
        this.isNotificationEnabled = this.systemService.getVal('isNotificationEnabled');
        this.appName = this.systemService.getVal('appName');
        this.deviceType = this.systemService.deviceType;
        this.sessionStorage = new NSessionStorageService();
        this.loginSubscribe = this.pubSubService.$sub('firebaseRegister', function () {
            _this.enableNotification();
        });
    }
    NNotificationService.prototype.ngOnInit = function () {
    };
    NNotificationService.prototype.enableNotification = function () {
        var _this = this;
        var pushType = this.getPushType(this.systemService.getVal('pushType'));
        document.addEventListener('deviceready', function (event) {
            if (_this.isNotificationEnabled) {
                if (_this.deviceType && _this.deviceType != 'browser') {
                    _this.deviceType = _this.systemService.deviceType;
                    _this.checkPermission(pushType).then(function (res) {
                        if (res) {
                            _this.initializeNotifications(pushType);
                        }
                    });
                }
            }
        });
        if (this.isNotificationEnabled && pushType !== 'APNS') {
            if (this.deviceType && this.deviceType == 'browser' && window['Notification']) {
                this.initialiseWebPush();
            }
        }
    };
    NNotificationService.prototype.initialiseWebPush = function () {
        var __this = this;
        var messaging = firebase.messaging();
        Notification.requestPermission()
            .then(function () {
            return messaging.getToken();
        })
            .then(function (token) {
            if (token) {
                __this.sendRegDetails(token);
            }
        })
            .catch(function (err) {
            __this.bHttpLoader.alertError(err);
        });
        messaging.onMessage(function (payload) {
            if (payload['notification']) {
                var notificationObj = payload['notification'];
                var options = {
                    body: notificationObj.body,
                    icon: notificationObj.icon
                };
                // creating a native browser message
                var notificationUI = new Notification(notificationObj.title, options);
                notificationUI.onclick = function () {
                    window.focus(); // window is focused when the user clicks the notification using this
                };
            }
        });
    };
    NNotificationService.prototype.checkPermission = function (pushType) {
        var _this = this;
        // Android & iOS only
        // Checks whether the push notification permission has been granted.
        return new Promise(function (resolve) {
            pushType = _this.getPushType(pushType);
            if ((_this.deviceType === 'Android' || _this.deviceType === 'iOS') && (pushType === 'FCM')) {
                PushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else if (_this.deviceType === 'iOS' && pushType === 'APNS') {
                APNSPushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else {
                return resolve(true);
            }
        });
    };
    NNotificationService.prototype.initializeNotifications = function (pushType) {
        var _this = this;
        //pushType = pushType ? pushType : 'FCM';
        pushType = this.getPushType(pushType);
        var push;
        // Default if for FCM
        if (pushType === 'FCM') {
            push = window['PushNotification'].init({
                android: {
                    senderID: this.firebaseSenderId
                },
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true",
                    senderID: this.firebaseSenderId
                },
            });
        }
        // New APNS plugin init
        else if (pushType === 'APNS') {
            push = window['APNSPushNotification'].init({
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true"
                }
            });
        }
        push.on('registration', function (data) {
            // data.registrationId
            _this.sendRegDetails(data.registrationId);
        });
        // ToDo Christy get call back function from app user to change what happens once a notification arrives
        push.on('notification', function (data) {
            window['cordova'].plugins.notification.local.schedule({
                title: data.title,
                text: data.message,
                sound: data.sound,
                at: new Date().getTime()
            });
        });
        push.on('error', function (e) {
            // e.message
            console.error(e);
        });
    };
    NNotificationService.prototype.sendRegDetails = function (registrationId) {
        this.localStorageService.setValue('registrationId', registrationId);
        var url = this.systemService.getTenantUrl() + 'notification/' + this.systemService.getVal('appName') + '/register';
        var pushType = this.getPushType(this.systemService.getVal('pushType'));
        this.http.post(url, {
            'key': this.sessionStorage.getValue('userObj')['userKey'],
            'uuid': this.localStorageService.getValue('uuid'),
            'fbregid': registrationId,
            'pushType': pushType
        }).subscribe(function (result) {
            // this.pubSubService.$pub('FBRegComp');
        }, function (error) {
            console.log(error);
        });
    };
    NNotificationService.prototype.getPushType = function (currPushType) {
        var isValidPush = typeof currPushType !== 'undefined' && this.possiblePushTypes.includes(currPushType.toUpperCase());
        var pushType = isValidPush ? currPushType.toUpperCase() : 'FCM';
        return pushType;
    };
    NNotificationService.prototype.ngOnDestroy = function () {
        this.loginSubscribe.unSubscribe();
    };
    NNotificationService.ctorParameters = function () { return [
        { type: NLocalStorageService },
        { type: NPubSubService },
        { type: HttpClient },
        { type: NHTTPLoaderService }
    ]; };
    NNotificationService = __decorate([
        Injectable()
    ], NNotificationService);
    return NNotificationService;
}());
export { NNotificationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1ub3RpZmljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uLW5vdGlmaWNhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJcEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxLQUFLLFFBQVEsTUFBTSxVQUFVLENBQUM7QUFDckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSw0Q0FBNEM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFLNUQ7SUFZRSw4QkFBb0IsbUJBQXlDLEVBQVUsYUFBNkIsRUFDMUYsSUFBZ0IsRUFBVSxXQUErQjtRQURuRSxpQkFVQztRQVZtQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXNCO1FBQVUsa0JBQWEsR0FBYixhQUFhLENBQWdCO1FBQzFGLFNBQUksR0FBSixJQUFJLENBQVk7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFabkUsaURBQWlEO1FBQ3pDLGtCQUFhLEdBQW1CLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQU03RCxzQkFBaUIsR0FBYSxDQUFDLE1BQU0sRUFBQyxLQUFLLENBQUMsQ0FBQztRQU1uRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7UUFDaEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLHNCQUFzQixFQUFFLENBQUM7UUFDbkQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUNoRSxLQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCx1Q0FBUSxHQUFSO0lBQ0EsQ0FBQztJQUdELGlEQUFrQixHQUFsQjtRQUFBLGlCQW1CQztRQWxCQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdkUsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxVQUFBLEtBQUs7WUFDNUMsSUFBSSxLQUFJLENBQUMscUJBQXFCLEVBQUU7Z0JBQzlCLElBQUksS0FBSSxDQUFDLFVBQVUsSUFBSSxLQUFJLENBQUMsVUFBVSxJQUFJLFNBQVMsRUFBRTtvQkFDbkQsS0FBSSxDQUFDLFVBQVUsR0FBRyxLQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztvQkFDaEQsS0FBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHO3dCQUNyQyxJQUFJLEdBQUcsRUFBRTs0QkFDUCxLQUFJLENBQUMsdUJBQXVCLENBQUMsUUFBUSxDQUFDLENBQUM7eUJBQ3hDO29CQUNILENBQUMsQ0FBQyxDQUFDO2lCQUNKO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksSUFBSSxDQUFDLHFCQUFxQixJQUFJLFFBQVEsS0FBSyxNQUFNLEVBQUU7WUFDckQsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksU0FBUyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRTtnQkFDN0UsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7SUFFRCxnREFBaUIsR0FBakI7UUFDRSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRXZDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRTthQUM3QixJQUFJLENBQUM7WUFDSixPQUFPLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QixDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsVUFBVSxLQUFLO1lBQ25CLElBQUksS0FBSyxFQUFFO2dCQUNULE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDOUI7UUFDSCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBVSxHQUFHO1lBQ2xCLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBRUwsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFVLE9BQU87WUFDbkMsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUU7Z0JBQzNCLElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDOUMsSUFBSSxPQUFPLEdBQUc7b0JBQ1osSUFBSSxFQUFFLGVBQWUsQ0FBQyxJQUFJO29CQUMxQixJQUFJLEVBQUUsZUFBZSxDQUFDLElBQUk7aUJBQzNCLENBQUE7Z0JBQ0Qsb0NBQW9DO2dCQUNwQyxJQUFJLGNBQWMsR0FBRyxJQUFJLFlBQVksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUN0RSxjQUFjLENBQUMsT0FBTyxHQUFHO29CQUN2QixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxxRUFBcUU7Z0JBQ3ZGLENBQUMsQ0FBQTthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsOENBQWUsR0FBZixVQUFnQixRQUFTO1FBQXpCLGlCQWlCQztRQWhCQyxxQkFBcUI7UUFDckIsb0VBQW9FO1FBQ3BFLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPO1lBQ3pCLFFBQVEsR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxLQUFJLENBQUMsVUFBVSxLQUFLLFNBQVMsSUFBSSxLQUFJLENBQUMsVUFBVSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLEtBQUssQ0FBRSxFQUFFO2dCQUN6RixnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsVUFBVSxJQUFJO29CQUMzQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2pDLENBQUMsQ0FBQyxDQUFDO2FBQ0o7aUJBQU0sSUFBSSxLQUFJLENBQUMsVUFBVSxLQUFLLEtBQUssSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFO2dCQUMxRCxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsVUFBVSxJQUFJO29CQUNoRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2pDLENBQUMsQ0FBQyxDQUFDO2FBQ0o7aUJBQU07Z0JBQ0wsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDdEI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxzREFBdUIsR0FBdkIsVUFBd0IsUUFBUztRQUFqQyxpQkFnREM7UUEvQ0MseUNBQXlDO1FBQ3pDLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXRDLElBQUksSUFBSSxDQUFDO1FBQ1QscUJBQXFCO1FBQ3JCLElBQUksUUFBUSxLQUFLLEtBQUssRUFBRTtZQUN0QixJQUFJLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNyQyxPQUFPLEVBQUU7b0JBQ1AsUUFBUSxFQUFFLElBQUksQ0FBQyxnQkFBZ0I7aUJBQ2hDO2dCQUNELEdBQUcsRUFBRTtvQkFDSCxLQUFLLEVBQUUsTUFBTTtvQkFDYixLQUFLLEVBQUUsTUFBTTtvQkFDYixLQUFLLEVBQUUsTUFBTTtvQkFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtpQkFDaEM7YUFDRixDQUFDLENBQUM7U0FDSjtRQUNELHVCQUF1QjthQUNsQixJQUFJLFFBQVEsS0FBSyxNQUFNLEVBQUU7WUFDNUIsSUFBSSxHQUFHLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDekMsR0FBRyxFQUFFO29CQUNILEtBQUssRUFBRSxNQUFNO29CQUNiLEtBQUssRUFBRSxNQUFNO29CQUNiLEtBQUssRUFBRSxNQUFNO2lCQUNkO2FBQ0YsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxVQUFDLElBQUk7WUFDM0Isc0JBQXNCO1lBQ3RCLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO1FBRUgsdUdBQXVHO1FBQ3ZHLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLFVBQUMsSUFBSTtZQUMzQixNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO2dCQUNwRCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ2pCLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTztnQkFDbEIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2dCQUNqQixFQUFFLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUU7YUFDekIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFDLENBQUM7WUFDakIsWUFBWTtZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsNkNBQWMsR0FBZCxVQUFlLGNBQWM7UUFDM0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNwRSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxHQUFHLGVBQWUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDbkgsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNsQixLQUFLLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ3pELE1BQU0sRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUNqRCxTQUFTLEVBQUUsY0FBYztZQUN6QixVQUFVLEVBQUUsUUFBUTtTQUNyQixDQUFDLENBQUMsU0FBUyxDQUFDLFVBQUEsTUFBTTtZQUNqQix3Q0FBd0M7UUFDMUMsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsMENBQVcsR0FBWCxVQUFhLFlBQVk7UUFDdkIsSUFBSSxXQUFXLEdBQUcsT0FBTyxZQUFZLEtBQUssV0FBVyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDckgsSUFBSSxRQUFRLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNoRSxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsMENBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEMsQ0FBQzs7Z0JBbkt3QyxvQkFBb0I7Z0JBQXlCLGNBQWM7Z0JBQ3BGLFVBQVU7Z0JBQXVCLGtCQUFrQjs7SUFieEQsb0JBQW9CO1FBRGhDLFVBQVUsRUFBRTtPQUNBLG9CQUFvQixDQWdMaEM7SUFBRCwyQkFBQztDQUFBLEFBaExELElBZ0xDO1NBaExZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5TeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnLi9uLXN5c3RlbS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5kZWNsYXJlIHZhciBQdXNoTm90aWZpY2F0aW9uOiBhbnk7XHJcbmRlY2xhcmUgdmFyIEFQTlNQdXNoTm90aWZpY2F0aW9uOiBhbnk7XHJcbmltcG9ydCB7IE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9uLWxvY2FsU3RvcmFnZS5zZXJ2aWNlJztcclxuaW1wb3J0ICogYXMgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UnO1xyXG5pbXBvcnQgeyBOUHViU3ViU2VydmljZSB9IGZyb20gJy4vbi1wdWJTdWIuc2VydmljZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE5TZXNzaW9uU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL24tc2Vzc2lvblN0b3JhZ2Uuc2VydmljZSc7XHJcbi8vIGltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IE5IVFRQTG9hZGVyU2VydmljZSB9IGZyb20gJy4vbi1IVFRQTG9hZGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBlbnZpcm9ubWVudCB9IGZyb20gJy4uLy4uL2Vudmlyb25tZW50cy9lbnZpcm9ubWVudC5wcm9kJztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOTm90aWZpY2F0aW9uU2VydmljZSB7XHJcbiAgLy8gcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IE5Ob3RpZmljYXRpb25TZXJ2aWNlO1xyXG4gIHByaXZhdGUgc3lzdGVtU2VydmljZTogTlN5c3RlbVNlcnZpY2UgPSBOU3lzdGVtU2VydmljZS5nZXRJbnN0YW5jZSgpO1xyXG4gIHByaXZhdGUgZmlyZWJhc2VTZW5kZXJJZDogc3RyaW5nO1xyXG4gIHByaXZhdGUgaXNOb3RpZmljYXRpb25FbmFibGVkOiBib29sZWFuO1xyXG4gIHByaXZhdGUgZGV2aWNlVHlwZTsgc3RyaW5nO1xyXG4gIHByaXZhdGUgcmVzRGV0YWlscztcclxuICBwcml2YXRlIGRldmljZVVVSUQ6IHN0cmluZztcclxuICBwcml2YXRlIHBvc3NpYmxlUHVzaFR5cGVzOiBzdHJpbmdbXSA9IFsnQVBOUycsJ0ZDTSddO1xyXG4gIGxvZ2luU3Vic2NyaWJlO1xyXG4gIHNlc3Npb25TdG9yYWdlOiBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlO1xyXG4gIGFwcE5hbWU7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2NhbFN0b3JhZ2VTZXJ2aWNlOiBOTG9jYWxTdG9yYWdlU2VydmljZSwgcHJpdmF0ZSBwdWJTdWJTZXJ2aWNlOiBOUHViU3ViU2VydmljZSxcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBiSHR0cExvYWRlcjogTkhUVFBMb2FkZXJTZXJ2aWNlKSB7XHJcbiAgICB0aGlzLmZpcmViYXNlU2VuZGVySWQgPSB0aGlzLnN5c3RlbVNlcnZpY2UuZ2V0VmFsKCdmaXJlYmFzZVNlbmRlcklkJyk7XHJcbiAgICB0aGlzLmlzTm90aWZpY2F0aW9uRW5hYmxlZCA9IHRoaXMuc3lzdGVtU2VydmljZS5nZXRWYWwoJ2lzTm90aWZpY2F0aW9uRW5hYmxlZCcpO1xyXG4gICAgdGhpcy5hcHBOYW1lID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFZhbCgnYXBwTmFtZScpO1xyXG4gICAgdGhpcy5kZXZpY2VUeXBlID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmRldmljZVR5cGU7XHJcbiAgICB0aGlzLnNlc3Npb25TdG9yYWdlID0gbmV3IE5TZXNzaW9uU3RvcmFnZVNlcnZpY2UoKTtcclxuICAgIHRoaXMubG9naW5TdWJzY3JpYmUgPSB0aGlzLnB1YlN1YlNlcnZpY2UuJHN1YignZmlyZWJhc2VSZWdpc3RlcicsICgpID0+IHtcclxuICAgICAgdGhpcy5lbmFibGVOb3RpZmljYXRpb24oKTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICB9XHJcblxyXG5cclxuICBlbmFibGVOb3RpZmljYXRpb24oKSB7XHJcbiAgICBsZXQgcHVzaFR5cGUgPSB0aGlzLmdldFB1c2hUeXBlKHRoaXMuc3lzdGVtU2VydmljZS5nZXRWYWwoJ3B1c2hUeXBlJykpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlcmVhZHknLCBldmVudCA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmlzTm90aWZpY2F0aW9uRW5hYmxlZCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRldmljZVR5cGUgJiYgdGhpcy5kZXZpY2VUeXBlICE9ICdicm93c2VyJykge1xyXG4gICAgICAgICAgdGhpcy5kZXZpY2VUeXBlID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmRldmljZVR5cGU7XHJcbiAgICAgICAgICB0aGlzLmNoZWNrUGVybWlzc2lvbihwdXNoVHlwZSkudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplTm90aWZpY2F0aW9ucyhwdXNoVHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZiAodGhpcy5pc05vdGlmaWNhdGlvbkVuYWJsZWQgJiYgcHVzaFR5cGUgIT09ICdBUE5TJykge1xyXG4gICAgICBpZiAodGhpcy5kZXZpY2VUeXBlICYmIHRoaXMuZGV2aWNlVHlwZSA9PSAnYnJvd3NlcicgJiYgd2luZG93WydOb3RpZmljYXRpb24nXSkge1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGlzZVdlYlB1c2goKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGlzZVdlYlB1c2goKSB7XHJcbiAgICBjb25zdCBfX3RoaXMgPSB0aGlzO1xyXG4gICAgY29uc3QgbWVzc2FnaW5nID0gZmlyZWJhc2UubWVzc2FnaW5nKCk7XHJcblxyXG4gICAgTm90aWZpY2F0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBtZXNzYWdpbmcuZ2V0VG9rZW4oKTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICBfX3RoaXMuc2VuZFJlZ0RldGFpbHModG9rZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICBfX3RoaXMuYkh0dHBMb2FkZXIuYWxlcnRFcnJvcihlcnIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICBtZXNzYWdpbmcub25NZXNzYWdlKGZ1bmN0aW9uIChwYXlsb2FkKSB7XHJcbiAgICAgIGlmIChwYXlsb2FkWydub3RpZmljYXRpb24nXSkge1xyXG4gICAgICAgIGxldCBub3RpZmljYXRpb25PYmogPSBwYXlsb2FkWydub3RpZmljYXRpb24nXTtcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHtcclxuICAgICAgICAgIGJvZHk6IG5vdGlmaWNhdGlvbk9iai5ib2R5LFxyXG4gICAgICAgICAgaWNvbjogbm90aWZpY2F0aW9uT2JqLmljb25cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY3JlYXRpbmcgYSBuYXRpdmUgYnJvd3NlciBtZXNzYWdlXHJcbiAgICAgICAgbGV0IG5vdGlmaWNhdGlvblVJID0gbmV3IE5vdGlmaWNhdGlvbihub3RpZmljYXRpb25PYmoudGl0bGUsIG9wdGlvbnMpO1xyXG4gICAgICAgIG5vdGlmaWNhdGlvblVJLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB3aW5kb3cuZm9jdXMoKTsgLy8gd2luZG93IGlzIGZvY3VzZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIG5vdGlmaWNhdGlvbiB1c2luZyB0aGlzXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNoZWNrUGVybWlzc2lvbihwdXNoVHlwZT8pIHtcclxuICAgIC8vIEFuZHJvaWQgJiBpT1Mgb25seVxyXG4gICAgLy8gQ2hlY2tzIHdoZXRoZXIgdGhlIHB1c2ggbm90aWZpY2F0aW9uIHBlcm1pc3Npb24gaGFzIGJlZW4gZ3JhbnRlZC5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBwdXNoVHlwZSA9IHRoaXMuZ2V0UHVzaFR5cGUocHVzaFR5cGUpO1xyXG4gICAgICBpZiAoKHRoaXMuZGV2aWNlVHlwZSA9PT0gJ0FuZHJvaWQnIHx8IHRoaXMuZGV2aWNlVHlwZSA9PT0gJ2lPUycpICYmIChwdXNoVHlwZSA9PT0gJ0ZDTScgKSkge1xyXG4gICAgICAgIFB1c2hOb3RpZmljYXRpb24uaGFzUGVybWlzc2lvbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoZGF0YS5pc0VuYWJsZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGV2aWNlVHlwZSA9PT0gJ2lPUycgJiYgcHVzaFR5cGUgPT09ICdBUE5TJykge1xyXG4gICAgICAgICBBUE5TUHVzaE5vdGlmaWNhdGlvbi5oYXNQZXJtaXNzaW9uKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShkYXRhLmlzRW5hYmxlZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZU5vdGlmaWNhdGlvbnMocHVzaFR5cGU/KSB7XHJcbiAgICAvL3B1c2hUeXBlID0gcHVzaFR5cGUgPyBwdXNoVHlwZSA6ICdGQ00nO1xyXG4gICAgcHVzaFR5cGUgPSB0aGlzLmdldFB1c2hUeXBlKHB1c2hUeXBlKTtcclxuXHJcbiAgICBsZXQgcHVzaDtcclxuICAgIC8vIERlZmF1bHQgaWYgZm9yIEZDTVxyXG4gICAgaWYgKHB1c2hUeXBlID09PSAnRkNNJykge1xyXG4gICAgICBwdXNoID0gd2luZG93WydQdXNoTm90aWZpY2F0aW9uJ10uaW5pdCh7XHJcbiAgICAgICAgYW5kcm9pZDoge1xyXG4gICAgICAgICAgc2VuZGVySUQ6IHRoaXMuZmlyZWJhc2VTZW5kZXJJZFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW9zOiB7XHJcbiAgICAgICAgICBhbGVydDogXCJ0cnVlXCIsXHJcbiAgICAgICAgICBiYWRnZTogXCJ0cnVlXCIsXHJcbiAgICAgICAgICBzb3VuZDogXCJ0cnVlXCIsXHJcbiAgICAgICAgICBzZW5kZXJJRDogdGhpcy5maXJlYmFzZVNlbmRlcklkXHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBOZXcgQVBOUyBwbHVnaW4gaW5pdFxyXG4gICAgZWxzZSBpZiAocHVzaFR5cGUgPT09ICdBUE5TJykge1xyXG4gICAgICBwdXNoID0gd2luZG93WydBUE5TUHVzaE5vdGlmaWNhdGlvbiddLmluaXQoe1xyXG4gICAgICAgIGlvczoge1xyXG4gICAgICAgICAgYWxlcnQ6IFwidHJ1ZVwiLFxyXG4gICAgICAgICAgYmFkZ2U6IFwidHJ1ZVwiLFxyXG4gICAgICAgICAgc291bmQ6IFwidHJ1ZVwiXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHB1c2gub24oJ3JlZ2lzdHJhdGlvbicsIChkYXRhKSA9PiB7XHJcbiAgICAgIC8vIGRhdGEucmVnaXN0cmF0aW9uSWRcclxuICAgICAgdGhpcy5zZW5kUmVnRGV0YWlscyhkYXRhLnJlZ2lzdHJhdGlvbklkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFRvRG8gQ2hyaXN0eSBnZXQgY2FsbCBiYWNrIGZ1bmN0aW9uIGZyb20gYXBwIHVzZXIgdG8gY2hhbmdlIHdoYXQgaGFwcGVucyBvbmNlIGEgbm90aWZpY2F0aW9uIGFycml2ZXNcclxuICAgIHB1c2gub24oJ25vdGlmaWNhdGlvbicsIChkYXRhKSA9PiB7XHJcbiAgICAgIHdpbmRvd1snY29yZG92YSddLnBsdWdpbnMubm90aWZpY2F0aW9uLmxvY2FsLnNjaGVkdWxlKHtcclxuICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcclxuICAgICAgICB0ZXh0OiBkYXRhLm1lc3NhZ2UsXHJcbiAgICAgICAgc291bmQ6IGRhdGEuc291bmQsXHJcbiAgICAgICAgYXQ6IG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcHVzaC5vbignZXJyb3InLCAoZSkgPT4ge1xyXG4gICAgICAvLyBlLm1lc3NhZ2VcclxuICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2VuZFJlZ0RldGFpbHMocmVnaXN0cmF0aW9uSWQpIHtcclxuICAgIHRoaXMubG9jYWxTdG9yYWdlU2VydmljZS5zZXRWYWx1ZSgncmVnaXN0cmF0aW9uSWQnLCByZWdpc3RyYXRpb25JZCk7XHJcbiAgICB2YXIgdXJsID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFRlbmFudFVybCgpICsgJ25vdGlmaWNhdGlvbi8nICsgdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFZhbCgnYXBwTmFtZScpICsgJy9yZWdpc3Rlcic7XHJcbiAgICBsZXQgcHVzaFR5cGUgPSB0aGlzLmdldFB1c2hUeXBlKHRoaXMuc3lzdGVtU2VydmljZS5nZXRWYWwoJ3B1c2hUeXBlJykpO1xyXG4gICAgdGhpcy5odHRwLnBvc3QodXJsLCB7XHJcbiAgICAgICdrZXknOiB0aGlzLnNlc3Npb25TdG9yYWdlLmdldFZhbHVlKCd1c2VyT2JqJylbJ3VzZXJLZXknXSxcclxuICAgICAgJ3V1aWQnOiB0aGlzLmxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0VmFsdWUoJ3V1aWQnKSwgXHJcbiAgICAgICdmYnJlZ2lkJzogcmVnaXN0cmF0aW9uSWQsXHJcbiAgICAgICdwdXNoVHlwZSc6IHB1c2hUeXBlXHJcbiAgICB9KS5zdWJzY3JpYmUocmVzdWx0ID0+IHtcclxuICAgICAgLy8gdGhpcy5wdWJTdWJTZXJ2aWNlLiRwdWIoJ0ZCUmVnQ29tcCcpO1xyXG4gICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgZ2V0UHVzaFR5cGUgKGN1cnJQdXNoVHlwZSkge1xyXG4gICAgbGV0IGlzVmFsaWRQdXNoID0gdHlwZW9mIGN1cnJQdXNoVHlwZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5wb3NzaWJsZVB1c2hUeXBlcy5pbmNsdWRlcyhjdXJyUHVzaFR5cGUudG9VcHBlckNhc2UoKSk7XHJcbiAgICBsZXQgcHVzaFR5cGUgPSBpc1ZhbGlkUHVzaCA/IGN1cnJQdXNoVHlwZS50b1VwcGVyQ2FzZSgpIDogJ0ZDTSc7XHJcbiAgICByZXR1cm4gcHVzaFR5cGU7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMubG9naW5TdWJzY3JpYmUudW5TdWJzY3JpYmUoKTtcclxuICB9XHJcbn1cclxuIl19