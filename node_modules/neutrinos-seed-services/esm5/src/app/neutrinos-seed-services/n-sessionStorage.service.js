import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
var NSessionStorageService = /** @class */ (function () {
    function NSessionStorageService() {
        NSessionStorageService_1.sessionStorageCache = sessionStorage;
    }
    NSessionStorageService_1 = NSessionStorageService;
    NSessionStorageService.prototype.getSessionStorage = function () {
        return NSessionStorageService_1.sessionStorageCache;
    };
    NSessionStorageService.prototype.setValue = function (key, value) {
        NSessionStorageService_1.sessionStorageCache[key] = value;
        sessionStorage.setItem(key, value);
    };
    NSessionStorageService.prototype.getValue = function (key) {
        if (!NSessionStorageService_1.sessionStorageCache[key]) {
            return null;
        }
        try {
            var obj = NSessionStorageService_1.sessionStorageCache[key];
            return JSON.parse(obj);
        }
        catch (error) {
            return NSessionStorageService_1.sessionStorageCache[key];
        }
    };
    NSessionStorageService.prototype.remove = function (key) {
        if (NSessionStorageService_1.sessionStorageCache.hasOwnProperty(key)) {
            delete NSessionStorageService_1.sessionStorageCache[key];
            sessionStorage.removeItem(key);
        }
    };
    NSessionStorageService.prototype.clearSessionStorage = function () {
        NSessionStorageService_1.sessionStorageCache = {};
        sessionStorage.clear();
    };
    var NSessionStorageService_1;
    NSessionStorageService.sessionStorageCache = {};
    NSessionStorageService = NSessionStorageService_1 = __decorate([
        Injectable()
    ], NSessionStorageService);
    return NSessionStorageService;
}());
export { NSessionStorageService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zZXNzaW9uU3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tc2Vzc2lvblN0b3JhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQztJQUVFO1FBQ0Usd0JBQXNCLENBQUMsbUJBQW1CLEdBQUcsY0FBYyxDQUFDO0lBQzlELENBQUM7K0JBSlUsc0JBQXNCO0lBTWpDLGtEQUFpQixHQUFqQjtRQUNFLE9BQU8sd0JBQXNCLENBQUMsbUJBQW1CLENBQUM7SUFDcEQsQ0FBQztJQUVELHlDQUFRLEdBQVIsVUFBUyxHQUFHLEVBQUUsS0FBSztRQUNqQix3QkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDeEQsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELHlDQUFRLEdBQVIsVUFBUyxHQUFHO1FBQ1YsSUFBSSxDQUFDLHdCQUFzQixDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3BELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxJQUFJO1lBQ0YsSUFBTSxHQUFHLEdBQUcsd0JBQXNCLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLHdCQUFzQixDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hEO0lBQ0gsQ0FBQztJQUVELHVDQUFNLEdBQU4sVUFBTyxHQUFHO1FBQ1IsSUFBSSx3QkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbEUsT0FBTyx3QkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2RCxjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQztJQUVELG9EQUFtQixHQUFuQjtRQUNFLHdCQUFzQixDQUFDLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztRQUNoRCxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekIsQ0FBQzs7SUFwQ00sMENBQW1CLEdBQVEsRUFBRSxDQUFDO0lBRDFCLHNCQUFzQjtRQURsQyxVQUFVLEVBQUU7T0FDQSxzQkFBc0IsQ0F1Q2xDO0lBQUQsNkJBQUM7Q0FBQSxBQXZDRCxJQXVDQztTQXZDWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlIHtcclxuICBzdGF0aWMgc2Vzc2lvblN0b3JhZ2VDYWNoZTogYW55ID0ge307XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlLnNlc3Npb25TdG9yYWdlQ2FjaGUgPSBzZXNzaW9uU3RvcmFnZTtcclxuICB9XHJcblxyXG4gIGdldFNlc3Npb25TdG9yYWdlKCkge1xyXG4gICAgcmV0dXJuIE5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uuc2Vzc2lvblN0b3JhZ2VDYWNoZTtcclxuICB9XHJcblxyXG4gIHNldFZhbHVlKGtleSwgdmFsdWUpIHtcclxuICAgIE5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uuc2Vzc2lvblN0b3JhZ2VDYWNoZVtrZXldID0gdmFsdWU7XHJcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VmFsdWUoa2V5KSB7XHJcbiAgICBpZiAoIU5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uuc2Vzc2lvblN0b3JhZ2VDYWNoZVtrZXldKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgb2JqID0gTlNlc3Npb25TdG9yYWdlU2VydmljZS5zZXNzaW9uU3RvcmFnZUNhY2hlW2tleV07XHJcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKG9iaik7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICByZXR1cm4gTlNlc3Npb25TdG9yYWdlU2VydmljZS5zZXNzaW9uU3RvcmFnZUNhY2hlW2tleV07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW1vdmUoa2V5KSB7XHJcbiAgICBpZiAoTlNlc3Npb25TdG9yYWdlU2VydmljZS5zZXNzaW9uU3RvcmFnZUNhY2hlLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgZGVsZXRlIE5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uuc2Vzc2lvblN0b3JhZ2VDYWNoZVtrZXldO1xyXG4gICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGVhclNlc3Npb25TdG9yYWdlKCkge1xyXG4gICAgTlNlc3Npb25TdG9yYWdlU2VydmljZS5zZXNzaW9uU3RvcmFnZUNhY2hlID0ge307XHJcbiAgICBzZXNzaW9uU3RvcmFnZS5jbGVhcigpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19