import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
var ServiceName = "PubSub Service";
var NPubSubService = /** @class */ (function () {
    function NPubSubService() {
        this.events = {};
    }
    NPubSubService.prototype.$sub = function (event, callback, error, complete) {
        if (!event) {
            throw new Error("[" + ServiceName + "] => Subscription method must get event name.");
        }
        if (this.events[event] === undefined) {
            this.events[event] = new Subject();
        }
        if (typeof callback !== 'function') {
            return this.events[event].asObservable();
        }
        else {
            return this.events[event].asObservable().subscribe(callback, error, complete);
        }
    };
    NPubSubService.prototype.$pub = function (event, eventObject) {
        if (!event) {
            throw new Error("[" + ServiceName + "] => Publish method must get event name.");
        }
        else if (!this.events[event]) {
            return;
        }
        this.events[event].next(eventObject);
    };
    NPubSubService = __decorate([
        Injectable()
    ], NPubSubService);
    return NPubSubService;
}());
export { NPubSubService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1wdWJTdWIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uLXB1YlN1Yi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQTRCLE1BQU0sTUFBTSxDQUFDO0FBRXpELElBQU0sV0FBVyxHQUFXLGdCQUFnQixDQUFDO0FBRzdDO0lBR0U7UUFGUSxXQUFNLEdBQUcsRUFBRSxDQUFDO0lBRUosQ0FBQztJQU1WLDZCQUFJLEdBQVgsVUFBWSxLQUFhLEVBQUUsUUFBK0IsRUFBRSxLQUE0QixFQUFFLFFBQXFCO1FBQzNHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixNQUFNLElBQUksS0FBSyxDQUFDLE1BQUksV0FBVyxrREFBK0MsQ0FBQyxDQUFDO1NBQ25GO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7U0FDM0M7UUFFRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRTtZQUNoQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDNUM7YUFBTTtZQUNILE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNqRjtJQUNMLENBQUM7SUFFTSw2QkFBSSxHQUFYLFVBQVksS0FBYSxFQUFFLFdBQWlCO1FBQ3hDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixNQUFNLElBQUksS0FBSyxDQUFDLE1BQUksV0FBVyw2Q0FBMEMsQ0FBQyxDQUFDO1NBQzlFO2FBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUIsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQWhDVSxjQUFjO1FBRDFCLFVBQVUsRUFBRTtPQUNBLGNBQWMsQ0FpQzFCO0lBQUQscUJBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQWpDWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuXHJcbmNvbnN0IFNlcnZpY2VOYW1lOiBzdHJpbmcgPSBcIlB1YlN1YiBTZXJ2aWNlXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOUHViU3ViU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBldmVudHMgPSB7fTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgcHVibGljICRzdWIoZXZlbnQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PjtcclxuICBwdWJsaWMgJHN1YihldmVudDogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQpOiBTdWJzY3JpcHRpb247XHJcbiAgcHVibGljICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBlcnJvcjogKGVycm9yOiBhbnkpID0+IHZvaWQpOiBTdWJzY3JpcHRpb247XHJcbiAgcHVibGljICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBlcnJvcjogKGVycm9yOiBhbnkpID0+IHZvaWQsIGNvbXBsZXRlOiAoKSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uO1xyXG4gIHB1YmxpYyAkc3ViKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrPzogKHZhbHVlOiBhbnkpID0+IHZvaWQsIGVycm9yPzogKGVycm9yOiBhbnkpID0+IHZvaWQsIGNvbXBsZXRlPzogKCkgPT4gdm9pZCkge1xyXG4gICAgICBpZiAoIWV2ZW50KSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske1NlcnZpY2VOYW1lfV0gPT4gU3Vic2NyaXB0aW9uIG1ldGhvZCBtdXN0IGdldCBldmVudCBuYW1lLmApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5ldmVudHNbZXZlbnRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XSA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRzW2V2ZW50XS5hc09ic2VydmFibGUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50c1tldmVudF0uYXNPYnNlcnZhYmxlKCkuc3Vic2NyaWJlKGNhbGxiYWNrLCBlcnJvciwgY29tcGxldGUpO1xyXG4gICAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgJHB1YihldmVudDogc3RyaW5nLCBldmVudE9iamVjdD86IGFueSkge1xyXG4gICAgICBpZiAoIWV2ZW50KSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske1NlcnZpY2VOYW1lfV0gPT4gUHVibGlzaCBtZXRob2QgbXVzdCBnZXQgZXZlbnQgbmFtZS5gKTtcclxuICAgICAgfSBlbHNlIGlmICghdGhpcy5ldmVudHNbZXZlbnRdKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLm5leHQoZXZlbnRPYmplY3QpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUHViU3ViU2VydmljZSB7XHJcbiAgJHB1YihldmVudDogc3RyaW5nLCBldmVudE9iamVjdD86IGFueSk7XHJcbiAgJHN1YihldmVudDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uO1xyXG4gICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBlcnJvcjogKGVycm9yOiBhbnkpID0+IHZvaWQpOiBTdWJzY3JpcHRpb247XHJcbiAgJHN1YihldmVudDogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQsIGVycm9yOiAoZXJyb3I6IGFueSkgPT4gdm9pZCwgY29tcGxldGU6ICgpID0+IHZvaWQpOiBTdWJzY3JpcHRpb247XHJcbn1cclxuXHJcbmludGVyZmFjZSBJJHN1YiB7XHJcbiAgKGV2ZW50OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcclxuICAoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBlcnJvcjogKGVycm9yOiBhbnkpID0+IHZvaWQpOiBTdWJzY3JpcHRpb247XHJcbiAgKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCwgZXJyb3I6IChlcnJvcjogYW55KSA9PiB2b2lkLCBjb21wbGV0ZTogKCkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcclxufVxyXG4iXX0=