import { __decorate } from "tslib";
import { NgModule, APP_INITIALIZER } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NAuthGuardService } from './n-authGaurd.service';
import { NDataModelService } from './n-dataModel.service';
import { NHttpService } from './n-HTTP.service';
import { NHTTPLoaderService } from './n-HTTPLoader.service';
import { NLocalStorageService } from './n-localStorage.service';
import { NLoginService } from './n-login.service';
import { NLogoutService } from './n-logout.service';
import { NNotificationService } from './n-notification.service';
import { NSnackbarService } from './n-snackbar.service';
import { NPubSubService } from './n-pubSub.service';
import { NSessionStorageService } from './n-sessionStorage.service';
import { NTokenService } from './n-token.service';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { RouterModule } from '@angular/router';
import { InstanceFactory, NgForage, NgForageConfig } from 'ngforage';
import { SnackComponent } from './snackbar/snack/snack.component';
import { SnackbarComponent } from './snackbar/snackbar/snackbar.component';
export function startupServiceFactory(startupService) {
    var res = function () {
        // console.log('module before initstorage call');
        return startupService.initStorage();
    };
    return res;
}
export function NgForageFactory(ngForageConfig) {
    // @ts-ignore
    return new NgForage({}, new InstanceFactory(ngForageConfig));
}
var NeutrinosSeedServicesModule = /** @class */ (function () {
    function NeutrinosSeedServicesModule() {
    }
    NeutrinosSeedServicesModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                HttpClientModule,
                RouterModule
            ],
            providers: [
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: NHttpService,
                    multi: true
                },
                {
                    // Provider for APP_INITIALIZER
                    provide: APP_INITIALIZER,
                    useFactory: startupServiceFactory,
                    deps: [NLocalStorageService],
                    multi: true
                },
                {
                    provide: NgForage,
                    useFactory: NgForageFactory,
                    deps: [
                        NgForageConfig
                    ]
                },
                NAuthGuardService,
                NDataModelService,
                NHttpService,
                NHTTPLoaderService,
                NLocalStorageService,
                NLoginService,
                NLogoutService,
                NNotificationService,
                NSnackbarService,
                NPubSubService,
                NSessionStorageService,
                NTokenService
            ],
            declarations: [
                SnackComponent,
                SnackbarComponent
            ],
            exports: [
                SnackComponent,
                SnackbarComponent
            ]
        })
    ], NeutrinosSeedServicesModule);
    return NeutrinosSeedServicesModule;
}());
export { NeutrinosSeedServicesModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV1dHJpbm9zLXNlZWQtc2VydmljZXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFDbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxZQUFZLEVBQVUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFckUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRzNFLE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxjQUFvQztJQUN4RSxJQUFNLEdBQUcsR0FBRztRQUNWLGlEQUFpRDtRQUNqRCxPQUFPLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUV0QyxDQUFDLENBQUE7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLGNBQThCO0lBQzdELGFBQWE7SUFDYixPQUFPLElBQUksUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFtREQ7SUFBQTtJQUVBLENBQUM7SUFGWSwyQkFBMkI7UUFqRHZDLFFBQVEsQ0FBQztZQUNSLE9BQU8sRUFBRTtnQkFDUCxZQUFZO2dCQUNaLGdCQUFnQjtnQkFDaEIsWUFBWTthQUNiO1lBQ0QsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLFFBQVEsRUFBRSxZQUFZO29CQUN0QixLQUFLLEVBQUUsSUFBSTtpQkFDWjtnQkFDRDtvQkFDRSwrQkFBK0I7b0JBQy9CLE9BQU8sRUFBRSxlQUFlO29CQUN4QixVQUFVLEVBQUUscUJBQXFCO29CQUNqQyxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDNUIsS0FBSyxFQUFFLElBQUk7aUJBQ2Y7Z0JBQ0Q7b0JBQ0MsT0FBTyxFQUFFLFFBQVE7b0JBQ2pCLFVBQVUsRUFBRSxlQUFlO29CQUMzQixJQUFJLEVBQUU7d0JBQ0wsY0FBYztxQkFDZDtpQkFDRDtnQkFDRSxpQkFBaUI7Z0JBQ2pCLGlCQUFpQjtnQkFDakIsWUFBWTtnQkFDWixrQkFBa0I7Z0JBQ2xCLG9CQUFvQjtnQkFDcEIsYUFBYTtnQkFDYixjQUFjO2dCQUNkLG9CQUFvQjtnQkFDcEIsZ0JBQWdCO2dCQUNoQixjQUFjO2dCQUNkLHNCQUFzQjtnQkFDdEIsYUFBYTthQUNkO1lBQ0QsWUFBWSxFQUFFO2dCQUNaLGNBQWM7Z0JBQ2QsaUJBQWlCO2FBQ2xCO1lBQ0QsT0FBTyxFQUFFO2dCQUNQLGNBQWM7Z0JBQ2QsaUJBQWlCO2FBQ2xCO1NBRUYsQ0FBQztPQUNXLDJCQUEyQixDQUV2QztJQUFELGtDQUFDO0NBQUEsQUFGRCxJQUVDO1NBRlksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEFQUF9JTklUSUFMSVpFUiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOQXV0aEd1YXJkU2VydmljZSB9IGZyb20gJy4vbi1hdXRoR2F1cmQuc2VydmljZSc7XHJcbmltcG9ydCB7IE5EYXRhTW9kZWxTZXJ2aWNlIH0gZnJvbSAnLi9uLWRhdGFNb2RlbC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTkh0dHBTZXJ2aWNlIH0gZnJvbSAnLi9uLUhUVFAuc2VydmljZSc7XHJcbmltcG9ydCB7IE5IVFRQTG9hZGVyU2VydmljZSB9IGZyb20gJy4vbi1IVFRQTG9hZGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOTG9jYWxTdG9yYWdlU2VydmljZSB9IGZyb20gJy4vbi1sb2NhbFN0b3JhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IE5Mb2dpblNlcnZpY2UgfSBmcm9tICcuL24tbG9naW4uc2VydmljZSc7XHJcbmltcG9ydCB7IE5Mb2dvdXRTZXJ2aWNlIH0gZnJvbSAnLi9uLWxvZ291dC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTk5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuL24tbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOU25hY2tiYXJTZXJ2aWNlIH0gZnJvbSAnLi9uLXNuYWNrYmFyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOU3lzdGVtU2VydmljZSB9IGZyb20gJy4vbi1zeXN0ZW0uc2VydmljZSc7XHJcbmltcG9ydCB7IE5QdWJTdWJTZXJ2aWNlIH0gZnJvbSAnLi9uLXB1YlN1Yi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTlNlc3Npb25TdG9yYWdlU2VydmljZSB9IGZyb20gJy4vbi1zZXNzaW9uU3RvcmFnZS5zZXJ2aWNlJ1xyXG5pbXBvcnQgeyBOVG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi9uLXRva2VuLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlLCBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgUm91dGVyTW9kdWxlLCBSb3V0ZXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBJbnN0YW5jZUZhY3RvcnksIE5nRm9yYWdlLCBOZ0ZvcmFnZUNvbmZpZyB9IGZyb20gJ25nZm9yYWdlJztcclxuXHJcbmltcG9ydCB7IFNuYWNrQ29tcG9uZW50IH0gZnJvbSAnLi9zbmFja2Jhci9zbmFjay9zbmFjay5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTbmFja2JhckNvbXBvbmVudCB9IGZyb20gJy4vc25hY2tiYXIvc25hY2tiYXIvc25hY2tiYXIuY29tcG9uZW50JztcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RhcnR1cFNlcnZpY2VGYWN0b3J5KHN0YXJ0dXBTZXJ2aWNlOiBOTG9jYWxTdG9yYWdlU2VydmljZSkge1xyXG4gIGNvbnN0IHJlcyA9ICgpID0+IHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdtb2R1bGUgYmVmb3JlIGluaXRzdG9yYWdlIGNhbGwnKTtcclxuICAgIHJldHVybiBzdGFydHVwU2VydmljZS5pbml0U3RvcmFnZSgpO1xyXG5cclxuICB9XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIE5nRm9yYWdlRmFjdG9yeShuZ0ZvcmFnZUNvbmZpZzogTmdGb3JhZ2VDb25maWcpIHtcclxuXHQvLyBAdHMtaWdub3JlXHJcblx0cmV0dXJuIG5ldyBOZ0ZvcmFnZSh7fSwgbmV3IEluc3RhbmNlRmFjdG9yeShuZ0ZvcmFnZUNvbmZpZykpO1xyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIEh0dHBDbGllbnRNb2R1bGUsXHJcbiAgICBSb3V0ZXJNb2R1bGVcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAge1xyXG4gICAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcclxuICAgICAgdXNlQ2xhc3M6IE5IdHRwU2VydmljZSxcclxuICAgICAgbXVsdGk6IHRydWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIC8vIFByb3ZpZGVyIGZvciBBUFBfSU5JVElBTElaRVJcclxuICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxyXG4gICAgICB1c2VGYWN0b3J5OiBzdGFydHVwU2VydmljZUZhY3RvcnksXHJcbiAgICAgIGRlcHM6IFtOTG9jYWxTdG9yYWdlU2VydmljZV0sXHJcbiAgICAgIG11bHRpOiB0cnVlXHJcblx0fSxcclxuXHR7XHJcblx0XHRwcm92aWRlOiBOZ0ZvcmFnZSxcclxuXHRcdHVzZUZhY3Rvcnk6IE5nRm9yYWdlRmFjdG9yeSxcclxuXHRcdGRlcHM6IFtcclxuXHRcdFx0TmdGb3JhZ2VDb25maWdcclxuXHRcdF1cclxuXHR9LFxyXG4gICAgTkF1dGhHdWFyZFNlcnZpY2UsXHJcbiAgICBORGF0YU1vZGVsU2VydmljZSxcclxuICAgIE5IdHRwU2VydmljZSxcclxuICAgIE5IVFRQTG9hZGVyU2VydmljZSxcclxuICAgIE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgTkxvZ2luU2VydmljZSxcclxuICAgIE5Mb2dvdXRTZXJ2aWNlLFxyXG4gICAgTk5vdGlmaWNhdGlvblNlcnZpY2UsXHJcbiAgICBOU25hY2tiYXJTZXJ2aWNlLFxyXG4gICAgTlB1YlN1YlNlcnZpY2UsXHJcbiAgICBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgTlRva2VuU2VydmljZVxyXG4gIF0sXHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBTbmFja0NvbXBvbmVudCxcclxuICAgIFNuYWNrYmFyQ29tcG9uZW50XHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBTbmFja0NvbXBvbmVudCxcclxuICAgIFNuYWNrYmFyQ29tcG9uZW50XHJcbiAgXVxyXG5cclxufSlcclxuZXhwb3J0IGNsYXNzIE5ldXRyaW5vc1NlZWRTZXJ2aWNlc01vZHVsZSB7XHJcblxyXG59XHJcbiJdfQ==