import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
let NCameraDirective = class NCameraDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getPicture()
            .then(sucess => this.onsuccess.emit(sucess))
            .catch(error => this.onerror.emit(error));
    }
    getPicture() {
        return new Promise((resolve, reject) => {
            this.fsv.getPicture(this.cameraOptions).then(res => {
                const options = {
                    'formData': res,
                    'entityName': this.cameraOptions.entityName,
                    'metadata': this.cameraOptions.metadata
                };
                this.fsv.upload(options)
                    .then(uri => resolve(uri))
                    .catch(err => reject(err));
            }).catch(err => reject(err));
        });
    }
};
NCameraDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NCameraDirective.prototype, "cameraOptions", void 0);
__decorate([
    Output()
], NCameraDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NCameraDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NCameraDirective.prototype, "methodToHandleMouseClickAction", null);
NCameraDirective = __decorate([
    Directive({
        selector: '[n-camera]'
    })
], NCameraDirective);
export { NCameraDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1jYW1lcmEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLW1vZHVsZS8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbmV1dHJpbm9zLW1vZHVsZS9uZXV0cmlub3MtZmlsZS9kaXJlY3RpdmVzL24tY2FtZXJhLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQWlCOUQsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUFLM0IsWUFBb0IsR0FBbUI7UUFBbkIsUUFBRyxHQUFILEdBQUcsQ0FBZ0I7UUFIN0IsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVmLENBQUM7SUFFckIsOEJBQThCO1FBQ25ELElBQUksQ0FBQyxVQUFVLEVBQUU7YUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMzQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxVQUFVO1FBQ1IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNqRCxNQUFNLE9BQU8sR0FBRztvQkFDZCxVQUFVLEVBQUUsR0FBRztvQkFDZixZQUFZLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVO29CQUMzQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRO2lCQUN4QyxDQUFDO2dCQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztxQkFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUN6QixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFBOztZQXRCMEIsY0FBYzs7QUFKOUI7SUFBUixLQUFLLEVBQUU7dURBQWtDO0FBQ2hDO0lBQVQsTUFBTSxFQUFFO21EQUFtRDtBQUNsRDtJQUFULE1BQU0sRUFBRTtpREFBaUQ7QUFJbkM7SUFBdEIsWUFBWSxDQUFDLE9BQU8sQ0FBQztzRUFJckI7QUFYVSxnQkFBZ0I7SUFINUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFlBQVk7S0FDdkIsQ0FBQztHQUNXLGdCQUFnQixDQTJCNUI7U0EzQlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5GaWxlSU9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbi1maWxlSU8uc2VydmljZSc7XHJcbmltcG9ydCB7IE5EaXJlY3RpdmVPcHRpb25zIH0gZnJvbSAnLi9kaXJlY3RpdmUuY2xhc3MnO1xyXG5cclxuXHJcbmRlY2xhcmUgY29uc3QgbmF2aWdhdG9yOiBhbnk7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhbWVyYU9wdGlvbnMge1xyXG4gIHF1YWxpdHk/OiA1MDtcclxuICBkZXN0aW5hdGlvblR5cGU/OiAxIHwgMjtcclxuICBFbmNvZGluZ1R5cGU/OiAwIHwgMTtcclxuICBNZWRpYVR5cGU/OiAwIHwgMSB8IDI7XHJcbiAgUGljdHVyZVNvdXJjZVR5cGU/OiAwIHwgMSB8IDI7XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW24tY2FtZXJhXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5DYW1lcmFEaXJlY3RpdmUge1xyXG4gIEBJbnB1dCgpIGNhbWVyYU9wdGlvbnM6IE5EaXJlY3RpdmVPcHRpb25zO1xyXG4gIEBPdXRwdXQoKSBvbnN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBvbmVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmc3Y6IE5GaWxlSU9TZXJ2aWNlKSB7IH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBtZXRob2RUb0hhbmRsZU1vdXNlQ2xpY2tBY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldFBpY3R1cmUoKVxyXG4gICAgICAudGhlbihzdWNlc3MgPT4gdGhpcy5vbnN1Y2Nlc3MuZW1pdChzdWNlc3MpKVxyXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gdGhpcy5vbmVycm9yLmVtaXQoZXJyb3IpKTtcclxuICB9XHJcblxyXG4gIGdldFBpY3R1cmUoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMuZnN2LmdldFBpY3R1cmUodGhpcy5jYW1lcmFPcHRpb25zKS50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICdmb3JtRGF0YSc6IHJlcyxcclxuICAgICAgICAgICdlbnRpdHlOYW1lJzogdGhpcy5jYW1lcmFPcHRpb25zLmVudGl0eU5hbWUsXHJcbiAgICAgICAgICAnbWV0YWRhdGEnOiB0aGlzLmNhbWVyYU9wdGlvbnMubWV0YWRhdGFcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZnN2LnVwbG9hZChvcHRpb25zKVxyXG4gICAgICAgICAgLnRoZW4odXJpID0+IHJlc29sdmUodXJpKSlcclxuICAgICAgICAgIC5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==