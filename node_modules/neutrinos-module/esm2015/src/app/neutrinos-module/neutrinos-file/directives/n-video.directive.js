import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
let NVideoDirective = class NVideoDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getVideo()
            .then(sucess => this.onsuccess.emit(sucess))
            .catch(error => this.onerror.emit(error));
    }
    getVideo() {
        return new Promise((resolve, reject) => {
            this.fsv.getVideo(this.videoOptions).then(res => {
                const options = {
                    'formData': res,
                    'entityName': this.videoOptions.entityName,
                    'metadata': this.videoOptions.metadata
                };
                this.fsv.upload(options)
                    .then(uri => resolve(uri))
                    .catch(err => reject(err));
            }).catch(err => reject(err));
        });
    }
};
NVideoDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NVideoDirective.prototype, "videoOptions", void 0);
__decorate([
    Output()
], NVideoDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NVideoDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NVideoDirective.prototype, "methodToHandleMouseClickAction", null);
NVideoDirective = __decorate([
    Directive({
        selector: '[n-video]'
    })
], NVideoDirective);
export { NVideoDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi12aWRlby5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZXV0cmlub3MtbW9kdWxlLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3MtbW9kdWxlL25ldXRyaW5vcy1maWxlL2RpcmVjdGl2ZXMvbi12aWRlby5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFTOUQsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQUsxQixZQUFvQixHQUFtQjtRQUFuQixRQUFHLEdBQUgsR0FBRyxDQUFnQjtRQUg3QixjQUFTLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBRWYsQ0FBQztJQUVyQiw4QkFBOEI7UUFDbkQsSUFBSSxDQUFDLFFBQVEsRUFBRTthQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzNDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzlDLE1BQU0sT0FBTyxHQUFHO29CQUNkLFVBQVUsRUFBRSxHQUFHO29CQUNmLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVU7b0JBQzFDLFVBQVUsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVE7aUJBQ3ZDLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO3FCQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQ3pCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQy9CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7O1lBdEIwQixjQUFjOztBQUo5QjtJQUFSLEtBQUssRUFBRTtxREFBaUM7QUFDL0I7SUFBVCxNQUFNLEVBQUU7a0RBQW1EO0FBQ2xEO0lBQVQsTUFBTSxFQUFFO2dEQUFpRDtBQUluQztJQUF0QixZQUFZLENBQUMsT0FBTyxDQUFDO3FFQUlyQjtBQVhVLGVBQWU7SUFIM0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFdBQVc7S0FDdEIsQ0FBQztHQUNXLGVBQWUsQ0EyQjNCO1NBM0JZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTkZpbGVJT1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9uLWZpbGVJTy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTkRpcmVjdGl2ZU9wdGlvbnMgfSBmcm9tICcuL2RpcmVjdGl2ZS5jbGFzcyc7XHJcblxyXG5cclxuZGVjbGFyZSBjb25zdCBuYXZpZ2F0b3I6IGFueTtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW24tdmlkZW9dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTlZpZGVvRGlyZWN0aXZlIHtcclxuICBASW5wdXQoKSB2aWRlb09wdGlvbnM6IE5EaXJlY3RpdmVPcHRpb25zO1xyXG4gIEBPdXRwdXQoKSBvbnN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBvbmVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmc3Y6IE5GaWxlSU9TZXJ2aWNlKSB7IH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBtZXRob2RUb0hhbmRsZU1vdXNlQ2xpY2tBY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldFZpZGVvKClcclxuICAgICAgLnRoZW4oc3VjZXNzID0+IHRoaXMub25zdWNjZXNzLmVtaXQoc3VjZXNzKSlcclxuICAgICAgLmNhdGNoKGVycm9yID0+IHRoaXMub25lcnJvci5lbWl0KGVycm9yKSk7XHJcbiAgfVxyXG5cclxuICBnZXRWaWRlbygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5mc3YuZ2V0VmlkZW8odGhpcy52aWRlb09wdGlvbnMpLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgJ2Zvcm1EYXRhJzogcmVzLFxyXG4gICAgICAgICAgJ2VudGl0eU5hbWUnOiB0aGlzLnZpZGVvT3B0aW9ucy5lbnRpdHlOYW1lLFxyXG4gICAgICAgICAgJ21ldGFkYXRhJzogdGhpcy52aWRlb09wdGlvbnMubWV0YWRhdGFcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZnN2LnVwbG9hZChvcHRpb25zKVxyXG4gICAgICAgICAgLnRoZW4odXJpID0+IHJlc29sdmUodXJpKSlcclxuICAgICAgICAgIC5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==