import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
let NFingerprintDirective = class NFingerprintDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getFingerprint()
            .then(sucess => this.onsuccess.emit(sucess))
            .catch(error => this.onerror.emit(error));
    }
    getFingerprint() {
        return new Promise((resolve, reject) => {
            this.fsv.getFingerprint(this.fingerprintOptions).then(res => {
                return resolve(res);
            }).catch(err => reject(err));
        });
    }
};
NFingerprintDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NFingerprintDirective.prototype, "fingerprintOptions", void 0);
__decorate([
    Output()
], NFingerprintDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NFingerprintDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NFingerprintDirective.prototype, "methodToHandleMouseClickAction", null);
NFingerprintDirective = __decorate([
    Directive({
        selector: '[n-fingerprint]'
    })
], NFingerprintDirective);
export { NFingerprintDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1maW5nZXJwcmludC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZXV0cmlub3MtbW9kdWxlLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3MtbW9kdWxlL25ldXRyaW5vcy1maWxlL2RpcmVjdGl2ZXMvbi1maW5nZXJwcmludC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFTOUQsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFLaEMsWUFBb0IsR0FBbUI7UUFBbkIsUUFBRyxHQUFILEdBQUcsQ0FBZ0I7UUFIN0IsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVmLENBQUM7SUFFckIsOEJBQThCO1FBQ25ELElBQUksQ0FBQyxjQUFjLEVBQUU7YUFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDM0MsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsY0FBYztRQUNaLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMxRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFBOztZQWYwQixjQUFjOztBQUo5QjtJQUFSLEtBQUssRUFBRTtpRUFBdUM7QUFDckM7SUFBVCxNQUFNLEVBQUU7d0RBQW1EO0FBQ2xEO0lBQVQsTUFBTSxFQUFFO3NEQUFpRDtBQUluQztJQUF0QixZQUFZLENBQUMsT0FBTyxDQUFDOzJFQUlyQjtBQVhVLHFCQUFxQjtJQUhqQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsaUJBQWlCO0tBQzVCLENBQUM7R0FDVyxxQkFBcUIsQ0FvQmpDO1NBcEJZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBORmlsZUlPU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL24tZmlsZUlPLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBORGlyZWN0aXZlT3B0aW9ucyB9IGZyb20gJy4vZGlyZWN0aXZlLmNsYXNzJztcclxuXHJcblxyXG5kZWNsYXJlIGNvbnN0IG5hdmlnYXRvcjogYW55O1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbi1maW5nZXJwcmludF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBORmluZ2VycHJpbnREaXJlY3RpdmUge1xyXG4gIEBJbnB1dCgpIGZpbmdlcnByaW50T3B0aW9uczogTkRpcmVjdGl2ZU9wdGlvbnM7XHJcbiAgQE91dHB1dCgpIG9uc3VjY2VzczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG9uZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZzdjogTkZpbGVJT1NlcnZpY2UpIHsgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycpIG1ldGhvZFRvSGFuZGxlTW91c2VDbGlja0FjdGlvbigpIHtcclxuICAgIHRoaXMuZ2V0RmluZ2VycHJpbnQoKVxyXG4gICAgICAudGhlbihzdWNlc3MgPT4gdGhpcy5vbnN1Y2Nlc3MuZW1pdChzdWNlc3MpKVxyXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gdGhpcy5vbmVycm9yLmVtaXQoZXJyb3IpKTtcclxuICB9XHJcblxyXG4gIGdldEZpbmdlcnByaW50KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmZzdi5nZXRGaW5nZXJwcmludCh0aGlzLmZpbmdlcnByaW50T3B0aW9ucykudGhlbihyZXMgPT4ge1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlKHJlcyk7XHJcbiAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19