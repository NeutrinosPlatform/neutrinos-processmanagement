import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { NSystemService } from 'neutrinos-seed-services';
let NFileIOService = class NFileIOService {
    constructor(http) {
        this.http = http;
        this.checkFileExist = (path, fileName, i, callback) => {
            return window.resolveLocalFileSystemURL(path + fileName, () => {
                let length = 4;
                if (fileName.lastIndexOf('(') > -1) {
                    const isExist = parseInt(fileName.slice((fileName.lastIndexOf('(') + 1), fileName.lastIndexOf(')')), 10);
                    if (!isNaN(isExist)) {
                        i = isExist + 1;
                        if (i > 10 && i < 100) {
                            length += 1;
                        }
                        else if (i > 100) {
                            length += 2;
                        }
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.') - length)) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                    }
                    else {
                        i += 1;
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                    }
                }
                else {
                    i += 1;
                    fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                    fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                }
                return this.checkFileExist(path, fileName, i, callback);
            }, () => {
                return callback(fileName);
            });
        };
        this.systemService = NSystemService.getInstance();
        this.appProperties = this.systemService.getVal('properties');
    }
    getFileInfo(options) {
        let dataModelURL = this.systemService.getDataModelUrl();
        if (options.metadata) {
            dataModelURL += `${this.appProperties.appName}_${options.entityName}.files?filter={"metadata.key": "${options.metadata.key}"}`;
        }
        else {
            dataModelURL += `${this.appProperties.appName}_${options.entityName}.files/${options.fileId}`;
        }
        return this.http.get(dataModelURL);
    }
    getFormData(fileUri) {
        return new Promise((resolve, reject) => {
            window.resolveLocalFileSystemURL(fileUri, (fileEntry) => {
                fileEntry.file((file) => {
                    const reader = new FileReader();
                    reader.onerror = evt => {
                        return reject(evt);
                    };
                    reader.onloadend = evt => {
                        const formData = new FormData();
                        const blob = new Blob([new Uint8Array(reader.result)], { type: file.type });
                        formData.append('file', blob, file.name);
                        return resolve(formData);
                    };
                    reader.readAsArrayBuffer(file);
                });
            }, (error) => {
                return reject(error);
            });
        });
    }
    getPicture(cameraOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                navigator.camera.getPicture((imageUri) => {
                    this.getFormData(imageUri).then(res => {
                        return resolve(res);
                    }).catch(err => reject(err));
                }, (error) => {
                    return reject(error);
                }, cameraOptions);
            }, false);
        });
    }
    scanPicture(scanOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (scanOptions.hasOwnProperty('sourceType') && scanOptions.hasOwnProperty('doUpload')) {
                    scan.scanDoc(scanOptions.sourceType, (imageUri) => {
                        if (scanOptions.doUpload) {
                            this.getFormData(imageUri).then(res => {
                                return resolve(res);
                            }).catch(err => reject(err));
                        }
                        else {
                            resolve(imageUri);
                        }
                    }, (error) => {
                        return reject(error);
                    });
                }
                else {
                    reject('sourceType not found');
                }
            }, false);
        });
    }
    //Barcode
    getBarcode(barcodeOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                cordova.plugins.barcodeScanner.scan((result) => {
                    if (result.cancelled) {
                        return reject(result);
                    }
                    else {
                        return resolve(result);
                    }
                }, (error) => {
                    return reject(error);
                }, barcodeOptions);
            }, false);
        });
    }
    //Video
    getVideo(videoOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                navigator.device.capture.captureVideo((mediaFiles) => {
                    var imageUri = mediaFiles[0].fullPath;
                    this.getFormData(imageUri).then(res => {
                        return resolve(res);
                    }).catch(err => reject(err));
                }, (error) => {
                    return reject(error);
                }, {});
            }, false);
        });
    }
    //tts
    getTts(ttsOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (ttsOptions.hasOwnProperty('text')) {
                    TTS.speak(ttsOptions).then(() => {
                        return resolve('success');
                    }, (reason) => {
                        return reject(reason);
                    });
                }
                else {
                    reject('text not found');
                }
            }, false);
        });
    }
    //shake
    getShake(shakeOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (shakeOptions.hasOwnProperty('start') && shakeOptions.hasOwnProperty('sensitivity')) {
                    if (shakeOptions.start) {
                        shake.startWatch(() => {
                            return resolve('success');
                        }, shakeOptions.sensitivity, () => {
                            return reject('error');
                        });
                    }
                    else {
                        shake.stopWatch();
                    }
                }
                else {
                    reject('start or sensitivity not found');
                }
            }, false);
        });
    }
    //ocr
    getOcr(ocrOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (ocrOptions.hasOwnProperty('uriOrBase') && ocrOptions.hasOwnProperty('returnType')) {
                    navigator.camera.getPicture((imageData) => {
                        textocr.recText(ocrOptions.uriOrBase, ocrOptions.returnType, imageData, (recognizedText) => {
                            return resolve(recognizedText);
                        }, (message) => {
                            return reject(message);
                        });
                    }, (message) => {
                        return reject(message);
                    }, ocrOptions);
                }
                else {
                    reject('uriOrBase or returnType not found');
                }
            }, false);
        });
    }
    //fingerprint
    getFingerprint(fingerprintOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (fingerprintOptions.hasOwnProperty('clientId') && fingerprintOptions.hasOwnProperty('clientSecret')) {
                    Fingerprint.isAvailable((result) => {
                        Fingerprint.show(fingerprintOptions, () => {
                            return resolve('success');
                        }, (err) => {
                            return reject(err);
                        });
                    }, (message) => {
                        return reject(message);
                    });
                }
                else {
                    reject('clientId or clientSecret not found');
                }
            }, false);
        });
    }
    upload(options) {
        return new Promise((resolve, reject) => {
            let body = new FormData();
            if (options.formData) {
                body = options.formData;
            }
            else if (options.files) {
                body.append('file', options.files);
            }
            else {
                reject('No file selected!');
            }
            if (options.metadata) {
                body.append('metadata', JSON.stringify(options.metadata));
            }
            const headers = { 'Content-Type': 'no-content' };
            const url = this.systemService.getFileIOUrl() + `${options.entityName}`;
            let temp_headers = { headers: this.setHeaders(headers) };
            this.http.post(url, body, temp_headers)
                .subscribe(res => resolve(res), err => reject(err));
        });
    }
    download(options) {
        return new Promise((resolve, reject) => {
            if (options.entityName && (options.metadata || options.fileId)) {
                this.getFileInfo(options).subscribe((res) => {
                    if (options.metadata) {
                        res = res[res.length - 1];
                    }
                    else {
                        res = res.result;
                    }
                    const fileInfo = {
                        contentType: '',
                        filename: ''
                    };
                    if (res && res['contentType'] && res['filename']) {
                        fileInfo['contentType'] = res['contentType'];
                        fileInfo['filename'] = res['filename'];
                        let fileIOURL = this.systemService.getFileIOUrl();
                        if (options.metadata) {
                            fileIOURL += `${options.entityName}?metadataFilter={"metadata.key": "${options.metadata.key}"}`;
                        }
                        else {
                            fileIOURL += `${options.entityName}/${options.fileId}`;
                        }
                        const headers = {
                            'Accept': fileInfo.contentType
                        };
                        this.http.get(fileIOURL, { headers: this.setHeaders(headers), responseType: 'blob' }).subscribe((response) => {
                            const blob = new Blob([response.body], { type: fileInfo.contentType });
                            this.saveFile(blob, fileInfo.filename).then((resp) => {
                            }).catch(err => reject(err));
                        }, err => reject(err));
                    }
                    else {
                        reject('fileInfo not exit');
                    }
                }, err => reject(err));
            }
            else {
                return reject('download options not found');
            }
        });
    }
    saveFile(data, filename) {
        return new Promise((resolve, reject) => {
            if (this.systemService.checkDevice() == 'mobile') {
                const storageLocation = this.systemService.isAndroid() ? cordova.file.externalRootDirectory : cordova.file.documentsDirectory;
                this.createDirectory(storageLocation, this.appProperties.appName, filename, data)
                    .then(res => resolve(res))
                    .catch(err => reject(err));
            }
            else {
                this.saveToBrowser(data, filename).then(res => resolve(res));
            }
        });
    }
    saveToBrowser(data, fileName) {
        return new Promise((resolve) => {
            // Edge 20+
            const isEdge = !( /*@cc_on!@*/false || !!document['documentMode']) && !!window.StyleMedia;
            if (isEdge) {
                window.navigator.msSaveBlob(data, fileName);
            }
            else {
                const downloadURL = window.URL.createObjectURL(data);
                const anchor = document.createElement('a');
                document.body.appendChild(anchor);
                anchor.style.display = 'none';
                anchor.download = fileName;
                anchor.href = downloadURL;
                anchor.click();
                window.URL.revokeObjectURL(downloadURL);
                document.body.removeChild(anchor);
                anchor.remove();
            }
            return resolve('download complete');
        });
    }
    createDirectory(rootDirectory, appName, fileName, data) {
        return new Promise((resolve, reject) => {
            window.resolveLocalFileSystemURL(rootDirectory, (fileSystem) => {
                fileSystem.getDirectory(appName, { create: true }, (dirEntry) => {
                    this.checkFileExist(dirEntry.nativeURL, fileName, 0, (newFileName) => {
                        dirEntry.getFile(newFileName, { create: true }, (targetFile) => {
                            targetFile.createWriter((fileWriter) => {
                                fileWriter.onwriteend = () => {
                                    return resolve(targetFile.toURL());
                                };
                                fileWriter.onerror = (err) => {
                                    return reject(err);
                                };
                                fileWriter.write(data);
                            });
                        });
                    });
                }, err => reject(err));
            }, err => reject(err));
        });
    }
    setHeaders(headerJSON) {
        let headers = new HttpHeaders();
        for (const key in headerJSON) {
            if (key) {
                headers = headers.set(key, headerJSON[key]);
            }
        }
        return headers;
    }
};
NFileIOService.ctorParameters = () => [
    { type: HttpClient }
];
NFileIOService = __decorate([
    Injectable()
], NFileIOService);
export { NFileIOService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1maWxlSU8uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1tb2R1bGUvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1tb2R1bGUvbmV1dHJpbm9zLWZpbGUvc2VydmljZXMvbi1maWxlSU8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQWF4RCxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0lBSXpCLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFzVDVCLG1CQUFjLEdBQUcsQ0FBQyxJQUFZLEVBQUUsUUFBZ0IsRUFBRSxDQUFTLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDL0UsT0FBTyxNQUFNLENBQUMseUJBQXlCLENBQUMsSUFBSSxHQUFHLFFBQVEsRUFBRSxHQUFHLEVBQUU7Z0JBQzVELElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztnQkFDZixJQUFJLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7b0JBQ2xDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ3pHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7d0JBQ25CLENBQUMsR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDO3dCQUNoQixJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRTs0QkFDckIsTUFBTSxJQUFJLENBQUMsQ0FBQzt5QkFDYjs2QkFBTSxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUU7NEJBQ2xCLE1BQU0sSUFBSSxDQUFDLENBQUM7eUJBQ2I7d0JBQ0QsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3FCQUNqSTt5QkFBTTt3QkFDTCxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNQLFFBQVEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUN0RyxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztxQkFDeEg7aUJBQ0Y7cUJBQU07b0JBQ0wsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDUCxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDdEcsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ3hIO2dCQUNELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMxRCxDQUFDLEVBQUUsR0FBRyxFQUFFO2dCQUNOLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFBO1FBaFZDLElBQUksQ0FBQyxhQUFhLEdBQUcsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVPLFdBQVcsQ0FBQyxPQUFPO1FBQ3pCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEQsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ3BCLFlBQVksSUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLG1DQUFtQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ2hJO2FBQU07WUFDTCxZQUFZLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBVSxVQUFVLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUMvRjtRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVPLFdBQVcsQ0FBQyxPQUFlO1FBQ2pDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dCQUN0RCxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7b0JBQ3RCLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7b0JBQ2hDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLEVBQUU7d0JBQ3JCLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNyQixDQUFDLENBQUM7b0JBQ0YsTUFBTSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsRUFBRTt3QkFDdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQzt3QkFDaEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBTSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQzt3QkFDakYsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDekMsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQzNCLENBQUMsQ0FBQztvQkFDRixNQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2pDLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ1gsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxVQUFVLENBQUMsYUFBYTtRQUM3QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO2dCQUM1QyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO29CQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTt3QkFDcEMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3RCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtvQkFDWCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkIsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLFdBQVcsQ0FBQyxXQUFXO1FBQzVCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7Z0JBQzVDLElBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFO29CQUNyRixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRTt3QkFDaEQsSUFBSSxXQUFXLENBQUMsUUFBUSxFQUFFOzRCQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtnQ0FDcEMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7NEJBQ3RCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3lCQUNoQzs2QkFDSTs0QkFDRCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7eUJBQ3JCO29CQUNILENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO3dCQUNYLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUN2QixDQUFDLENBQUMsQ0FBQztpQkFDSjtxQkFBTTtvQkFDTCxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQztpQkFDaEM7WUFDSCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFSCxTQUFTO0lBQ0EsVUFBVSxDQUFDLGNBQWM7UUFDOUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtnQkFDNUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFDLEVBQUU7b0JBQzVDLElBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRTt3QkFDbkIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7cUJBQ3ZCO3lCQUFNO3dCQUNMLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO3FCQUN4QjtnQkFDSCxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUMsRUFBRTtvQkFDVixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkIsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQ3JCLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVILE9BQU87SUFDRSxRQUFRLENBQUMsWUFBWTtRQUMxQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO2dCQUM1QyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtvQkFDbkQsSUFBSSxRQUFRLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztvQkFDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7d0JBQ3BDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUN0QixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQ1gsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3ZCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNULENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVILEtBQUs7SUFDSSxNQUFNLENBQUMsVUFBVTtRQUN0QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO2dCQUM1QyxJQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQ3BDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTt3QkFDOUIsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQzVCLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFO3dCQUNaLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN4QixDQUFDLENBQUMsQ0FBQztpQkFDSjtxQkFBTTtvQkFDTCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztpQkFDMUI7WUFDSCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFSCxPQUFPO0lBQ0UsUUFBUSxDQUFDLFlBQVk7UUFDMUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtnQkFDNUMsSUFBRyxZQUFZLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFlBQVksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEVBQUU7b0JBQ3JGLElBQUcsWUFBWSxDQUFDLEtBQUssRUFBRTt3QkFDckIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7NEJBQ3BCLE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUM1QixDQUFDLEVBQUUsWUFBWSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7NEJBQ2hDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3dCQUN6QixDQUFDLENBQUMsQ0FBQztxQkFDSjt5QkFBTTt3QkFDTCxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7cUJBQ25CO2lCQUNGO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO2lCQUMxQztZQUNILENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVILEtBQUs7SUFDSSxNQUFNLENBQUMsVUFBVTtRQUNwQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO2dCQUM1QyxJQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLElBQUksVUFBVSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRTtvQkFDcEYsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTt3QkFDdEMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLENBQUMsY0FBYyxFQUFFLEVBQUU7NEJBQzNGLE9BQU8sT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO3dCQUNqQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTs0QkFDYixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQzt3QkFDekIsQ0FBQyxDQUFDLENBQUM7b0JBQ0wsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUU7d0JBQ2IsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3pCLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztpQkFDaEI7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7aUJBQzdDO1lBRUgsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBR0gsYUFBYTtJQUNKLGNBQWMsQ0FBQyxrQkFBa0I7UUFDdEMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtnQkFDNUMsSUFBRyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLElBQUksa0JBQWtCLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxFQUFFO29CQUNyRyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7d0JBQ2pDLFdBQVcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFOzRCQUN4QyxPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDNUIsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7NEJBQ1QsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ3JCLENBQUMsQ0FBQyxDQUFDO29CQUNMLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFO3dCQUNiLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUN6QixDQUFDLENBQUMsQ0FBQztpQkFDSjtxQkFBTTtvQkFDTCxNQUFNLENBQUMsb0NBQW9DLENBQUMsQ0FBQztpQkFDOUM7WUFDSCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTztRQUNuQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksSUFBSSxHQUFhLElBQUksUUFBUSxFQUFFLENBQUM7WUFDcEMsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO2dCQUNwQixJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQzthQUN6QjtpQkFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNwQztpQkFBTTtnQkFDTCxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQzthQUM3QjtZQUNELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUMzRDtZQUVELE1BQU0sT0FBTyxHQUFHLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxDQUFDO1lBQ2pELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLEdBQUcsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDeEUsSUFBSSxZQUFZLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFBO1lBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsWUFBWSxDQUFDO2lCQUNwQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQzVCLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQVk7UUFDMUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxJQUFJLE9BQU8sQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDOUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtvQkFDMUMsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO3dCQUNwQixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7cUJBQzNCO3lCQUFNO3dCQUNMLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO3FCQUNsQjtvQkFDRCxNQUFNLFFBQVEsR0FBRzt3QkFDZixXQUFXLEVBQUUsRUFBRTt3QkFDZixRQUFRLEVBQUUsRUFBRTtxQkFDYixDQUFDO29CQUNGLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUU7d0JBQ2hELFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7d0JBQzdDLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7d0JBQ3ZDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7d0JBQ2xELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTs0QkFDcEIsU0FBUyxJQUFJLEdBQUcsT0FBTyxDQUFDLFVBQVUscUNBQXFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7eUJBQ2pHOzZCQUFNOzRCQUNMLFNBQVMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO3lCQUN4RDt3QkFDRCxNQUFNLE9BQU8sR0FBRzs0QkFDZCxRQUFRLEVBQUUsUUFBUSxDQUFDLFdBQVc7eUJBQy9CLENBQUM7d0JBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUU7NEJBQ2hILE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDOzRCQUN2RSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7NEJBQ3JELENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUMvQixDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztxQkFDeEI7eUJBQU07d0JBQ0wsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7cUJBQzdCO2dCQUNILENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO2lCQUFNO2dCQUNMLE9BQU8sTUFBTSxDQUFDLDRCQUE0QixDQUFDLENBQUM7YUFDN0M7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxRQUFRLENBQUMsSUFBVSxFQUFFLFFBQWdCO1FBQzFDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxJQUFJLFFBQVEsRUFBRTtnQkFDaEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztnQkFDOUgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQztxQkFDOUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUN6QixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM5QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM5RDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGFBQWEsQ0FBQyxJQUFVLEVBQUUsUUFBZ0I7UUFDaEQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzdCLFdBQVc7WUFDWCxNQUFNLE1BQU0sR0FBRyxDQUFDLEVBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO1lBQ3pGLElBQUksTUFBTSxFQUFFO2dCQUNWLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQzthQUM3QztpQkFBTTtnQkFDTCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDckQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDM0MsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2xDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztnQkFDOUIsTUFBTSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7Z0JBQzNCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDO2dCQUMxQixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNsQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDakI7WUFDRCxPQUFPLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGVBQWUsQ0FBQyxhQUFrQixFQUFFLE9BQWUsRUFBRSxRQUFnQixFQUFFLElBQVU7UUFDdkYsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxNQUFNLENBQUMseUJBQXlCLENBQUMsYUFBYSxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUU7Z0JBQzdELFVBQVUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUU7b0JBQzlELElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUU7d0JBQ25FLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUU7NEJBQzdELFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtnQ0FDckMsVUFBVSxDQUFDLFVBQVUsR0FBRyxHQUFHLEVBQUU7b0NBQzNCLE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dDQUNyQyxDQUFDLENBQUM7Z0NBRUYsVUFBVSxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFO29DQUMzQixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQ0FDckIsQ0FBQyxDQUFDO2dDQUNGLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7NEJBQ3pCLENBQUMsQ0FBQyxDQUFDO3dCQUNMLENBQUMsQ0FBQyxDQUFDO29CQUNMLENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQStCTyxVQUFVLENBQUMsVUFBa0I7UUFDbkMsSUFBSSxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUNoQyxLQUFLLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRTtZQUM1QixJQUFJLEdBQUcsRUFBRTtnQkFDUCxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDN0M7U0FDRjtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Q0FFRixDQUFBOztZQTdWMkIsVUFBVTs7QUFKekIsY0FBYztJQUQxQixVQUFVLEVBQUU7R0FDQSxjQUFjLENBaVcxQjtTQWpXWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgTlN5c3RlbVNlcnZpY2V9IGZyb20gJ25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzJztcclxuXHJcblxyXG5kZWNsYXJlIGNvbnN0IHdpbmRvdzogYW55O1xyXG5kZWNsYXJlIGNvbnN0IGNvcmRvdmE6IGFueTtcclxuZGVjbGFyZSBjb25zdCBuYXZpZ2F0b3I6IGFueTtcclxuZGVjbGFyZSBjb25zdCBzY2FuOiBhbnk7XHJcbmRlY2xhcmUgY29uc3QgdGV4dG9jcjogYW55O1xyXG5kZWNsYXJlIGNvbnN0IFRUUzogYW55O1xyXG5kZWNsYXJlIGNvbnN0IHNoYWtlOiBhbnk7XHJcbmRlY2xhcmUgY29uc3QgRmluZ2VycHJpbnQ6IGFueTtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5GaWxlSU9TZXJ2aWNlIHtcclxuICBzeXN0ZW1TZXJ2aWNlO1xyXG4gIGFwcFByb3BlcnRpZXM7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xyXG4gICAgdGhpcy5zeXN0ZW1TZXJ2aWNlID0gTlN5c3RlbVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcclxuICAgIHRoaXMuYXBwUHJvcGVydGllcyA9IHRoaXMuc3lzdGVtU2VydmljZS5nZXRWYWwoJ3Byb3BlcnRpZXMnKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0RmlsZUluZm8ob3B0aW9ucyk6IGFueSB7XHJcbiAgICBsZXQgZGF0YU1vZGVsVVJMID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldERhdGFNb2RlbFVybCgpO1xyXG4gICAgaWYgKG9wdGlvbnMubWV0YWRhdGEpIHtcclxuICAgICAgZGF0YU1vZGVsVVJMICs9IGAke3RoaXMuYXBwUHJvcGVydGllcy5hcHBOYW1lfV8ke29wdGlvbnMuZW50aXR5TmFtZX0uZmlsZXM/ZmlsdGVyPXtcIm1ldGFkYXRhLmtleVwiOiBcIiR7b3B0aW9ucy5tZXRhZGF0YS5rZXl9XCJ9YDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRhdGFNb2RlbFVSTCArPSBgJHt0aGlzLmFwcFByb3BlcnRpZXMuYXBwTmFtZX1fJHtvcHRpb25zLmVudGl0eU5hbWV9LmZpbGVzLyR7b3B0aW9ucy5maWxlSWR9YDtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGRhdGFNb2RlbFVSTCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEZvcm1EYXRhKGZpbGVVcmk6IHN0cmluZyk6IFByb21pc2U8Rm9ybURhdGE+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHdpbmRvdy5yZXNvbHZlTG9jYWxGaWxlU3lzdGVtVVJMKGZpbGVVcmksIChmaWxlRW50cnkpID0+IHtcclxuICAgICAgICBmaWxlRW50cnkuZmlsZSgoZmlsZSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgIHJlYWRlci5vbmVycm9yID0gZXZ0ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChldnQpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSBldnQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW25ldyBVaW50OEFycmF5KDxhbnk+cmVhZGVyLnJlc3VsdCldLCB7IHR5cGU6IGZpbGUudHlwZSB9KTtcclxuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgYmxvYiwgZmlsZS5uYW1lKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZm9ybURhdGEpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0UGljdHVyZShjYW1lcmFPcHRpb25zKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VyZWFkeScsICgpID0+IHtcclxuICAgICAgICBuYXZpZ2F0b3IuY2FtZXJhLmdldFBpY3R1cmUoKGltYWdlVXJpKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmdldEZvcm1EYXRhKGltYWdlVXJpKS50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlcyk7XHJcbiAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfSwgY2FtZXJhT3B0aW9ucyk7XHJcbiAgICAgIH0sIGZhbHNlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNjYW5QaWN0dXJlKHNjYW5PcHRpb25zKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VyZWFkeScsICgpID0+IHtcclxuICAgICAgICBpZihzY2FuT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc291cmNlVHlwZScpICYmIHNjYW5PcHRpb25zLmhhc093blByb3BlcnR5KCdkb1VwbG9hZCcpKSB7XHJcbiAgICAgICAgICBzY2FuLnNjYW5Eb2Moc2Nhbk9wdGlvbnMuc291cmNlVHlwZSwgKGltYWdlVXJpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzY2FuT3B0aW9ucy5kb1VwbG9hZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRGb3JtRGF0YShpbWFnZVVyaSkudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXMpO1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoaW1hZ2VVcmkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdzb3VyY2VUeXBlIG5vdCBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuLy9CYXJjb2RlXHJcbiAgcHVibGljIGdldEJhcmNvZGUoYmFyY29kZU9wdGlvbnMpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZXJlYWR5JywgKCkgPT4ge1xyXG4gICAgICAgIGNvcmRvdmEucGx1Z2lucy5iYXJjb2RlU2Nhbm5lci5zY2FuKChyZXN1bHQpPT4ge1xyXG4gICAgICAgICAgaWYocmVzdWx0LmNhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KHJlc3VsdCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIChlcnJvcik9PiB7XHJcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9LCBiYXJjb2RlT3B0aW9ucyk7XHJcbiAgICAgIH0sIGZhbHNlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbi8vVmlkZW9cclxuICBwdWJsaWMgZ2V0VmlkZW8odmlkZW9PcHRpb25zKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VyZWFkeScsICgpID0+IHtcclxuICAgICAgICBuYXZpZ2F0b3IuZGV2aWNlLmNhcHR1cmUuY2FwdHVyZVZpZGVvKChtZWRpYUZpbGVzKSA9PiB7XHJcbiAgICAgICAgICB2YXIgaW1hZ2VVcmkgPSBtZWRpYUZpbGVzWzBdLmZ1bGxQYXRoOyAgICAgICAgXHJcbiAgICAgICAgICB0aGlzLmdldEZvcm1EYXRhKGltYWdlVXJpKS50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlcyk7XHJcbiAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfSwge30pO1xyXG4gICAgICB9LCBmYWxzZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4vL3R0c1xyXG4gIHB1YmxpYyBnZXRUdHModHRzT3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlcmVhZHknLCAoKSA9PiB7XHJcbiAgICAgICAgaWYodHRzT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpKSB7XHJcbiAgICAgICAgICBUVFMuc3BlYWsodHRzT3B0aW9ucykudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCdzdWNjZXNzJyk7XHJcbiAgICAgICAgICB9LCAocmVhc29uKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWplY3QocmVhc29uKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ3RleHQgbm90IGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCBmYWxzZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4vL3NoYWtlXHJcbiAgcHVibGljIGdldFNoYWtlKHNoYWtlT3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlcmVhZHknLCAoKSA9PiB7XHJcbiAgICAgICAgaWYoc2hha2VPcHRpb25zLmhhc093blByb3BlcnR5KCdzdGFydCcpICYmIHNoYWtlT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc2Vuc2l0aXZpdHknKSkge1xyXG4gICAgICAgICAgaWYoc2hha2VPcHRpb25zLnN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHNoYWtlLnN0YXJ0V2F0Y2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCdzdWNjZXNzJyk7XHJcbiAgICAgICAgICAgIH0sIHNoYWtlT3B0aW9ucy5zZW5zaXRpdml0eSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ2Vycm9yJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2hha2Uuc3RvcFdhdGNoKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnc3RhcnQgb3Igc2Vuc2l0aXZpdHkgbm90IGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCBmYWxzZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4vL29jclxyXG4gIHB1YmxpYyBnZXRPY3Iob2NyT3B0aW9ucykge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZXJlYWR5JywgKCkgPT4ge1xyXG4gICAgICAgICAgaWYob2NyT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndXJpT3JCYXNlJykgJiYgb2NyT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgncmV0dXJuVHlwZScpKSB7XHJcbiAgICAgICAgICAgIG5hdmlnYXRvci5jYW1lcmEuZ2V0UGljdHVyZSgoaW1hZ2VEYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0b2NyLnJlY1RleHQob2NyT3B0aW9ucy51cmlPckJhc2UsIG9jck9wdGlvbnMucmV0dXJuVHlwZSwgaW1hZ2VEYXRhLCAocmVjb2duaXplZFRleHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlY29nbml6ZWRUZXh0KTtcclxuICAgICAgICAgICAgICB9LCAobWVzc2FnZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChtZXNzYWdlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgKG1lc3NhZ2UpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9LCBvY3JPcHRpb25zKTsgXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZWplY3QoJ3VyaU9yQmFzZSBvciByZXR1cm5UeXBlIG5vdCBmb3VuZCcpO1xyXG4gICAgICAgICAgfVxyXG4gXHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbi8vZmluZ2VycHJpbnRcclxuICBwdWJsaWMgZ2V0RmluZ2VycHJpbnQoZmluZ2VycHJpbnRPcHRpb25zKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VyZWFkeScsICgpID0+IHtcclxuICAgICAgICBpZihmaW5nZXJwcmludE9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2NsaWVudElkJykgJiYgZmluZ2VycHJpbnRPcHRpb25zLmhhc093blByb3BlcnR5KCdjbGllbnRTZWNyZXQnKSkge1xyXG4gICAgICAgICAgRmluZ2VycHJpbnQuaXNBdmFpbGFibGUoKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICBGaW5nZXJwcmludC5zaG93KGZpbmdlcnByaW50T3B0aW9ucywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCdzdWNjZXNzJyk7XHJcbiAgICAgICAgICAgIH0sIChlcnIpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSwgKG1lc3NhZ2UpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChtZXNzYWdlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ2NsaWVudElkIG9yIGNsaWVudFNlY3JldCBub3QgZm91bmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIGZhbHNlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwbG9hZChvcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGxldCBib2R5OiBGb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICBpZiAob3B0aW9ucy5mb3JtRGF0YSkge1xyXG4gICAgICAgIGJvZHkgPSBvcHRpb25zLmZvcm1EYXRhO1xyXG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZmlsZXMpIHtcclxuICAgICAgICBib2R5LmFwcGVuZCgnZmlsZScsIG9wdGlvbnMuZmlsZXMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlamVjdCgnTm8gZmlsZSBzZWxlY3RlZCEnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAob3B0aW9ucy5tZXRhZGF0YSkge1xyXG4gICAgICAgIGJvZHkuYXBwZW5kKCdtZXRhZGF0YScsIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMubWV0YWRhdGEpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgaGVhZGVycyA9IHsgJ0NvbnRlbnQtVHlwZSc6ICduby1jb250ZW50JyB9O1xyXG4gICAgICBjb25zdCB1cmwgPSB0aGlzLnN5c3RlbVNlcnZpY2UuZ2V0RmlsZUlPVXJsKCkgKyBgJHtvcHRpb25zLmVudGl0eU5hbWV9YDtcclxuICAgICAgbGV0IHRlbXBfaGVhZGVycyA9IHsgaGVhZGVyczogdGhpcy5zZXRIZWFkZXJzKGhlYWRlcnMpIH1cclxuICAgICAgdGhpcy5odHRwLnBvc3QodXJsLCBib2R5LCB0ZW1wX2hlYWRlcnMpXHJcbiAgICAgICAgLnN1YnNjcmliZShyZXMgPT4gcmVzb2x2ZShyZXMpXHJcbiAgICAgICAgLCBlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZG93bmxvYWQob3B0aW9uczogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGlmIChvcHRpb25zLmVudGl0eU5hbWUgJiYgKG9wdGlvbnMubWV0YWRhdGEgfHwgb3B0aW9ucy5maWxlSWQpKSB7XHJcbiAgICAgICAgdGhpcy5nZXRGaWxlSW5mbyhvcHRpb25zKS5zdWJzY3JpYmUoKHJlcykgPT4ge1xyXG4gICAgICAgICAgaWYgKG9wdGlvbnMubWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgcmVzID0gcmVzW3Jlcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcyA9IHJlcy5yZXN1bHQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBmaWxlSW5mbyA9IHtcclxuICAgICAgICAgICAgY29udGVudFR5cGU6ICcnLFxyXG4gICAgICAgICAgICBmaWxlbmFtZTogJydcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBpZiAocmVzICYmIHJlc1snY29udGVudFR5cGUnXSAmJiByZXNbJ2ZpbGVuYW1lJ10pIHtcclxuICAgICAgICAgICAgZmlsZUluZm9bJ2NvbnRlbnRUeXBlJ10gPSByZXNbJ2NvbnRlbnRUeXBlJ107XHJcbiAgICAgICAgICAgIGZpbGVJbmZvWydmaWxlbmFtZSddID0gcmVzWydmaWxlbmFtZSddO1xyXG4gICAgICAgICAgICBsZXQgZmlsZUlPVVJMID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldEZpbGVJT1VybCgpO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5tZXRhZGF0YSkge1xyXG4gICAgICAgICAgICAgIGZpbGVJT1VSTCArPSBgJHtvcHRpb25zLmVudGl0eU5hbWV9P21ldGFkYXRhRmlsdGVyPXtcIm1ldGFkYXRhLmtleVwiOiBcIiR7b3B0aW9ucy5tZXRhZGF0YS5rZXl9XCJ9YDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBmaWxlSU9VUkwgKz0gYCR7b3B0aW9ucy5lbnRpdHlOYW1lfS8ke29wdGlvbnMuZmlsZUlkfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcclxuICAgICAgICAgICAgICAnQWNjZXB0JzogZmlsZUluZm8uY29udGVudFR5cGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5odHRwLmdldChmaWxlSU9VUkwsIHsgaGVhZGVyczogdGhpcy5zZXRIZWFkZXJzKGhlYWRlcnMpLCByZXNwb25zZVR5cGU6ICdibG9iJyB9KS5zdWJzY3JpYmUoKHJlc3BvbnNlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW3Jlc3BvbnNlLmJvZHldLCB7IHR5cGU6IGZpbGVJbmZvLmNvbnRlbnRUeXBlIH0pO1xyXG4gICAgICAgICAgICAgIHRoaXMuc2F2ZUZpbGUoYmxvYiwgZmlsZUluZm8uZmlsZW5hbWUpLnRoZW4oKHJlc3ApID0+IHtcclxuICAgICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgICAgICAgICB9LCBlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KCdmaWxlSW5mbyBub3QgZXhpdCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIGVyciA9PiByZWplY3QoZXJyKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHJlamVjdCgnZG93bmxvYWQgb3B0aW9ucyBub3QgZm91bmQnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2F2ZUZpbGUoZGF0YTogQmxvYiwgZmlsZW5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5zeXN0ZW1TZXJ2aWNlLmNoZWNrRGV2aWNlKCkgPT0gJ21vYmlsZScpIHtcclxuICAgICAgICBjb25zdCBzdG9yYWdlTG9jYXRpb24gPSB0aGlzLnN5c3RlbVNlcnZpY2UuaXNBbmRyb2lkKCkgPyBjb3Jkb3ZhLmZpbGUuZXh0ZXJuYWxSb290RGlyZWN0b3J5IDogY29yZG92YS5maWxlLmRvY3VtZW50c0RpcmVjdG9yeTtcclxuICAgICAgICB0aGlzLmNyZWF0ZURpcmVjdG9yeShzdG9yYWdlTG9jYXRpb24sIHRoaXMuYXBwUHJvcGVydGllcy5hcHBOYW1lLCBmaWxlbmFtZSwgZGF0YSlcclxuICAgICAgICAgIC50aGVuKHJlcyA9PiByZXNvbHZlKHJlcykpXHJcbiAgICAgICAgICAuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnNhdmVUb0Jyb3dzZXIoZGF0YSwgZmlsZW5hbWUpLnRoZW4ocmVzID0+IHJlc29sdmUocmVzKSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzYXZlVG9Ccm93c2VyKGRhdGE6IEJsb2IsIGZpbGVOYW1lOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAvLyBFZGdlIDIwK1xyXG4gICAgICBjb25zdCBpc0VkZ2UgPSAhKC8qQGNjX29uIUAqL2ZhbHNlIHx8ICEhZG9jdW1lbnRbJ2RvY3VtZW50TW9kZSddKSAmJiAhIXdpbmRvdy5TdHlsZU1lZGlhO1xyXG4gICAgICBpZiAoaXNFZGdlKSB7XHJcbiAgICAgICAgd2luZG93Lm5hdmlnYXRvci5tc1NhdmVCbG9iKGRhdGEsIGZpbGVOYW1lKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBkb3dubG9hZFVSTCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGRhdGEpO1xyXG4gICAgICAgIGNvbnN0IGFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFuY2hvcik7XHJcbiAgICAgICAgYW5jaG9yLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgYW5jaG9yLmRvd25sb2FkID0gZmlsZU5hbWU7XHJcbiAgICAgICAgYW5jaG9yLmhyZWYgPSBkb3dubG9hZFVSTDtcclxuICAgICAgICBhbmNob3IuY2xpY2soKTtcclxuICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTChkb3dubG9hZFVSTCk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhbmNob3IpO1xyXG4gICAgICAgIGFuY2hvci5yZW1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmVzb2x2ZSgnZG93bmxvYWQgY29tcGxldGUnKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVEaXJlY3Rvcnkocm9vdERpcmVjdG9yeTogYW55LCBhcHBOYW1lOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcsIGRhdGE6IEJsb2IpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHdpbmRvdy5yZXNvbHZlTG9jYWxGaWxlU3lzdGVtVVJMKHJvb3REaXJlY3RvcnksIChmaWxlU3lzdGVtKSA9PiB7XHJcbiAgICAgICAgZmlsZVN5c3RlbS5nZXREaXJlY3RvcnkoYXBwTmFtZSwgeyBjcmVhdGU6IHRydWUgfSwgKGRpckVudHJ5KSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmNoZWNrRmlsZUV4aXN0KGRpckVudHJ5Lm5hdGl2ZVVSTCwgZmlsZU5hbWUsIDAsIChuZXdGaWxlTmFtZSkgPT4ge1xyXG4gICAgICAgICAgICBkaXJFbnRyeS5nZXRGaWxlKG5ld0ZpbGVOYW1lLCB7IGNyZWF0ZTogdHJ1ZSB9LCAodGFyZ2V0RmlsZSkgPT4ge1xyXG4gICAgICAgICAgICAgIHRhcmdldEZpbGUuY3JlYXRlV3JpdGVyKChmaWxlV3JpdGVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBmaWxlV3JpdGVyLm9ud3JpdGVlbmQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRhcmdldEZpbGUudG9VUkwoKSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGZpbGVXcml0ZXIub25lcnJvciA9IChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGZpbGVXcml0ZXIud3JpdGUoZGF0YSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgZXJyID0+IHJlamVjdChlcnIpKTtcclxuICAgICAgfSwgZXJyID0+IHJlamVjdChlcnIpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGVja0ZpbGVFeGlzdCA9IChwYXRoOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcsIGk6IG51bWJlciwgY2FsbGJhY2spID0+IHtcclxuICAgIHJldHVybiB3aW5kb3cucmVzb2x2ZUxvY2FsRmlsZVN5c3RlbVVSTChwYXRoICsgZmlsZU5hbWUsICgpID0+IHtcclxuICAgICAgbGV0IGxlbmd0aCA9IDQ7XHJcbiAgICAgIGlmIChmaWxlTmFtZS5sYXN0SW5kZXhPZignKCcpID4gLTEpIHtcclxuICAgICAgICBjb25zdCBpc0V4aXN0ID0gcGFyc2VJbnQoZmlsZU5hbWUuc2xpY2UoKGZpbGVOYW1lLmxhc3RJbmRleE9mKCcoJykgKyAxKSwgZmlsZU5hbWUubGFzdEluZGV4T2YoJyknKSksIDEwKTtcclxuICAgICAgICBpZiAoIWlzTmFOKGlzRXhpc3QpKSB7XHJcbiAgICAgICAgICBpID0gaXNFeGlzdCArIDE7XHJcbiAgICAgICAgICBpZiAoaSA+IDEwICYmIGkgPCAxMDApIHtcclxuICAgICAgICAgICAgbGVuZ3RoICs9IDE7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGkgPiAxMDApIHtcclxuICAgICAgICAgICAgbGVuZ3RoICs9IDI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBmaWxlTmFtZSA9IGZpbGVOYW1lLnNsaWNlKDAsIChmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpIC0gbGVuZ3RoKSkgKyAnICgnICsgaSArICcpJyArIGZpbGVOYW1lLnNsaWNlKGZpbGVOYW1lLmxhc3RJbmRleE9mKCcuJykpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpICs9IDE7XHJcbiAgICAgICAgICBmaWxlTmFtZSA9IGZpbGVOYW1lLnNsaWNlKDAsIChmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpKSkgKyBmaWxlTmFtZS5zbGljZShmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpKTtcclxuICAgICAgICAgIGZpbGVOYW1lID0gZmlsZU5hbWUuc2xpY2UoMCwgKGZpbGVOYW1lLmxhc3RJbmRleE9mKCcuJykpKSArICcgKCcgKyBpICsgJyknICsgZmlsZU5hbWUuc2xpY2UoZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGkgKz0gMTtcclxuICAgICAgICBmaWxlTmFtZSA9IGZpbGVOYW1lLnNsaWNlKDAsIChmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpKSkgKyBmaWxlTmFtZS5zbGljZShmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpKTtcclxuICAgICAgICBmaWxlTmFtZSA9IGZpbGVOYW1lLnNsaWNlKDAsIChmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpKSkgKyAnICgnICsgaSArICcpJyArIGZpbGVOYW1lLnNsaWNlKGZpbGVOYW1lLmxhc3RJbmRleE9mKCcuJykpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzLmNoZWNrRmlsZUV4aXN0KHBhdGgsIGZpbGVOYW1lLCBpLCBjYWxsYmFjayk7XHJcbiAgICB9LCAoKSA9PiB7XHJcbiAgICAgIHJldHVybiBjYWxsYmFjayhmaWxlTmFtZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0SGVhZGVycyhoZWFkZXJKU09OOiBPYmplY3QpOiBIdHRwSGVhZGVycyB7XHJcbiAgICBsZXQgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gaGVhZGVySlNPTikge1xyXG4gICAgICBpZiAoa2V5KSB7XHJcbiAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KGtleSwgaGVhZGVySlNPTltrZXldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhlYWRlcnM7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=