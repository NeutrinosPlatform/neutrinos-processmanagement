import { __decorate } from "tslib";
// import { MatSnackBar } from '@angular/material';
import { Component, Input, EventEmitter, Output } from '@angular/core';
let NToggleoptionsComponent = class NToggleoptionsComponent {
    constructor() {
        // options = {icon: 'home', value: 'home', disabled: false, 'checked': false}
        this.toggleOptions = [];
        this.align = 'horizontal';
        this.indexChange = new EventEmitter();
        this.valueChange = new EventEmitter();
    }
    // constructor(private snackbar: MatSnackBar) {
    // }
    ngOnInit() {
        if (this.checkNumber(this.checkedIndex)) {
            this.checkedIndex = Number(this.checkedIndex);
        }
        if (this.checkNumber(this.disabledIndex)) {
            this.disabledIndex = Number(this.disabledIndex);
        }
    }
    ngOnChanges(changes) {
        if (changes['checkedIndex'] && this.checkNumber(this.checkedIndex)) {
            this.checkedIndex = Number(this.checkedIndex);
        }
        else if (changes['disabledIndex'] && this.checkNumber(this.disabledIndex)) {
            this.disabledIndex = Number(this.disabledIndex);
        }
    }
    optionClicked(index) {
        if (this.toggleOptions && this.toggleOptions.length > 0) {
            this.indexChange.emit(index);
            if (this.toggleOptions[index] && this.toggleOptions[index].value) {
                this.valueChange.emit(this.toggleOptions[index].value);
            }
            else {
                // this.snackbar.open('Invalid toggle button value', 'OK');
            }
        }
        else {
            // this.snackbar.open('Invalid toggle options', 'OK');
        }
    }
    checkNumber(number) {
        if (number !== undefined && number !== null) {
            return Number.isNaN(Number(number));
        }
        return false;
    }
};
__decorate([
    Input('toggleOptions')
], NToggleoptionsComponent.prototype, "toggleOptions", void 0);
__decorate([
    Input('align')
], NToggleoptionsComponent.prototype, "align", void 0);
__decorate([
    Input('disabledIndex')
], NToggleoptionsComponent.prototype, "disabledIndex", void 0);
__decorate([
    Input('checkedIndex')
], NToggleoptionsComponent.prototype, "checkedIndex", void 0);
__decorate([
    Input('value')
], NToggleoptionsComponent.prototype, "value", void 0);
__decorate([
    Output()
], NToggleoptionsComponent.prototype, "indexChange", void 0);
__decorate([
    Output()
], NToggleoptionsComponent.prototype, "valueChange", void 0);
NToggleoptionsComponent = __decorate([
    Component({
        selector: 'n-toggleoptions',
        template: "<mat-button-toggle-group #group=\"matButtonToggleGroup\" [vertical]=\"align == 'vertical'? true: false\" [value]=\"value\">\r\n    <mat-button-toggle *ngFor=\"let option of toggleOptions; let i = index;\" [value]=\"option.value\" [disabled]=\"option.disabled || disabledIndex == i\" [checked]=\"option.checked || checkedIndex == i\" (click)=\"optionClicked(i)\" fxLayoutAlign=\"center center\">\r\n        <mat-icon *ngIf=\"option.icon\">{{option.icon}}</mat-icon>\r\n        <span *ngIf=\"!option.icon && option.value\">{{option.value}}</span>\r\n    </mat-button-toggle>\r\n</mat-button-toggle-group>"
    })
], NToggleoptionsComponent);
export { NToggleoptionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi10b2dnbGVvcHRpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1tb2R1bGUvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1tb2R1bGUvbmV1dHJpbm9zLWNvbXBvbmVudHMvblRvZ2dsZW9wdGlvbnNDb21wb25lbnQvbi10b2dnbGVvcHRpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsbURBQW1EO0FBQ25ELE9BQU8sRUFBRSxTQUFTLEVBQW9DLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBT3hHLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBQXBDO1FBQ0ksNkVBQTZFO1FBQ3JELGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBQzNCLFVBQUssR0FBRyxZQUFZLENBQUM7UUFJM0IsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2pDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQTBDL0MsQ0FBQztJQXpDRywrQ0FBK0M7SUFDL0MsSUFBSTtJQUVKLFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNqRDtRQUVELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ25EO0lBRUwsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNoRSxJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakQ7YUFBTSxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN6RSxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkQ7SUFDTCxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQUs7UUFDZixJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRTtnQkFDOUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMxRDtpQkFBTTtnQkFDSCwyREFBMkQ7YUFDOUQ7U0FDSjthQUFNO1lBQ0gsc0RBQXNEO1NBQ3pEO0lBQ0wsQ0FBQztJQUVPLFdBQVcsQ0FBQyxNQUFNO1FBQ3RCLElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ3pDLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUN2QztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Q0FDSixDQUFBO0FBaEQyQjtJQUF2QixLQUFLLENBQUMsZUFBZSxDQUFDOzhEQUFvQjtBQUMzQjtJQUFmLEtBQUssQ0FBQyxPQUFPLENBQUM7c0RBQXNCO0FBQ2I7SUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQzs4REFBZTtBQUNmO0lBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7NkRBQWM7QUFDcEI7SUFBZixLQUFLLENBQUMsT0FBTyxDQUFDO3NEQUFnQjtBQUNyQjtJQUFULE1BQU0sRUFBRTs0REFBa0M7QUFDakM7SUFBVCxNQUFNLEVBQUU7NERBQWtDO0FBUmxDLHVCQUF1QjtJQUxuQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsaUJBQWlCO1FBQzNCLHNtQkFBOEM7S0FDakQsQ0FBQztHQUVXLHVCQUF1QixDQWtEbkM7U0FsRFksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHsgTWF0U25hY2tCYXIgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XHJcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIElucHV0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnbi10b2dnbGVvcHRpb25zJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9uLXRvZ2dsZW9wdGlvbnMudGVtcGxhdGUuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBOVG9nZ2xlb3B0aW9uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICAgIC8vIG9wdGlvbnMgPSB7aWNvbjogJ2hvbWUnLCB2YWx1ZTogJ2hvbWUnLCBkaXNhYmxlZDogZmFsc2UsICdjaGVja2VkJzogZmFsc2V9XHJcbiAgICBASW5wdXQoJ3RvZ2dsZU9wdGlvbnMnKSB0b2dnbGVPcHRpb25zID0gW107XHJcbiAgICBASW5wdXQoJ2FsaWduJykgYWxpZ24gPSAnaG9yaXpvbnRhbCc7XHJcbiAgICBASW5wdXQoJ2Rpc2FibGVkSW5kZXgnKSBkaXNhYmxlZEluZGV4O1xyXG4gICAgQElucHV0KCdjaGVja2VkSW5kZXgnKSBjaGVja2VkSW5kZXg7XHJcbiAgICBASW5wdXQoJ3ZhbHVlJykgdmFsdWUgOiBzdHJpbmc7XHJcbiAgICBAT3V0cHV0KCkgaW5kZXhDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgdmFsdWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAvLyBjb25zdHJ1Y3Rvcihwcml2YXRlIHNuYWNrYmFyOiBNYXRTbmFja0Jhcikge1xyXG4gICAgLy8gfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrTnVtYmVyKHRoaXMuY2hlY2tlZEluZGV4KSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrZWRJbmRleCA9IE51bWJlcih0aGlzLmNoZWNrZWRJbmRleCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jaGVja051bWJlcih0aGlzLmRpc2FibGVkSW5kZXgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWRJbmRleCA9IE51bWJlcih0aGlzLmRpc2FibGVkSW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgICAgIGlmIChjaGFuZ2VzWydjaGVja2VkSW5kZXgnXSAmJiB0aGlzLmNoZWNrTnVtYmVyKHRoaXMuY2hlY2tlZEluZGV4KSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrZWRJbmRleCA9IE51bWJlcih0aGlzLmNoZWNrZWRJbmRleCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjaGFuZ2VzWydkaXNhYmxlZEluZGV4J10gJiYgdGhpcy5jaGVja051bWJlcih0aGlzLmRpc2FibGVkSW5kZXgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWRJbmRleCA9IE51bWJlcih0aGlzLmRpc2FibGVkSW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvcHRpb25DbGlja2VkKGluZGV4KSB7XHJcbiAgICAgICAgaWYgKHRoaXMudG9nZ2xlT3B0aW9ucyAmJiB0aGlzLnRvZ2dsZU9wdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4Q2hhbmdlLmVtaXQoaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy50b2dnbGVPcHRpb25zW2luZGV4XSAmJiB0aGlzLnRvZ2dsZU9wdGlvbnNbaW5kZXhdLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodGhpcy50b2dnbGVPcHRpb25zW2luZGV4XS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnNuYWNrYmFyLm9wZW4oJ0ludmFsaWQgdG9nZ2xlIGJ1dHRvbiB2YWx1ZScsICdPSycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5zbmFja2Jhci5vcGVuKCdJbnZhbGlkIHRvZ2dsZSBvcHRpb25zJywgJ09LJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tOdW1iZXIobnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKG51bWJlciAhPT0gdW5kZWZpbmVkICYmIG51bWJlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLmlzTmFOKE51bWJlcihudW1iZXIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==