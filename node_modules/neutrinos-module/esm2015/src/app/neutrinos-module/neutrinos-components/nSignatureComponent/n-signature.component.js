import { __decorate } from "tslib";
/*DEFAULT GENERATED TEMPLATE. DO NOT CHANGE SELECTOR TEMPLATE_URL AND CLASS NAME*/
import { Component, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import * as signing from 'signature_pad';
// import { MatSnackBar } from '@angular/material';
/**
* Model import Example :
* import { HERO } from '../models/hero.model';
*/
/**
 * Service import Example :
 * import { HeroService } from '../services/hero/hero.service';
 */
let NSignatureComponent = class NSignatureComponent {
    constructor() {
        this.imageDataValue = '';
        this.signaturePad = '';
        this.mode = 'responsive'; // 'click-fullscreen' or 'responsive'
        this.canvasMode = 'responsive'; // 'responsive' or 'fullscreen'
        this.imageDataChange = new EventEmitter();
    }
    get imageData() {
        return this.imageDataValue;
    }
    set imageData(val) {
        this.imageDataValue = val;
        if (val || val === '' || this.isDataURL(val)) {
            this.saveCavas(val);
        }
        this.imageDataChange.emit(this.imageDataValue);
    }
    ngAfterViewInit() {
        if (this.mode === 'responsive') {
            this.createCanvas();
        }
    }
    createCanvas() {
        this.fitToContainer(this.signaturecanvas.nativeElement);
        this.signaturePad = new signing.default(this.signaturecanvas.nativeElement, this.assignOptions());
    }
    saveCavas(dataUrl) {
        if (this.signaturePad) {
            if (this.signaturePad.isEmpty() || dataUrl === '') {
                this.savedData = '';
                this.signaturePad.clear();
            }
            else if (this.isDataURL(dataUrl)) {
                this.signaturePad.fromDataURL(dataUrl);
                this.savedData = this.signaturePad.toData();
            }
            else {
                this.imageData = this.signaturePad.toDataURL();
                if (this.mode === 'click-fullscreen') {
                    this.savedData = this.signaturePad.toData();
                    this.hideCanvas();
                }
            }
        }
    }
    clearCanvas() {
        this.signaturePad.clear();
        // this.fitToContainer(this.signaturecanvas.nativeElement);
    }
    undoCanvas() {
        const data = this.signaturePad.toData();
        if (data) {
            data.pop(); // remove the last dot or line
            this.signaturePad.fromData(data);
        }
    }
    showCanvas() {
        this.classAbs = true;
        this.canvasMode = 'fullscreen';
        if (!this.signaturePad) {
            this.createCanvas();
        }
        this.fitToContainer(this.signaturecanvas.nativeElement, document.body.clientHeight, document.body.clientWidth);
        this.clearCanvas();
        this.createCanvasFromData();
    }
    hideCanvas() {
        this.canvasMode = 'responsive';
    }
    // cancel currently drawn
    cancel() {
        this.savedData = Object.assign([], this.previousSavedData);
    }
    createCanvasFromData() {
        if (this.savedData) {
            this.previousSavedData = Object.assign({}, this.savedData);
            this.signaturePad.fromData(this.savedData);
        }
    }
    fitToContainer(element, height, width) {
        element.style.width = '100%';
        element.style.height = 'calc(100% - 56px)';
        if (height && width) {
            element.width = width;
            element.height = height - 56;
        }
        else {
            element.width = element.offsetWidth;
            element.height = element.offsetHeight;
        }
    }
    assignOptions() {
        let options = {};
        options['backgroundColor'] = this.checkIfValidValueAndRGB(this.backgroundColor, 'backgroundColor');
        options['dotSize'] = this.checkIfValidValueAndNumber(this.dotSize, 'dotSize');
        options['minWidth'] = this.checkIfValidValueAndNumber(this.minWidth, 'minWidth');
        options['maxWidth'] = this.checkIfValidValueAndNumber(this.maxWidth, 'maxWidth');
        options['throttle'] = this.checkIfValidValueAndNumber(this.throttle, 'throttle');
        options['minDistance'] = this.checkIfValidValueAndNumber(this.minDistance, 'minDistance');
        options['penColor'] = this.checkIfValidValueAndRGB(this.penColor, 'penColor');
        options['velocityFilterWeight'] = this.checkIfValidValueAndNumber(this.velocityFilterWeight, 'velocityFilterWeight');
        options = JSON.parse(JSON.stringify(options)); // removing all undefined fields
        options['onBegin'] = this.checkIfValidValueAndFunction(this.onBegin, 'onBegin');
        options['onEnd'] = this.checkIfValidValueAndFunction(this.onEnd, 'onEnd');
        return options;
    }
    checkIfValidValueAndNumber(num, name) {
        if (this.checkIfValid(num) && this.checkNumber(num)) {
            return num;
        }
        this.invalidToast(name, 'num');
        return undefined;
    }
    checkIfValidValueAndRGB(color, name) {
        if (this.checkIfValid(color) && this.checkRGB(color)) {
            return color;
        }
        this.invalidToast(name, 'rgb');
        return undefined;
    }
    checkIfValidValueAndFunction(fn, name) {
        if (this.checkIfValid(fn) && this.checkIfValidFunction(fn)) {
            return fn;
        }
        this.invalidToast(name, 'function format');
        return undefined;
    }
    checkIfValid(value) {
        return (value !== undefined && value !== null) ? value : undefined;
    }
    checkNumber(num) {
        return !this.checkIsNan(Number(num)) ? Number(num) : undefined;
    }
    checkIfValidFunction(fn) {
        return typeof fn === 'function' ? fn : undefined;
    }
    checkRGB(color) {
        const matchColors1 = new RegExp(/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/);
        const matchColors2 = new RegExp(/rgb\((\d{1,3}),[ \t]+(\d{1,3}),(\d{1,3})\)/);
        const matchColors3 = new RegExp(/rgb\((\d{1,3}),(\d{1,3}),[ \t]+(\d{1,3})\)/);
        return matchColors1.test(color) || matchColors2.test(color) || matchColors3.test(color);
    }
    checkIsNan(value) {
        return Number.isNaN(value);
    }
    invalidToast(optionName, optionType) {
        switch (optionType) {
            case 'num':
                // this.snackbar.open(`Invalid ${optionName} (number or float) given, taking default value instead.`, 'OK');
                break;
            case 'rgb':
                // this.snackbar.open(`Invalid ${optionName} format Eg: rgb(255, 255, 255)  given, taking default value instead.`, 'OK');
                break;
        }
        return;
    }
    isDataURL(s) {
        if (s) {
            const regex = /^\s*data:([a-z]+\/[a-z]+(;[a-z\-]+\=[a-z\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i;
            return !!s.match(regex);
        }
        else {
            return false;
        }
    }
};
__decorate([
    ViewChild('signaturecanvas', { static: false })
], NSignatureComponent.prototype, "signaturecanvas", void 0);
__decorate([
    ViewChild('canvasparent', { static: false })
], NSignatureComponent.prototype, "canvasparent", void 0);
__decorate([
    Input('backgroundColor')
], NSignatureComponent.prototype, "backgroundColor", void 0);
__decorate([
    Input('dotSize')
], NSignatureComponent.prototype, "dotSize", void 0);
__decorate([
    Input('minWidth')
], NSignatureComponent.prototype, "minWidth", void 0);
__decorate([
    Input('maxWidth')
], NSignatureComponent.prototype, "maxWidth", void 0);
__decorate([
    Input('throttle')
], NSignatureComponent.prototype, "throttle", void 0);
__decorate([
    Input('minDistance')
], NSignatureComponent.prototype, "minDistance", void 0);
__decorate([
    Input('penColor')
], NSignatureComponent.prototype, "penColor", void 0);
__decorate([
    Input('velocityFilterWeight')
], NSignatureComponent.prototype, "velocityFilterWeight", void 0);
__decorate([
    Input('onBegin')
], NSignatureComponent.prototype, "onBegin", void 0);
__decorate([
    Input('onEnd')
], NSignatureComponent.prototype, "onEnd", void 0);
__decorate([
    Input('mode')
], NSignatureComponent.prototype, "mode", void 0);
__decorate([
    Output()
], NSignatureComponent.prototype, "imageDataChange", void 0);
__decorate([
    Input()
], NSignatureComponent.prototype, "imageData", null);
NSignatureComponent = __decorate([
    Component({
        selector: 'n-signature',
        template: "<div fxFill fxLayout=\"row\" *ngIf=\"mode == 'click-fullscreen' && canvasMode !== 'fullscreen'\" class=\"signature-component-border\">\r\n    <div fxFlex=\"calc(100%-56px)\" fxLayout=\"column\">\r\n        <img *ngIf=\"imageDataValue\" [src]=\"imageDataValue\" fxFill/>\r\n    </div>\r\n    <div fxFlex=\"56px\" fxLayoutAlign=\" center\" class=\"signature-component-border\">\r\n        <button mat-icon-button (click)=\"showCanvas()\">\r\n            <mat-icon>mode_edit</mat-icon>\r\n        </button>\r\n    </div>\r\n</div>\r\n<div fxFill fxLayout=\"column\" class=\"signature-component-border\" [fxShow]=\"(mode == 'click-fullscreen' && canvasMode == 'fullscreen') || mode == 'responsive'\" [ngClass]=\"{'signature-canvas-fullscreen': classAbs}\">\r\n    <canvas #signaturecanvas></canvas>\r\n    <div fxFlex=\"56px\" fxLayoutAlign=\"center center\" class=\"signature-component-border\">\r\n        <button mat-icon-button (click)=\"undoCanvas()\">\r\n            <mat-icon>undo</mat-icon>\r\n        </button>\r\n        <button mat-icon-button (click)=\"clearCanvas()\">\r\n            <mat-icon>loop</mat-icon>\r\n        </button>\r\n        <button mat-icon-button (click)=\"saveCavas()\">\r\n            <mat-icon>save</mat-icon>\r\n        </button>\r\n        <button mat-icon-button (click)=\"canvasMode = 'responsive'; cancel()\">\r\n            <mat-icon>clear</mat-icon>\r\n        </button>\r\n    </div>\r\n</div>",
        styles: [`
     :host { height: 100% !important; }
     .signature-canvas-fullscreen {
         position: absolute;
         top: 0;
         bottom: 0;
         right: 0;
         left: 0;
     }
     .signature-component-border {
         border: 2px solid black;
     }
    `]
    })
], NSignatureComponent);
export { NSignatureComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zaWduYXR1cmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLW1vZHVsZS8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbmV1dHJpbm9zLW1vZHVsZS9uZXV0cmlub3MtY29tcG9uZW50cy9uU2lnbmF0dXJlQ29tcG9uZW50L24tc2lnbmF0dXJlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsa0ZBQWtGO0FBQ2xGLE9BQU8sRUFBRSxTQUFTLEVBQWlCLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEtBQUssT0FBTyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxtREFBbUQ7QUFDbkQ7OztFQUdFO0FBRUY7OztHQUdHO0FBb0JILElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0lBQWhDO1FBRUksbUJBQWMsR0FBRyxFQUFFLENBQUM7UUFDWixpQkFBWSxHQUFRLEVBQUUsQ0FBQztRQWVoQixTQUFJLEdBQUcsWUFBWSxDQUFDLENBQUMscUNBQXFDO1FBQ3pFLGVBQVUsR0FBRyxZQUFZLENBQUMsQ0FBQywrQkFBK0I7UUFLaEQsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBcUxuRCxDQUFDO0lBbkxHLElBQUksU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBSSxTQUFTLENBQUMsR0FBRztRQUNiLElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDO1FBQzFCLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMxQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFD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QUFLLENBQUMsVUFBVSxDQUFDO3FEQUFVO0FBQ047SUFBckIsS0FBSyxDQUFDLGFBQWEsQ0FBQzt3REFBYTtBQUNmO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7cURBQVU7QUFDRztJQUE5QixLQUFLLENBQUMsc0JBQXNCLENBQUM7aUVBQXNCO0FBQ2xDO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7b0RBQVM7QUFDVjtJQUFmLEtBQUssQ0FBQyxPQUFPLENBQUM7a0RBQU87QUFDUDtJQUFkLEtBQUssQ0FBQyxNQUFNLENBQUM7aURBQXFCO0FBTXpCO0lBQVQsTUFBTSxFQUFFOzREQUFzQztBQUUvQztJQURDLEtBQUssRUFBRTtvREFHUDtBQTVCUSxtQkFBbUI7SUFsQi9CLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxhQUFhO1FBQ3ZCLG82Q0FBMEM7aUJBQ2pDOzs7Ozs7Ozs7Ozs7S0FZUjtLQUNKLENBQUM7R0FFVyxtQkFBbUIsQ0E2TS9CO1NBN01ZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qREVGQVVMVCBHRU5FUkFURUQgVEVNUExBVEUuIERPIE5PVCBDSEFOR0UgU0VMRUNUT1IgVEVNUExBVEVfVVJMIEFORCBDTEFTUyBOQU1FKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBBZnRlclZpZXdJbml0LCBWaWV3Q2hpbGQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBzaWduaW5nIGZyb20gJ3NpZ25hdHVyZV9wYWQnO1xyXG4vLyBpbXBvcnQgeyBNYXRTbmFja0JhciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcclxuLyoqXHJcbiogTW9kZWwgaW1wb3J0IEV4YW1wbGUgOlxyXG4qIGltcG9ydCB7IEhFUk8gfSBmcm9tICcuLi9tb2RlbHMvaGVyby5tb2RlbCc7XHJcbiovXHJcblxyXG4vKipcclxuICogU2VydmljZSBpbXBvcnQgRXhhbXBsZSA6XHJcbiAqIGltcG9ydCB7IEhlcm9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvaGVyby9oZXJvLnNlcnZpY2UnO1xyXG4gKi9cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICduLXNpZ25hdHVyZScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vbi1zaWduYXR1cmUudGVtcGxhdGUuaHRtbCcsXHJcbiAgICBzdHlsZXM6IFtgXHJcbiAgICAgOmhvc3QgeyBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDsgfVxyXG4gICAgIC5zaWduYXR1cmUtY2FudmFzLWZ1bGxzY3JlZW4ge1xyXG4gICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgIHRvcDogMDtcclxuICAgICAgICAgYm90dG9tOiAwO1xyXG4gICAgICAgICByaWdodDogMDtcclxuICAgICAgICAgbGVmdDogMDtcclxuICAgICB9XHJcbiAgICAgLnNpZ25hdHVyZS1jb21wb25lbnQtYm9yZGVyIHtcclxuICAgICAgICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XHJcbiAgICAgfVxyXG4gICAgYF1cclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBOU2lnbmF0dXJlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gICAgaW1hZ2VEYXRhVmFsdWUgPSAnJztcclxuICAgIHByaXZhdGUgc2lnbmF0dXJlUGFkOiBhbnkgPSAnJztcclxuXHJcbiAgICBAVmlld0NoaWxkKCdzaWduYXR1cmVjYW52YXMnLCB7c3RhdGljOiBmYWxzZX0pIHNpZ25hdHVyZWNhbnZhcztcclxuICAgIEBWaWV3Q2hpbGQoJ2NhbnZhc3BhcmVudCcsIHtzdGF0aWM6IGZhbHNlfSkgY2FudmFzcGFyZW50O1xyXG5cclxuICAgIEBJbnB1dCgnYmFja2dyb3VuZENvbG9yJykgYmFja2dyb3VuZENvbG9yO1xyXG4gICAgQElucHV0KCdkb3RTaXplJykgZG90U2l6ZTsgLy8gKGZsb2F0IG9yIGZ1bmN0aW9uKSBSYWRpdXMgb2YgYSBzaW5nbGUgZG90LlxyXG4gICAgQElucHV0KCdtaW5XaWR0aCcpIG1pbldpZHRoOyAvLyAoZmxvYXQpIE1pbmltdW0gd2lkdGggb2YgYSBsaW5lLiBEZWZhdWx0cyB0byAwLjUuXHJcbiAgICBASW5wdXQoJ21heFdpZHRoJykgbWF4V2lkdGg7IC8vIChmbG9hdCkgTWF4aW11bSB3aWR0aCBvZiBhIGxpbmUuIERlZmF1bHRzIHRvIDIuNS5cclxuICAgIEBJbnB1dCgndGhyb3R0bGUnKSB0aHJvdHRsZTsgLy8gKGludGVnZXIpIERyYXcgdGhlIG5leHQgcG9pbnQgYXQgbW9zdCBvbmNlIHBlciBldmVyeSB4IG1pbGxpc2Vjb25kcy4gU2V0IGl0IHRvIDAgdG8gdHVybiBvZmYgdGhyb3R0bGluZy4gRGVmYXVsdHMgdG8gMTYuXHJcbiAgICBASW5wdXQoJ21pbkRpc3RhbmNlJykgbWluRGlzdGFuY2U7IC8vIChpbnRlZ2VyKSBBZGQgdGhlIG5leHQgcG9pbnQgb25seSBpZiB0aGUgcHJldmlvdXMgb25lIGlzIGZhcnRoZXIgdGhhbiB4IHBpeGVscy4gRGVmYXVsdHMgdG8gNS4gXHJcbiAgICBASW5wdXQoJ3BlbkNvbG9yJykgcGVuQ29sb3I7IC8vIChzdHJpbmcpIENvbG9yIHVzZWQgdG8gY2xlYXIgdGhlIGJhY2tncm91bmQuIENhbiBiZSBhbnkgY29sb3IgZm9ybWF0IGFjY2VwdGVkIGJ5IGNvbnRleHQuZmlsbFN0eWxlLiBEZWZhdWx0cyB0byBcInJnYmEoMCwwLDAsMClcIiAodHJhbnNwYXJlbnQgYmxhY2spLiBVc2UgYSBub24tdHJhbnNwYXJlbnQgY29sb3IgZS5nLiBcInJnYigyNTUsMjU1LDI1NSlcIiAob3BhcXVlIHdoaXRlKSBpZiB5b3UnZCBsaWtlIHRvIHNhdmUgc2lnbmF0dXJlcyBhcyBKUEVHIGltYWdlcy5cclxuICAgIEBJbnB1dCgndmVsb2NpdHlGaWx0ZXJXZWlnaHQnKSB2ZWxvY2l0eUZpbHRlcldlaWdodDsgLy8gKGZsb2F0KSBXZWlnaHQgdXNlZCB0byBtb2RpZnkgbmV3IHZlbG9jaXR5IGJhc2VkIG9uIHRoZSBwcmV2aW91cyB2ZWxvY2l0eS4gRGVmYXVsdHMgdG8gMC43LlxyXG4gICAgQElucHV0KCdvbkJlZ2luJykgb25CZWdpbjsgLy8gKGZ1bmN0aW9uKSBDYWxsYmFjayB3aGVuIHN0cm9rZSBiZWdpbi5cclxuICAgIEBJbnB1dCgnb25FbmQnKSBvbkVuZDsgLy8gKGZ1bmN0aW9uKSBDYWxsYmFjayB3aGVuIHN0cm9rZSBlbmQuXHJcbiAgICBASW5wdXQoJ21vZGUnKSBtb2RlID0gJ3Jlc3BvbnNpdmUnOyAvLyAnY2xpY2stZnVsbHNjcmVlbicgb3IgJ3Jlc3BvbnNpdmUnXHJcbiAgICBjYW52YXNNb2RlID0gJ3Jlc3BvbnNpdmUnOyAvLyAncmVzcG9uc2l2ZScgb3IgJ2Z1bGxzY3JlZW4nXHJcbiAgICBwcml2YXRlIHNhdmVkRGF0YTtcclxuICAgIHByaXZhdGUgcHJldmlvdXNTYXZlZERhdGE7XHJcbiAgICBjbGFzc0FicztcclxuXHJcbiAgICBAT3V0cHV0KCkgaW1hZ2VEYXRhQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQElucHV0KClcclxuICAgIGdldCBpbWFnZURhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW1hZ2VEYXRhVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGltYWdlRGF0YSh2YWwpIHtcclxuICAgICAgICB0aGlzLmltYWdlRGF0YVZhbHVlID0gdmFsO1xyXG4gICAgICAgIGlmICh2YWwgfHwgdmFsID09PSAnJyB8fCB0aGlzLmlzRGF0YVVSTCh2YWwpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZUNhdmFzKHZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW1hZ2VEYXRhQ2hhbmdlLmVtaXQodGhpcy5pbWFnZURhdGFWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09ICdyZXNwb25zaXZlJykge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNhbnZhcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVDYW52YXMoKSB7XHJcbiAgICAgICAgdGhpcy5maXRUb0NvbnRhaW5lcih0aGlzLnNpZ25hdHVyZWNhbnZhcy5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICB0aGlzLnNpZ25hdHVyZVBhZCA9IG5ldyBzaWduaW5nLmRlZmF1bHQodGhpcy5zaWduYXR1cmVjYW52YXMubmF0aXZlRWxlbWVudCwgdGhpcy5hc3NpZ25PcHRpb25zKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmVDYXZhcyhkYXRhVXJsPykge1xyXG4gICAgICAgIGlmICh0aGlzLnNpZ25hdHVyZVBhZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaWduYXR1cmVQYWQuaXNFbXB0eSgpIHx8IGRhdGFVcmwgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVkRGF0YSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWduYXR1cmVQYWQuY2xlYXIoKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRGF0YVVSTChkYXRhVXJsKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWduYXR1cmVQYWQuZnJvbURhdGFVUkwoZGF0YVVybCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVkRGF0YSA9IHRoaXMuc2lnbmF0dXJlUGFkLnRvRGF0YSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZURhdGEgPSB0aGlzLnNpZ25hdHVyZVBhZC50b0RhdGFVUkwoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGUgPT09ICdjbGljay1mdWxsc2NyZWVuJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWREYXRhID0gdGhpcy5zaWduYXR1cmVQYWQudG9EYXRhKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlQ2FudmFzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJDYW52YXMoKSB7XHJcbiAgICAgICAgdGhpcy5zaWduYXR1cmVQYWQuY2xlYXIoKTtcclxuICAgICAgICAvLyB0aGlzLmZpdFRvQ29udGFpbmVyKHRoaXMuc2lnbmF0dXJlY2FudmFzLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHVuZG9DYW52YXMoKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuc2lnbmF0dXJlUGFkLnRvRGF0YSgpO1xyXG5cclxuICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICBkYXRhLnBvcCgpOyAvLyByZW1vdmUgdGhlIGxhc3QgZG90IG9yIGxpbmVcclxuICAgICAgICAgICAgdGhpcy5zaWduYXR1cmVQYWQuZnJvbURhdGEoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNob3dDYW52YXMoKSB7XHJcbiAgICAgICAgdGhpcy5jbGFzc0FicyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jYW52YXNNb2RlID0gJ2Z1bGxzY3JlZW4nO1xyXG4gICAgICAgIGlmICghdGhpcy5zaWduYXR1cmVQYWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDYW52YXMoKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZml0VG9Db250YWluZXIodGhpcy5zaWduYXR1cmVjYW52YXMubmF0aXZlRWxlbWVudCwgZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQsIGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGgpXHJcbiAgICAgICAgdGhpcy5jbGVhckNhbnZhcygpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlQ2FudmFzRnJvbURhdGEoKTtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlQ2FudmFzKCkge1xyXG4gICAgICAgIHRoaXMuY2FudmFzTW9kZSA9ICdyZXNwb25zaXZlJztcclxuICAgIH1cclxuXHJcbiAgICAvLyBjYW5jZWwgY3VycmVudGx5IGRyYXduXHJcbiAgICBjYW5jZWwoKSB7XHJcbiAgICAgICAgdGhpcy5zYXZlZERhdGEgPSBPYmplY3QuYXNzaWduKFtdLCB0aGlzLnByZXZpb3VzU2F2ZWREYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVDYW52YXNGcm9tRGF0YSgpIHtcclxuICAgICAgICBpZiAodGhpcy5zYXZlZERhdGEpIHtcclxuICAgICAgICAgICAgdGhpcy5wcmV2aW91c1NhdmVkRGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc2F2ZWREYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5zaWduYXR1cmVQYWQuZnJvbURhdGEodGhpcy5zYXZlZERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZpdFRvQ29udGFpbmVyKGVsZW1lbnQsIGhlaWdodD8sIHdpZHRoPykge1xyXG4gICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnY2FsYygxMDAlIC0gNTZweCknO1xyXG4gICAgICAgIGlmIChoZWlnaHQgJiYgd2lkdGgpIHtcclxuICAgICAgICAgICAgZWxlbWVudC53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICBlbGVtZW50LmhlaWdodCA9IGhlaWdodCAtIDU2O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQud2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICBlbGVtZW50LmhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3NpZ25PcHRpb25zKCkge1xyXG4gICAgICAgIGxldCBvcHRpb25zID0ge307XHJcbiAgICAgICAgb3B0aW9uc1snYmFja2dyb3VuZENvbG9yJ10gPSB0aGlzLmNoZWNrSWZWYWxpZFZhbHVlQW5kUkdCKHRoaXMuYmFja2dyb3VuZENvbG9yLCAnYmFja2dyb3VuZENvbG9yJylcclxuICAgICAgICBvcHRpb25zWydkb3RTaXplJ10gPSB0aGlzLmNoZWNrSWZWYWxpZFZhbHVlQW5kTnVtYmVyKHRoaXMuZG90U2l6ZSwgJ2RvdFNpemUnKTtcclxuICAgICAgICBvcHRpb25zWydtaW5XaWR0aCddID0gdGhpcy5jaGVja0lmVmFsaWRWYWx1ZUFuZE51bWJlcih0aGlzLm1pbldpZHRoLCAnbWluV2lkdGgnKTtcclxuICAgICAgICBvcHRpb25zWydtYXhXaWR0aCddID0gdGhpcy5jaGVja0lmVmFsaWRWYWx1ZUFuZE51bWJlcih0aGlzLm1heFdpZHRoLCAnbWF4V2lkdGgnKTtcclxuICAgICAgICBvcHRpb25zWyd0aHJvdHRsZSddID0gdGhpcy5jaGVja0lmVmFsaWRWYWx1ZUFuZE51bWJlcih0aGlzLnRocm90dGxlLCAndGhyb3R0bGUnKTtcclxuICAgICAgICBvcHRpb25zWydtaW5EaXN0YW5jZSddID0gdGhpcy5jaGVja0lmVmFsaWRWYWx1ZUFuZE51bWJlcih0aGlzLm1pbkRpc3RhbmNlLCAnbWluRGlzdGFuY2UnKTtcclxuICAgICAgICBvcHRpb25zWydwZW5Db2xvciddID0gdGhpcy5jaGVja0lmVmFsaWRWYWx1ZUFuZFJHQih0aGlzLnBlbkNvbG9yLCAncGVuQ29sb3InKVxyXG4gICAgICAgIG9wdGlvbnNbJ3ZlbG9jaXR5RmlsdGVyV2VpZ2h0J10gPSB0aGlzLmNoZWNrSWZWYWxpZFZhbHVlQW5kTnVtYmVyKHRoaXMudmVsb2NpdHlGaWx0ZXJXZWlnaHQsICd2ZWxvY2l0eUZpbHRlcldlaWdodCcpO1xyXG4gICAgICAgIG9wdGlvbnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpKTsgLy8gcmVtb3ZpbmcgYWxsIHVuZGVmaW5lZCBmaWVsZHNcclxuICAgICAgICBvcHRpb25zWydvbkJlZ2luJ10gPSB0aGlzLmNoZWNrSWZWYWxpZFZhbHVlQW5kRnVuY3Rpb24odGhpcy5vbkJlZ2luLCAnb25CZWdpbicpO1xyXG4gICAgICAgIG9wdGlvbnNbJ29uRW5kJ10gPSB0aGlzLmNoZWNrSWZWYWxpZFZhbHVlQW5kRnVuY3Rpb24odGhpcy5vbkVuZCwgJ29uRW5kJyk7XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0lmVmFsaWRWYWx1ZUFuZE51bWJlcihudW0sIG5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGVja0lmVmFsaWQobnVtKSAmJiB0aGlzLmNoZWNrTnVtYmVyKG51bSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbnZhbGlkVG9hc3QobmFtZSwgJ251bScpO1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0lmVmFsaWRWYWx1ZUFuZFJHQihjb2xvciwgbmFtZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSWZWYWxpZChjb2xvcikgJiYgdGhpcy5jaGVja1JHQihjb2xvcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmludmFsaWRUb2FzdChuYW1lLCAncmdiJyk7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrSWZWYWxpZFZhbHVlQW5kRnVuY3Rpb24oZm4sIG5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGVja0lmVmFsaWQoZm4pICYmIHRoaXMuY2hlY2tJZlZhbGlkRnVuY3Rpb24oZm4pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbnZhbGlkVG9hc3QobmFtZSwgJ2Z1bmN0aW9uIGZvcm1hdCcpO1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0lmVmFsaWQodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpID8gdmFsdWUgOiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja051bWJlcihudW0pIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuY2hlY2tJc05hbihOdW1iZXIobnVtKSkgPyBOdW1iZXIobnVtKSA6IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrSWZWYWxpZEZ1bmN0aW9uKGZuKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyA/IGZuIDogdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tSR0IoY29sb3IpIHtcclxuICAgICAgICBjb25zdCBtYXRjaENvbG9yczEgPSBuZXcgUmVnRXhwKC9yZ2JcXCgoXFxkezEsM30pLChcXGR7MSwzfSksKFxcZHsxLDN9KVxcKS8pO1xyXG4gICAgICAgIGNvbnN0IG1hdGNoQ29sb3JzMiA9IG5ldyBSZWdFeHAoL3JnYlxcKChcXGR7MSwzfSksWyBcXHRdKyhcXGR7MSwzfSksKFxcZHsxLDN9KVxcKS8pO1xyXG4gICAgICAgIGNvbnN0IG1hdGNoQ29sb3JzMyA9IG5ldyBSZWdFeHAoL3JnYlxcKChcXGR7MSwzfSksKFxcZHsxLDN9KSxbIFxcdF0rKFxcZHsxLDN9KVxcKS8pXHJcbiAgICAgICAgcmV0dXJuIG1hdGNoQ29sb3JzMS50ZXN0KGNvbG9yKSB8fCBtYXRjaENvbG9yczIudGVzdChjb2xvcikgfHwgbWF0Y2hDb2xvcnMzLnRlc3QoY29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tJc05hbih2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBOdW1iZXIuaXNOYU4odmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW52YWxpZFRvYXN0KG9wdGlvbk5hbWUsIG9wdGlvblR5cGUpIHtcclxuICAgICAgICBzd2l0Y2ggKG9wdGlvblR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnbnVtJzpcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuc25hY2tiYXIub3BlbihgSW52YWxpZCAke29wdGlvbk5hbWV9IChudW1iZXIgb3IgZmxvYXQpIGdpdmVuLCB0YWtpbmcgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLmAsICdPSycpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3JnYic6XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnNuYWNrYmFyLm9wZW4oYEludmFsaWQgJHtvcHRpb25OYW1lfSBmb3JtYXQgRWc6IHJnYigyNTUsIDI1NSwgMjU1KSAgZ2l2ZW4sIHRha2luZyBkZWZhdWx0IHZhbHVlIGluc3RlYWQuYCwgJ09LJyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNEYXRhVVJMKHMpIHtcclxuICAgICAgICBpZiAocykge1xyXG4gICAgICAgICAgICBjb25zdCByZWdleCA9IC9eXFxzKmRhdGE6KFthLXpdK1xcL1thLXpdKyg7W2EtelxcLV0rXFw9W2EtelxcLV0rKT8pPyg7YmFzZTY0KT8sW2EtejAtOVxcIVxcJFxcJlxcJ1xcLFxcKFxcKVxcKlxcK1xcLFxcO1xcPVxcLVxcLlxcX1xcflxcOlxcQFxcL1xcP1xcJVxcc10qXFxzKiQvaTtcclxuICAgICAgICAgICAgcmV0dXJuICEhcy5tYXRjaChyZWdleCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=