import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild, Renderer2 } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
var NFileUploadComponent = /** @class */ (function () {
    function NFileUploadComponent(fileIOService, _renderer) {
        this.fileIOService = fileIOService;
        this._renderer = _renderer;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    /**
     * Method executed when upload button is clicked.
     */
    NFileUploadComponent.prototype.handleUpload = function () {
        var _this = this;
        this.isDone = false;
        if (this.file && this.uploadOptions && this.uploadOptions.entityName && this.uploadOptions.metadata) {
            this.fileIOService.upload({ files: this.file, entityName: this.uploadOptions.entityName, metadata: this.uploadOptions.metadata })
                .then(function (res) {
                _this.isDone = true;
                _this.onsuccess.emit(res);
            })
                .catch(function (err) { return _this.onerror.emit(err); });
        }
        else {
            this.onerror.emit(new Error('Upload options missing'));
        }
    };
    /**
     * Method executed when a file is selected.
     */
    NFileUploadComponent.prototype.handleSelect = function (fileInput) {
        if (fileInput.target.files && fileInput.target.files[0]) {
            this.file = fileInput.target.files[0];
            this.fileName = this.file.name;
        }
    };
    /**
     * Methods executed when cancel button is clicked.
     * Clears files.
     */
    NFileUploadComponent.prototype.cancel = function () {
        this.file = null;
        this.fileName = null;
        this.isDone = false;
        // check if the file input is rendered before clearing it
        if (this.fileInput) {
            this._renderer.setProperty(this.fileInput, 'value', '');
        }
    };
    NFileUploadComponent.prototype.disableFileUploadButton = function () {
        if (typeof this.disableButton === 'boolean') {
            return this.disableButton;
        }
        return this.disableButton === 'disabled' || this.disableButton === 'true' ? true : false;
    };
    NFileUploadComponent.ctorParameters = function () { return [
        { type: NFileIOService },
        { type: Renderer2 }
    ]; };
    __decorate([
        ViewChild('fileInput', { static: false })
    ], NFileUploadComponent.prototype, "fileInput", void 0);
    __decorate([
        Input()
    ], NFileUploadComponent.prototype, "uploadOptions", void 0);
    __decorate([
        Input('disabled')
    ], NFileUploadComponent.prototype, "disableButton", void 0);
    __decorate([
        Output()
    ], NFileUploadComponent.prototype, "onsuccess", void 0);
    __decorate([
        Output()
    ], NFileUploadComponent.prototype, "onerror", void 0);
    NFileUploadComponent = __decorate([
        Component({
            selector: 'n-file-upload',
            template: "<div>\r\n  <button mat-raised-button class=\"bh-file-upload\" (click)=\"fileInput.click()\" color=\"primary\"\r\n    *ngIf=\"!fileName\" [disabled]=\"disableFileUploadButton()\">\r\n    <mat-icon>attach_file</mat-icon>\r\n    <span>Choose a file...</span>\r\n    <input #fileInput type=\"file\" (change)=\"handleSelect($event)\" style=\"display:none;\" />\r\n  </button>\r\n  <div *ngIf=\"fileName\">\r\n    <button mat-raised-button color=\"primary\" (click)=\"handleUpload()\">\r\n      <mat-icon>file_upload</mat-icon>\r\n      <span>{{fileName}}</span>\r\n    </button>\r\n    <button *ngIf=\"!isDone\" mat-icon-button color=\"warn\" (click)=\"cancel()\" class=\"bh-file-upload-cancel\">\r\n      <mat-icon>cancel</mat-icon>\r\n    </button>\r\n    <button *ngIf=\"isDone\" mat-icon-button (click)=\"cancel()\" class=\"bh-file-upload-done\">\r\n      <mat-icon>done</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n",
            styles: [".bh-file-upload{padding-left:8px;padding-right:8px}.bh-file-upload-cancel{height:24px;width:24px;position:relative;top:24px;left:-12px}::ng-deep [dir=rtl] .bh-file-upload-cancel{right:-12px;left:0}.bh-file-upload-cancel mat-icon{border-radius:12px;vertical-align:baseline}.bh-file-upload-done{height:24px;width:24px;position:relative;top:20px;left:-13px}::ng-deep [dir=rtl] .bh-file-upload-done{right:-12px;left:0}.bh-file-upload-done mat-icon{border-radius:12px;vertical-align:baseline}"]
        })
    ], NFileUploadComponent);
    return NFileUploadComponent;
}());
export { NFileUploadComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1maWxlVXBsb2FkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1tb2R1bGUvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1tb2R1bGUvbmV1dHJpbm9zLWZpbGUvZmlsZVVwbG9hZC9uLWZpbGVVcGxvYWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0YsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBUTlEO0lBV0UsOEJBQ1UsYUFBNkIsRUFDN0IsU0FBb0I7UUFEcEIsa0JBQWEsR0FBYixhQUFhLENBQWdCO1FBQzdCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFMcEIsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3ZELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUk3QixDQUFDO0lBRW5DOztPQUVHO0lBQ0gsMkNBQVksR0FBWjtRQUFBLGlCQVlDO1FBWEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUU7WUFDbkcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUM7aUJBQzlILElBQUksQ0FBQyxVQUFDLEdBQUc7Z0JBQ1IsS0FBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7Z0JBQ25CLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNCLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBdEIsQ0FBc0IsQ0FBQyxDQUFDO1NBQ3pDO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7U0FDeEQ7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCwyQ0FBWSxHQUFaLFVBQWEsU0FBYztRQUN6QixJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3ZELElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNoQztJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSCxxQ0FBTSxHQUFOO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIseURBQXlEO1FBQ3pELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7SUFFRCxzREFBdUIsR0FBdkI7UUFDRSxJQUFJLE9BQU8sSUFBSSxDQUFDLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDM0MsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxLQUFLLFVBQVUsSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDM0YsQ0FBQzs7Z0JBakR3QixjQUFjO2dCQUNsQixTQUFTOztJQVpXO1FBQXhDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUM7MkRBQVc7SUFLMUM7UUFBUixLQUFLLEVBQUU7K0RBQWU7SUFDSjtRQUFsQixLQUFLLENBQUMsVUFBVSxDQUFDOytEQUFlO0lBQ3ZCO1FBQVQsTUFBTSxFQUFFOzJEQUF3RDtJQUN2RDtRQUFULE1BQU0sRUFBRTt5REFBc0Q7SUFUcEQsb0JBQW9CO1FBTGhDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxlQUFlO1lBRXpCLHU2QkFBMkM7O1NBQzVDLENBQUM7T0FDVyxvQkFBb0IsQ0ErRGhDO0lBQUQsMkJBQUM7Q0FBQSxBQS9ERCxJQStEQztTQS9EWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgVmlld0NoaWxkLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTkZpbGVJT1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9uLWZpbGVJTy5zZXJ2aWNlJztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ24tZmlsZS11cGxvYWQnLFxyXG4gIHN0eWxlVXJsczogWycuL24tZmlsZVVwbG9hZC5jb21wb25lbnQuc2NzcyddLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9uLWZpbGVVcGxvYWQudGVtcGxhdGUuaHRtbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBORmlsZVVwbG9hZENvbXBvbmVudCB7XHJcbiAgQFZpZXdDaGlsZCgnZmlsZUlucHV0Jywge3N0YXRpYzogZmFsc2V9KSBmaWxlSW5wdXQ7XHJcbiAgZmlsZTogRmlsZTtcclxuICBmaWxlTmFtZTtcclxuICBpc0RvbmU6IGJvb2xlYW47XHJcblxyXG4gIEBJbnB1dCgpIHVwbG9hZE9wdGlvbnM7XHJcbiAgQElucHV0KCdkaXNhYmxlZCcpIGRpc2FibGVCdXR0b247XHJcbiAgQE91dHB1dCgpIG9uc3VjY2VzczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgb25lcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGZpbGVJT1NlcnZpY2U6IE5GaWxlSU9TZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ldGhvZCBleGVjdXRlZCB3aGVuIHVwbG9hZCBidXR0b24gaXMgY2xpY2tlZC5cclxuICAgKi9cclxuICBoYW5kbGVVcGxvYWQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzRG9uZSA9IGZhbHNlO1xyXG4gICAgaWYgKHRoaXMuZmlsZSAmJiB0aGlzLnVwbG9hZE9wdGlvbnMgJiYgdGhpcy51cGxvYWRPcHRpb25zLmVudGl0eU5hbWUgJiYgdGhpcy51cGxvYWRPcHRpb25zLm1ldGFkYXRhKSB7XHJcbiAgICAgIHRoaXMuZmlsZUlPU2VydmljZS51cGxvYWQoeyBmaWxlczogdGhpcy5maWxlLCBlbnRpdHlOYW1lOiB0aGlzLnVwbG9hZE9wdGlvbnMuZW50aXR5TmFtZSwgbWV0YWRhdGE6IHRoaXMudXBsb2FkT3B0aW9ucy5tZXRhZGF0YSB9KVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgIHRoaXMuaXNEb25lID0gdHJ1ZTtcclxuICAgICAgICAgIHRoaXMub25zdWNjZXNzLmVtaXQocmVzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlcnIgPT4gdGhpcy5vbmVycm9yLmVtaXQoZXJyKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm9uZXJyb3IuZW1pdChuZXcgRXJyb3IoJ1VwbG9hZCBvcHRpb25zIG1pc3NpbmcnKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNZXRob2QgZXhlY3V0ZWQgd2hlbiBhIGZpbGUgaXMgc2VsZWN0ZWQuXHJcbiAgICovXHJcbiAgaGFuZGxlU2VsZWN0KGZpbGVJbnB1dDogYW55KTogdm9pZCB7XHJcbiAgICBpZiAoZmlsZUlucHV0LnRhcmdldC5maWxlcyAmJiBmaWxlSW5wdXQudGFyZ2V0LmZpbGVzWzBdKSB7XHJcbiAgICAgIHRoaXMuZmlsZSA9IGZpbGVJbnB1dC50YXJnZXQuZmlsZXNbMF07XHJcbiAgICAgIHRoaXMuZmlsZU5hbWUgPSB0aGlzLmZpbGUubmFtZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ldGhvZHMgZXhlY3V0ZWQgd2hlbiBjYW5jZWwgYnV0dG9uIGlzIGNsaWNrZWQuXHJcbiAgICogQ2xlYXJzIGZpbGVzLlxyXG4gICAqL1xyXG4gIGNhbmNlbCgpOiB2b2lkIHtcclxuICAgIHRoaXMuZmlsZSA9IG51bGw7XHJcbiAgICB0aGlzLmZpbGVOYW1lID0gbnVsbDtcclxuICAgIHRoaXMuaXNEb25lID0gZmFsc2U7XHJcbiAgICAvLyBjaGVjayBpZiB0aGUgZmlsZSBpbnB1dCBpcyByZW5kZXJlZCBiZWZvcmUgY2xlYXJpbmcgaXRcclxuICAgIGlmICh0aGlzLmZpbGVJbnB1dCkge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmZpbGVJbnB1dCwgJ3ZhbHVlJywgJycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzYWJsZUZpbGVVcGxvYWRCdXR0b24oKSB7XHJcbiAgICBpZiAodHlwZW9mIHRoaXMuZGlzYWJsZUJ1dHRvbiA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmRpc2FibGVCdXR0b247XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5kaXNhYmxlQnV0dG9uID09PSAnZGlzYWJsZWQnIHx8IHRoaXMuZGlzYWJsZUJ1dHRvbiA9PT0gJ3RydWUnID8gdHJ1ZSA6IGZhbHNlO1xyXG4gIH1cclxuXHJcbn1cclxuIl19