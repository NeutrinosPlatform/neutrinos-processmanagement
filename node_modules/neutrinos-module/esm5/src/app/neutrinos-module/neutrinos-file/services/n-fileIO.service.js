import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { NSystemService } from 'neutrinos-seed-services';
var NFileIOService = /** @class */ (function () {
    function NFileIOService(http) {
        var _this = this;
        this.http = http;
        this.checkFileExist = function (path, fileName, i, callback) {
            return window.resolveLocalFileSystemURL(path + fileName, function () {
                var length = 4;
                if (fileName.lastIndexOf('(') > -1) {
                    var isExist = parseInt(fileName.slice((fileName.lastIndexOf('(') + 1), fileName.lastIndexOf(')')), 10);
                    if (!isNaN(isExist)) {
                        i = isExist + 1;
                        if (i > 10 && i < 100) {
                            length += 1;
                        }
                        else if (i > 100) {
                            length += 2;
                        }
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.') - length)) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                    }
                    else {
                        i += 1;
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                    }
                }
                else {
                    i += 1;
                    fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                    fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                }
                return _this.checkFileExist(path, fileName, i, callback);
            }, function () {
                return callback(fileName);
            });
        };
        this.systemService = NSystemService.getInstance();
        this.appProperties = this.systemService.getVal('properties');
    }
    NFileIOService.prototype.getFileInfo = function (options) {
        var dataModelURL = this.systemService.getDataModelUrl();
        if (options.metadata) {
            dataModelURL += this.appProperties.appName + "_" + options.entityName + ".files?filter={\"metadata.key\": \"" + options.metadata.key + "\"}";
        }
        else {
            dataModelURL += this.appProperties.appName + "_" + options.entityName + ".files/" + options.fileId;
        }
        return this.http.get(dataModelURL);
    };
    NFileIOService.prototype.getFormData = function (fileUri) {
        return new Promise(function (resolve, reject) {
            window.resolveLocalFileSystemURL(fileUri, function (fileEntry) {
                fileEntry.file(function (file) {
                    var reader = new FileReader();
                    reader.onerror = function (evt) {
                        return reject(evt);
                    };
                    reader.onloadend = function (evt) {
                        var formData = new FormData();
                        var blob = new Blob([new Uint8Array(reader.result)], { type: file.type });
                        formData.append('file', blob, file.name);
                        return resolve(formData);
                    };
                    reader.readAsArrayBuffer(file);
                });
            }, function (error) {
                return reject(error);
            });
        });
    };
    NFileIOService.prototype.getPicture = function (cameraOptions) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                navigator.camera.getPicture(function (imageUri) {
                    _this.getFormData(imageUri).then(function (res) {
                        return resolve(res);
                    }).catch(function (err) { return reject(err); });
                }, function (error) {
                    return reject(error);
                }, cameraOptions);
            }, false);
        });
    };
    NFileIOService.prototype.scanPicture = function (scanOptions) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                if (scanOptions.hasOwnProperty('sourceType') && scanOptions.hasOwnProperty('doUpload')) {
                    scan.scanDoc(scanOptions.sourceType, function (imageUri) {
                        if (scanOptions.doUpload) {
                            _this.getFormData(imageUri).then(function (res) {
                                return resolve(res);
                            }).catch(function (err) { return reject(err); });
                        }
                        else {
                            resolve(imageUri);
                        }
                    }, function (error) {
                        return reject(error);
                    });
                }
                else {
                    reject('sourceType not found');
                }
            }, false);
        });
    };
    //Barcode
    NFileIOService.prototype.getBarcode = function (barcodeOptions) {
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                cordova.plugins.barcodeScanner.scan(function (result) {
                    if (result.cancelled) {
                        return reject(result);
                    }
                    else {
                        return resolve(result);
                    }
                }, function (error) {
                    return reject(error);
                }, barcodeOptions);
            }, false);
        });
    };
    //Video
    NFileIOService.prototype.getVideo = function (videoOptions) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                navigator.device.capture.captureVideo(function (mediaFiles) {
                    var imageUri = mediaFiles[0].fullPath;
                    _this.getFormData(imageUri).then(function (res) {
                        return resolve(res);
                    }).catch(function (err) { return reject(err); });
                }, function (error) {
                    return reject(error);
                }, {});
            }, false);
        });
    };
    //tts
    NFileIOService.prototype.getTts = function (ttsOptions) {
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                if (ttsOptions.hasOwnProperty('text')) {
                    TTS.speak(ttsOptions).then(function () {
                        return resolve('success');
                    }, function (reason) {
                        return reject(reason);
                    });
                }
                else {
                    reject('text not found');
                }
            }, false);
        });
    };
    //shake
    NFileIOService.prototype.getShake = function (shakeOptions) {
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                if (shakeOptions.hasOwnProperty('start') && shakeOptions.hasOwnProperty('sensitivity')) {
                    if (shakeOptions.start) {
                        shake.startWatch(function () {
                            return resolve('success');
                        }, shakeOptions.sensitivity, function () {
                            return reject('error');
                        });
                    }
                    else {
                        shake.stopWatch();
                    }
                }
                else {
                    reject('start or sensitivity not found');
                }
            }, false);
        });
    };
    //ocr
    NFileIOService.prototype.getOcr = function (ocrOptions) {
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                if (ocrOptions.hasOwnProperty('uriOrBase') && ocrOptions.hasOwnProperty('returnType')) {
                    navigator.camera.getPicture(function (imageData) {
                        textocr.recText(ocrOptions.uriOrBase, ocrOptions.returnType, imageData, function (recognizedText) {
                            return resolve(recognizedText);
                        }, function (message) {
                            return reject(message);
                        });
                    }, function (message) {
                        return reject(message);
                    }, ocrOptions);
                }
                else {
                    reject('uriOrBase or returnType not found');
                }
            }, false);
        });
    };
    //fingerprint
    NFileIOService.prototype.getFingerprint = function (fingerprintOptions) {
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                if (fingerprintOptions.hasOwnProperty('clientId') && fingerprintOptions.hasOwnProperty('clientSecret')) {
                    Fingerprint.isAvailable(function (result) {
                        Fingerprint.show(fingerprintOptions, function () {
                            return resolve('success');
                        }, function (err) {
                            return reject(err);
                        });
                    }, function (message) {
                        return reject(message);
                    });
                }
                else {
                    reject('clientId or clientSecret not found');
                }
            }, false);
        });
    };
    NFileIOService.prototype.upload = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var body = new FormData();
            if (options.formData) {
                body = options.formData;
            }
            else if (options.files) {
                body.append('file', options.files);
            }
            else {
                reject('No file selected!');
            }
            if (options.metadata) {
                body.append('metadata', JSON.stringify(options.metadata));
            }
            var headers = { 'Content-Type': 'no-content' };
            var url = _this.systemService.getFileIOUrl() + ("" + options.entityName);
            var temp_headers = { headers: _this.setHeaders(headers) };
            _this.http.post(url, body, temp_headers)
                .subscribe(function (res) { return resolve(res); }, function (err) { return reject(err); });
        });
    };
    NFileIOService.prototype.download = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (options.entityName && (options.metadata || options.fileId)) {
                _this.getFileInfo(options).subscribe(function (res) {
                    if (options.metadata) {
                        res = res[res.length - 1];
                    }
                    else {
                        res = res.result;
                    }
                    var fileInfo = {
                        contentType: '',
                        filename: ''
                    };
                    if (res && res['contentType'] && res['filename']) {
                        fileInfo['contentType'] = res['contentType'];
                        fileInfo['filename'] = res['filename'];
                        var fileIOURL = _this.systemService.getFileIOUrl();
                        if (options.metadata) {
                            fileIOURL += options.entityName + "?metadataFilter={\"metadata.key\": \"" + options.metadata.key + "\"}";
                        }
                        else {
                            fileIOURL += options.entityName + "/" + options.fileId;
                        }
                        var headers = {
                            'Accept': fileInfo.contentType
                        };
                        _this.http.get(fileIOURL, { headers: _this.setHeaders(headers), responseType: 'blob' }).subscribe(function (response) {
                            var blob = new Blob([response.body], { type: fileInfo.contentType });
                            _this.saveFile(blob, fileInfo.filename).then(function (resp) {
                            }).catch(function (err) { return reject(err); });
                        }, function (err) { return reject(err); });
                    }
                    else {
                        reject('fileInfo not exit');
                    }
                }, function (err) { return reject(err); });
            }
            else {
                return reject('download options not found');
            }
        });
    };
    NFileIOService.prototype.saveFile = function (data, filename) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.systemService.checkDevice() == 'mobile') {
                var storageLocation = _this.systemService.isAndroid() ? cordova.file.externalRootDirectory : cordova.file.documentsDirectory;
                _this.createDirectory(storageLocation, _this.appProperties.appName, filename, data)
                    .then(function (res) { return resolve(res); })
                    .catch(function (err) { return reject(err); });
            }
            else {
                _this.saveToBrowser(data, filename).then(function (res) { return resolve(res); });
            }
        });
    };
    NFileIOService.prototype.saveToBrowser = function (data, fileName) {
        return new Promise(function (resolve) {
            // Edge 20+
            var isEdge = !( /*@cc_on!@*/false || !!document['documentMode']) && !!window.StyleMedia;
            if (isEdge) {
                window.navigator.msSaveBlob(data, fileName);
            }
            else {
                var downloadURL = window.URL.createObjectURL(data);
                var anchor = document.createElement('a');
                document.body.appendChild(anchor);
                anchor.style.display = 'none';
                anchor.download = fileName;
                anchor.href = downloadURL;
                anchor.click();
                window.URL.revokeObjectURL(downloadURL);
                document.body.removeChild(anchor);
                anchor.remove();
            }
            return resolve('download complete');
        });
    };
    NFileIOService.prototype.createDirectory = function (rootDirectory, appName, fileName, data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            window.resolveLocalFileSystemURL(rootDirectory, function (fileSystem) {
                fileSystem.getDirectory(appName, { create: true }, function (dirEntry) {
                    _this.checkFileExist(dirEntry.nativeURL, fileName, 0, function (newFileName) {
                        dirEntry.getFile(newFileName, { create: true }, function (targetFile) {
                            targetFile.createWriter(function (fileWriter) {
                                fileWriter.onwriteend = function () {
                                    return resolve(targetFile.toURL());
                                };
                                fileWriter.onerror = function (err) {
                                    return reject(err);
                                };
                                fileWriter.write(data);
                            });
                        });
                    });
                }, function (err) { return reject(err); });
            }, function (err) { return reject(err); });
        });
    };
    NFileIOService.prototype.setHeaders = function (headerJSON) {
        var headers = new HttpHeaders();
        for (var key in headerJSON) {
            if (key) {
                headers = headers.set(key, headerJSON[key]);
            }
        }
        return headers;
    };
    NFileIOService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    NFileIOService = __decorate([
        Injectable()
    ], NFileIOService);
    return NFileIOService;
}());
export { NFileIOService };
//# sourceMappingURL=data:application/json;base64,