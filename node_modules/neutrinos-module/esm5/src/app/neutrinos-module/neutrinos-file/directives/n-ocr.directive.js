import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
var NOcrDirective = /** @class */ (function () {
    function NOcrDirective(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    NOcrDirective.prototype.methodToHandleMouseClickAction = function () {
        var _this = this;
        this.getOcr()
            .then(function (sucess) { return _this.onsuccess.emit(sucess); })
            .catch(function (error) { return _this.onerror.emit(error); });
    };
    NOcrDirective.prototype.getOcr = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.fsv.getOcr(_this.ocrOptions).then(function (res) {
                return resolve(res);
            }).catch(function (err) { return reject(err); });
        });
    };
    NOcrDirective.ctorParameters = function () { return [
        { type: NFileIOService }
    ]; };
    __decorate([
        Input()
    ], NOcrDirective.prototype, "ocrOptions", void 0);
    __decorate([
        Output()
    ], NOcrDirective.prototype, "onsuccess", void 0);
    __decorate([
        Output()
    ], NOcrDirective.prototype, "onerror", void 0);
    __decorate([
        HostListener('click')
    ], NOcrDirective.prototype, "methodToHandleMouseClickAction", null);
    NOcrDirective = __decorate([
        Directive({
            selector: '[n-ocr]'
        })
    ], NOcrDirective);
    return NOcrDirective;
}());
export { NOcrDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1vY3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLW1vZHVsZS8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbmV1dHJpbm9zLW1vZHVsZS9uZXV0cmlub3MtZmlsZS9kaXJlY3RpdmVzL24tb2NyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQVE5RDtJQUtFLHVCQUFvQixHQUFtQjtRQUFuQixRQUFHLEdBQUgsR0FBRyxDQUFnQjtRQUg3QixjQUFTLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBRWYsQ0FBQztJQUVyQixzREFBOEIsR0FBOUI7UUFBdkIsaUJBSUM7UUFIQyxJQUFJLENBQUMsTUFBTSxFQUFFO2FBQ1YsSUFBSSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQTNCLENBQTJCLENBQUM7YUFDM0MsS0FBSyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQXhCLENBQXdCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsOEJBQU0sR0FBTjtRQUFBLGlCQU1DO1FBTEMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2pDLEtBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHO2dCQUN2QyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQVgsQ0FBVyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkFkd0IsY0FBYzs7SUFKOUI7UUFBUixLQUFLLEVBQUU7cURBQStCO0lBQzdCO1FBQVQsTUFBTSxFQUFFO29EQUFtRDtJQUNsRDtRQUFULE1BQU0sRUFBRTtrREFBaUQ7SUFJbkM7UUFBdEIsWUFBWSxDQUFDLE9BQU8sQ0FBQzt1RUFJckI7SUFYVSxhQUFhO1FBSHpCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxTQUFTO1NBQ3BCLENBQUM7T0FDVyxhQUFhLENBb0J6QjtJQUFELG9CQUFDO0NBQUEsQUFwQkQsSUFvQkM7U0FwQlksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBORmlsZUlPU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL24tZmlsZUlPLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBORGlyZWN0aXZlT3B0aW9ucyB9IGZyb20gJy4vZGlyZWN0aXZlLmNsYXNzJztcclxuXHJcbmRlY2xhcmUgY29uc3QgbmF2aWdhdG9yOiBhbnk7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tuLW9jcl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOT2NyRGlyZWN0aXZlIHtcclxuICBASW5wdXQoKSBvY3JPcHRpb25zOiBORGlyZWN0aXZlT3B0aW9ucztcclxuICBAT3V0cHV0KCkgb25zdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgb25lcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZnN2OiBORmlsZUlPU2VydmljZSkgeyB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJykgbWV0aG9kVG9IYW5kbGVNb3VzZUNsaWNrQWN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRPY3IoKVxyXG4gICAgICAudGhlbihzdWNlc3MgPT4gdGhpcy5vbnN1Y2Nlc3MuZW1pdChzdWNlc3MpKVxyXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gdGhpcy5vbmVycm9yLmVtaXQoZXJyb3IpKTtcclxuICB9XHJcblxyXG4gIGdldE9jcigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5mc3YuZ2V0T2NyKHRoaXMub2NyT3B0aW9ucykudGhlbihyZXMgPT4ge1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlKHJlcyk7XHJcbiAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19