import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
var NCameraDirective = /** @class */ (function () {
    function NCameraDirective(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    NCameraDirective.prototype.methodToHandleMouseClickAction = function () {
        var _this = this;
        this.getPicture()
            .then(function (sucess) { return _this.onsuccess.emit(sucess); })
            .catch(function (error) { return _this.onerror.emit(error); });
    };
    NCameraDirective.prototype.getPicture = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.fsv.getPicture(_this.cameraOptions).then(function (res) {
                var options = {
                    'formData': res,
                    'entityName': _this.cameraOptions.entityName,
                    'metadata': _this.cameraOptions.metadata
                };
                _this.fsv.upload(options)
                    .then(function (uri) { return resolve(uri); })
                    .catch(function (err) { return reject(err); });
            }).catch(function (err) { return reject(err); });
        });
    };
    NCameraDirective.ctorParameters = function () { return [
        { type: NFileIOService }
    ]; };
    __decorate([
        Input()
    ], NCameraDirective.prototype, "cameraOptions", void 0);
    __decorate([
        Output()
    ], NCameraDirective.prototype, "onsuccess", void 0);
    __decorate([
        Output()
    ], NCameraDirective.prototype, "onerror", void 0);
    __decorate([
        HostListener('click')
    ], NCameraDirective.prototype, "methodToHandleMouseClickAction", null);
    NCameraDirective = __decorate([
        Directive({
            selector: '[n-camera]'
        })
    ], NCameraDirective);
    return NCameraDirective;
}());
export { NCameraDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1jYW1lcmEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLW1vZHVsZS8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbmV1dHJpbm9zLW1vZHVsZS9uZXV0cmlub3MtZmlsZS9kaXJlY3RpdmVzL24tY2FtZXJhLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQWlCOUQ7SUFLRSwwQkFBb0IsR0FBbUI7UUFBbkIsUUFBRyxHQUFILEdBQUcsQ0FBZ0I7UUFIN0IsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVmLENBQUM7SUFFckIseURBQThCLEdBQTlCO1FBQXZCLGlCQUlDO1FBSEMsSUFBSSxDQUFDLFVBQVUsRUFBRTthQUNkLElBQUksQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUEzQixDQUEyQixDQUFDO2FBQzNDLEtBQUssQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUF4QixDQUF3QixDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELHFDQUFVLEdBQVY7UUFBQSxpQkFhQztRQVpDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUNqQyxLQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsR0FBRztnQkFDOUMsSUFBTSxPQUFPLEdBQUc7b0JBQ2QsVUFBVSxFQUFFLEdBQUc7b0JBQ2YsWUFBWSxFQUFFLEtBQUksQ0FBQyxhQUFhLENBQUMsVUFBVTtvQkFDM0MsVUFBVSxFQUFFLEtBQUksQ0FBQyxhQUFhLENBQUMsUUFBUTtpQkFDeEMsQ0FBQztnQkFDRixLQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7cUJBQ3JCLElBQUksQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBWixDQUFZLENBQUM7cUJBQ3pCLEtBQUssQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBWCxDQUFXLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQVgsQ0FBVyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkFyQndCLGNBQWM7O0lBSjlCO1FBQVIsS0FBSyxFQUFFOzJEQUFrQztJQUNoQztRQUFULE1BQU0sRUFBRTt1REFBbUQ7SUFDbEQ7UUFBVCxNQUFNLEVBQUU7cURBQWlEO0lBSW5DO1FBQXRCLFlBQVksQ0FBQyxPQUFPLENBQUM7MEVBSXJCO0lBWFUsZ0JBQWdCO1FBSDVCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxZQUFZO1NBQ3ZCLENBQUM7T0FDVyxnQkFBZ0IsQ0EyQjVCO0lBQUQsdUJBQUM7Q0FBQSxBQTNCRCxJQTJCQztTQTNCWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTkZpbGVJT1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9uLWZpbGVJTy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTkRpcmVjdGl2ZU9wdGlvbnMgfSBmcm9tICcuL2RpcmVjdGl2ZS5jbGFzcyc7XHJcblxyXG5cclxuZGVjbGFyZSBjb25zdCBuYXZpZ2F0b3I6IGFueTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FtZXJhT3B0aW9ucyB7XHJcbiAgcXVhbGl0eT86IDUwO1xyXG4gIGRlc3RpbmF0aW9uVHlwZT86IDEgfCAyO1xyXG4gIEVuY29kaW5nVHlwZT86IDAgfCAxO1xyXG4gIE1lZGlhVHlwZT86IDAgfCAxIHwgMjtcclxuICBQaWN0dXJlU291cmNlVHlwZT86IDAgfCAxIHwgMjtcclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbi1jYW1lcmFdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTkNhbWVyYURpcmVjdGl2ZSB7XHJcbiAgQElucHV0KCkgY2FtZXJhT3B0aW9uczogTkRpcmVjdGl2ZU9wdGlvbnM7XHJcbiAgQE91dHB1dCgpIG9uc3VjY2VzczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG9uZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZzdjogTkZpbGVJT1NlcnZpY2UpIHsgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycpIG1ldGhvZFRvSGFuZGxlTW91c2VDbGlja0FjdGlvbigpIHtcclxuICAgIHRoaXMuZ2V0UGljdHVyZSgpXHJcbiAgICAgIC50aGVuKHN1Y2VzcyA9PiB0aGlzLm9uc3VjY2Vzcy5lbWl0KHN1Y2VzcykpXHJcbiAgICAgIC5jYXRjaChlcnJvciA9PiB0aGlzLm9uZXJyb3IuZW1pdChlcnJvcikpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGljdHVyZSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5mc3YuZ2V0UGljdHVyZSh0aGlzLmNhbWVyYU9wdGlvbnMpLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgJ2Zvcm1EYXRhJzogcmVzLFxyXG4gICAgICAgICAgJ2VudGl0eU5hbWUnOiB0aGlzLmNhbWVyYU9wdGlvbnMuZW50aXR5TmFtZSxcclxuICAgICAgICAgICdtZXRhZGF0YSc6IHRoaXMuY2FtZXJhT3B0aW9ucy5tZXRhZGF0YVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5mc3YudXBsb2FkKG9wdGlvbnMpXHJcbiAgICAgICAgICAudGhlbih1cmkgPT4gcmVzb2x2ZSh1cmkpKVxyXG4gICAgICAgICAgLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XHJcbiAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19