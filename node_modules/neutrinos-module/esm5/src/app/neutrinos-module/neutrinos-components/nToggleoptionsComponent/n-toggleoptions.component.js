import { __decorate } from "tslib";
// import { MatSnackBar } from '@angular/material';
import { Component, Input, EventEmitter, Output } from '@angular/core';
var NToggleoptionsComponent = /** @class */ (function () {
    function NToggleoptionsComponent() {
        // options = {icon: 'home', value: 'home', disabled: false, 'checked': false}
        this.toggleOptions = [];
        this.align = 'horizontal';
        this.indexChange = new EventEmitter();
        this.valueChange = new EventEmitter();
    }
    // constructor(private snackbar: MatSnackBar) {
    // }
    NToggleoptionsComponent.prototype.ngOnInit = function () {
        if (this.checkNumber(this.checkedIndex)) {
            this.checkedIndex = Number(this.checkedIndex);
        }
        if (this.checkNumber(this.disabledIndex)) {
            this.disabledIndex = Number(this.disabledIndex);
        }
    };
    NToggleoptionsComponent.prototype.ngOnChanges = function (changes) {
        if (changes['checkedIndex'] && this.checkNumber(this.checkedIndex)) {
            this.checkedIndex = Number(this.checkedIndex);
        }
        else if (changes['disabledIndex'] && this.checkNumber(this.disabledIndex)) {
            this.disabledIndex = Number(this.disabledIndex);
        }
    };
    NToggleoptionsComponent.prototype.optionClicked = function (index) {
        if (this.toggleOptions && this.toggleOptions.length > 0) {
            this.indexChange.emit(index);
            if (this.toggleOptions[index] && this.toggleOptions[index].value) {
                this.valueChange.emit(this.toggleOptions[index].value);
            }
            else {
                // this.snackbar.open('Invalid toggle button value', 'OK');
            }
        }
        else {
            // this.snackbar.open('Invalid toggle options', 'OK');
        }
    };
    NToggleoptionsComponent.prototype.checkNumber = function (number) {
        if (number !== undefined && number !== null) {
            return Number.isNaN(Number(number));
        }
        return false;
    };
    __decorate([
        Input('toggleOptions')
    ], NToggleoptionsComponent.prototype, "toggleOptions", void 0);
    __decorate([
        Input('align')
    ], NToggleoptionsComponent.prototype, "align", void 0);
    __decorate([
        Input('disabledIndex')
    ], NToggleoptionsComponent.prototype, "disabledIndex", void 0);
    __decorate([
        Input('checkedIndex')
    ], NToggleoptionsComponent.prototype, "checkedIndex", void 0);
    __decorate([
        Input('value')
    ], NToggleoptionsComponent.prototype, "value", void 0);
    __decorate([
        Output()
    ], NToggleoptionsComponent.prototype, "indexChange", void 0);
    __decorate([
        Output()
    ], NToggleoptionsComponent.prototype, "valueChange", void 0);
    NToggleoptionsComponent = __decorate([
        Component({
            selector: 'n-toggleoptions',
            template: "<mat-button-toggle-group #group=\"matButtonToggleGroup\" [vertical]=\"align == 'vertical'? true: false\" [value]=\"value\">\r\n    <mat-button-toggle *ngFor=\"let option of toggleOptions; let i = index;\" [value]=\"option.value\" [disabled]=\"option.disabled || disabledIndex == i\" [checked]=\"option.checked || checkedIndex == i\" (click)=\"optionClicked(i)\" fxLayoutAlign=\"center center\">\r\n        <mat-icon *ngIf=\"option.icon\">{{option.icon}}</mat-icon>\r\n        <span *ngIf=\"!option.icon && option.value\">{{option.value}}</span>\r\n    </mat-button-toggle>\r\n</mat-button-toggle-group>"
        })
    ], NToggleoptionsComponent);
    return NToggleoptionsComponent;
}());
export { NToggleoptionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi10b2dnbGVvcHRpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1tb2R1bGUvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1tb2R1bGUvbmV1dHJpbm9zLWNvbXBvbmVudHMvblRvZ2dsZW9wdGlvbnNDb21wb25lbnQvbi10b2dnbGVvcHRpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsbURBQW1EO0FBQ25ELE9BQU8sRUFBRSxTQUFTLEVBQW9DLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBT3hHO0lBQUE7UUFDSSw2RUFBNkU7UUFDckQsa0JBQWEsR0FBRyxFQUFFLENBQUM7UUFDM0IsVUFBSyxHQUFHLFlBQVksQ0FBQztRQUkzQixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDakMsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBMEMvQyxDQUFDO0lBekNHLCtDQUErQztJQUMvQyxJQUFJO0lBRUosMENBQVEsR0FBUjtRQUNJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkQ7SUFFTCxDQUFDO0lBRUQsNkNBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ2hFLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNqRDthQUFNLElBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ3pFLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNuRDtJQUNMLENBQUM7SUFFRCwrQ0FBYSxHQUFiLFVBQWMsS0FBSztRQUNmLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDckQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0IsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFO2dCQUM5RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzFEO2lCQUFNO2dCQUNILDJEQUEyRDthQUM5RDtTQUNKO2FBQU07WUFDSCxzREFBc0Q7U0FDekQ7SUFDTCxDQUFDO0lBRU8sNkNBQVcsR0FBbkIsVUFBb0IsTUFBTTtRQUN0QixJQUFJLE1BQU0sS0FBSyxTQUFTLElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtZQUN6QyxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDdkM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBL0N1QjtRQUF2QixLQUFLLENBQUMsZUFBZSxDQUFDO2tFQUFvQjtJQUMzQjtRQUFmLEtBQUssQ0FBQyxPQUFPLENBQUM7MERBQXNCO0lBQ2I7UUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQztrRUFBZTtJQUNmO1FBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7aUVBQWM7SUFDcEI7UUFBZixLQUFLLENBQUMsT0FBTyxDQUFDOzBEQUFnQjtJQUNyQjtRQUFULE1BQU0sRUFBRTtnRUFBa0M7SUFDakM7UUFBVCxNQUFNLEVBQUU7Z0VBQWtDO0lBUmxDLHVCQUF1QjtRQUxuQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLHNtQkFBOEM7U0FDakQsQ0FBQztPQUVXLHVCQUF1QixDQWtEbkM7SUFBRCw4QkFBQztDQUFBLEFBbERELElBa0RDO1NBbERZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IE1hdFNuYWNrQmFyIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ24tdG9nZ2xlb3B0aW9ucycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vbi10b2dnbGVvcHRpb25zLnRlbXBsYXRlLmh0bWwnXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgTlRvZ2dsZW9wdGlvbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcbiAgICAvLyBvcHRpb25zID0ge2ljb246ICdob21lJywgdmFsdWU6ICdob21lJywgZGlzYWJsZWQ6IGZhbHNlLCAnY2hlY2tlZCc6IGZhbHNlfVxyXG4gICAgQElucHV0KCd0b2dnbGVPcHRpb25zJykgdG9nZ2xlT3B0aW9ucyA9IFtdO1xyXG4gICAgQElucHV0KCdhbGlnbicpIGFsaWduID0gJ2hvcml6b250YWwnO1xyXG4gICAgQElucHV0KCdkaXNhYmxlZEluZGV4JykgZGlzYWJsZWRJbmRleDtcclxuICAgIEBJbnB1dCgnY2hlY2tlZEluZGV4JykgY2hlY2tlZEluZGV4O1xyXG4gICAgQElucHV0KCd2YWx1ZScpIHZhbHVlIDogc3RyaW5nO1xyXG4gICAgQE91dHB1dCgpIGluZGV4Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgLy8gY29uc3RydWN0b3IocHJpdmF0ZSBzbmFja2JhcjogTWF0U25hY2tCYXIpIHtcclxuICAgIC8vIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGVja051bWJlcih0aGlzLmNoZWNrZWRJbmRleCkpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkSW5kZXggPSBOdW1iZXIodGhpcy5jaGVja2VkSW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tOdW1iZXIodGhpcy5kaXNhYmxlZEluZGV4KSkge1xyXG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkSW5kZXggPSBOdW1iZXIodGhpcy5kaXNhYmxlZEluZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICBpZiAoY2hhbmdlc1snY2hlY2tlZEluZGV4J10gJiYgdGhpcy5jaGVja051bWJlcih0aGlzLmNoZWNrZWRJbmRleCkpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkSW5kZXggPSBOdW1iZXIodGhpcy5jaGVja2VkSW5kZXgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY2hhbmdlc1snZGlzYWJsZWRJbmRleCddICYmIHRoaXMuY2hlY2tOdW1iZXIodGhpcy5kaXNhYmxlZEluZGV4KSkge1xyXG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkSW5kZXggPSBOdW1iZXIodGhpcy5kaXNhYmxlZEluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb3B0aW9uQ2xpY2tlZChpbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRvZ2dsZU9wdGlvbnMgJiYgdGhpcy50b2dnbGVPcHRpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5pbmRleENoYW5nZS5lbWl0KGluZGV4KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudG9nZ2xlT3B0aW9uc1tpbmRleF0gJiYgdGhpcy50b2dnbGVPcHRpb25zW2luZGV4XS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMudG9nZ2xlT3B0aW9uc1tpbmRleF0udmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5zbmFja2Jhci5vcGVuKCdJbnZhbGlkIHRvZ2dsZSBidXR0b24gdmFsdWUnLCAnT0snKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuc25hY2tiYXIub3BlbignSW52YWxpZCB0b2dnbGUgb3B0aW9ucycsICdPSycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrTnVtYmVyKG51bWJlcikge1xyXG4gICAgICAgIGlmIChudW1iZXIgIT09IHVuZGVmaW5lZCAmJiBudW1iZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5pc05hTihOdW1iZXIobnVtYmVyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG4iXX0=