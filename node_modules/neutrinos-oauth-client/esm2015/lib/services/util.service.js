/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/util.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, isDevMode } from '@angular/core';
import * as i0 from "@angular/core";
export class UtilService {
    constructor() {
        this.platformType = this.checkPlatformType();
        this.getEnvironment();
    }
    /**
     * Returns 'mobile' or 'browser' based on the platform
     * @return {?}
     */
    getPlatformType() {
        return this.platformType;
    }
    /**
     * Returns env from neutrinos seed app
     * @private
     * @return {?}
     */
    getEnvironment() {
        if (window['neutrinos'] && window['neutrinos']['environments'] && window['neutrinos']['environments']['properties']) {
            // Break the refernce
            this.environment = JSON.parse(JSON.stringify(window['neutrinos']['environments']['properties']));
            // Append the url with / if ssdUrl does not end with /
            if (this.environment['ssdURL']) {
                this.environment['ssdURL'] = this.environment['ssdURL'].endsWith('/') ? this.environment['ssdURL'] :
                    (this.environment['ssdURL'] + '/');
            }
            return;
        }
        /*For dev env only */
        this.environment = {
            ssdURL: 'http://localhost:8081/api/',
            useDefaultExceptionUI: true,
            isIDSEnabled: false,
            webAppMountpoint: '',
            production: true
        };
    }
    /**
     * Returns 'mobile' or 'browser' based on the platform
     * @private
     * @return {?}
     */
    checkPlatformType() {
        // tslint:disable-next-line: no-string-literal
        if (window['device'] && (window['device']['platform'] !== 'browser' || window['device']['platform'] !== 'Browser')) {
            return 'mobile';
            // tslint:disable-next-line: no-string-literal
        }
        else if (window['device'] && (window['device']['platform'] === 'browser' || window['device']['platform'] === 'Browser')) {
            return 'cordova_browser';
        }
        else {
            return 'browser';
        }
    }
    /*URL helper methods */
    /**
     * @return {?}
     */
    getBaseLoginPath() {
        return `${this.environment.ssdURL}login`;
    }
    /**
     * @param {?} redirectTo
     * @return {?}
     */
    getWebLoginUrl(redirectTo) {
        redirectTo = this.calcRedirectUrl(redirectTo);
        return `${this.getBaseLoginPath()}?redirectTo=${redirectTo}`;
    }
    /**
     * @return {?}
     */
    getMobileLoginUrl() {
        return `${this.getBaseLoginPath()}?isMobile=true`;
    }
    /**
     * @param {?} redirectTo
     * @return {?}
     */
    getWebLogoutUrl(redirectTo) {
        redirectTo = this.calcRedirectUrl(redirectTo);
        return `${this.environment.ssdURL}logout?redirectTo=${redirectTo}`;
    }
    /**
     * @return {?}
     */
    getMobileLogoutUrl() {
        return `${this.environment.ssdURL}logout?isMobile=true`;
    }
    /**
     * @return {?}
     */
    getUserInfoUrl() {
        return `${this.environment.ssdURL}user/info`;
    }
    /**
     * @return {?}
     */
    getSSDBasePath() {
        return `${this.environment.ssdURL}`;
    }
    /**
     *  Returns a absoulte url for the urlPath
     * @private
     * @param {?} urlPath - path relative to the current host
     * @return {?}
     */
    calcRedirectUrl(urlPath) {
        if (urlPath) {
            /** @type {?} */
            let host = new URL(window.location.href).origin;
            if (!isDevMode()) {
                // Append `webAppMountpoint` to host
                host = (this.environment.webAppMountpoint !== '' && this.environment.webAppMountpoint !== '/')
                    ? new URL(this.environment.webAppMountpoint, host).href : host;
                // Get user redirect path with `webAppMountpoint`
                /** @type {?} */
                const mountPointWithRedirect = new URL(urlPath, host).pathname;
                return host + mountPointWithRedirect;
            }
            else {
                return new URL(urlPath, host);
            }
        }
        else {
            return window.location.href;
        }
    }
    /**
     *
     * @param {?} property - environment property key
     * @return {?}
     */
    getEnvValue(property) {
        return this.environment[property];
    }
}
UtilService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UtilService.ctorParameters = () => [];
/** @nocollapse */ UtilService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UtilService_Factory() { return new UtilService(); }, token: UtilService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    UtilService.prototype.platformType;
    /**
     * @type {?}
     * @private
     */
    UtilService.prototype.environment;
}
//# sourceMappingURL=data:application/json;base64,