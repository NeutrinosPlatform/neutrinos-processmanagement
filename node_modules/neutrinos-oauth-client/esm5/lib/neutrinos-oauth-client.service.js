/**
 * @fileoverview added by tsickle
 * Generated from: lib/neutrinos-oauth-client.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __awaiter, __generator } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Subject } from 'rxjs';
import { UtilService } from './services/util.service';
import * as i0 from "@angular/core";
import * as i1 from "./services/util.service";
import * as i2 from "@angular/common/http";
var NeutrinosOAuthClientService = /** @class */ (function () {
    function NeutrinosOAuthClientService(util, http) {
        this.util = util;
        this.http = http;
        this.cookieName = 'connect.sid';
        this.authStateSubject = new Subject();
    }
    Object.defineProperty(NeutrinosOAuthClientService.prototype, "userInfo", {
        /**
         * Get user info and tokens of the current logged in user
         */
        get: /**
         * Get user info and tokens of the current logged in user
         * @return {?}
         */
        function () {
            return this.currentUserInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NeutrinosOAuthClientService.prototype, "isLoggedIn", {
        get: /**
         * @return {?}
         */
        function () {
            return this.currentUserInfo ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} userInfo
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.setUserInfo = /**
     * @private
     * @param {?} userInfo
     * @return {?}
     */
    function (userInfo) {
        this.currentUserInfo = userInfo;
    };
    /**
     * Performs authentication based on configuration and returns user info for mobile env and
     * for web app user info is stored in memory. Call userInfo getter method to retrieve userinfo
     * @param redirectBackUrl - url to redirect back to when authentication is done. Valid only for Web.
     * For mobile use the Promise returned to perform post authentication actions
     */
    /**
     * Performs authentication based on configuration and returns user info for mobile env and
     * for web app user info is stored in memory. Call userInfo getter method to retrieve userinfo
     * @param {?=} redirectBackUrl - url to redirect back to when authentication is done. Valid only for Web.
     * For mobile use the Promise returned to perform post authentication actions
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.login = /**
     * Performs authentication based on configuration and returns user info for mobile env and
     * for web app user info is stored in memory. Call userInfo getter method to retrieve userinfo
     * @param {?=} redirectBackUrl - url to redirect back to when authentication is done. Valid only for Web.
     * For mobile use the Promise returned to perform post authentication actions
     * @return {?}
     */
    function (redirectBackUrl) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            if (_this.util.getEnvValue('isIDSEnabled') === 'false') {
                return reject({ message: 'IDS is not enabled in environments' });
            }
            if (_this.util.getPlatformType() === 'browser') {
                _this.loginWithRedirect(redirectBackUrl);
                return;
            }
            _this.loginWithInAppBrowser()
                .then((/**
             * @param {?} tokenset
             * @return {?}
             */
            function (tokenset) {
                return resolve(tokenset);
            }))
                .catch((/**
             * @param {?} authError
             * @return {?}
             */
            function (authError) {
                return reject(authError);
            }));
        }));
    };
    /**
     *
     * @param loginUrl - Login url where SSD is hosted
     */
    /**
     *
     * @private
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.loginWithInAppBrowser = /**
     *
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var scriptURLS, script, inAppBrowserRef, executeScriptCB, exitCB;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        scriptURLS = ['/interaction/', '/auth-provider/return'];
                        // execute JS only for this urls
                        return [4 /*yield*/, this.getScript()];
                    case 1:
                        script = _a.sent();
                        // Get JS which stores guid and device details in local storage of webview
                        inAppBrowserRef = cordova.InAppBrowser.open(this.util.getMobileLoginUrl(), '_blank');
                        executeScriptCB = (/**
                         * @param {?} event
                         * @return {?}
                         */
                        function (event) {
                            if (event && event.hasOwnProperty('type') && event.hasOwnProperty('url') && event.type === 'loadstop'
                                && _this.isURLMatch(event.url, scriptURLS)) {
                                inAppBrowserRef.executeScript({ code: script }, (/**
                                 * @return {?}
                                 */
                                function () { }));
                            }
                        });
                        inAppBrowserRef.addEventListener('loadstop', executeScriptCB);
                        exitCB = (/**
                         * @return {?}
                         */
                        function () {
                            return reject({ code: 'auth-cancel', message: 'Authentication cancelled by user' });
                        });
                        inAppBrowserRef.addEventListener('message', (/**
                         * @param {?} message
                         * @return {?}
                         */
                        function (message) {
                            if (message && message.data && message.data.auth && message.data.auth === 'success') {
                                inAppBrowserRef.removeEventListener('exit', exitCB);
                                inAppBrowserRef.close();
                                _this.persistCookies();
                                _this.getUserInfo().then((/**
                                 * @param {?} tokenset
                                 * @return {?}
                                 */
                                function (tokenset) {
                                    return resolve(tokenset);
                                })).catch((/**
                                 * @param {?} authErr
                                 * @return {?}
                                 */
                                function (authErr) {
                                    return reject(authErr);
                                }));
                            }
                        }));
                        // settle the promise if user closed the in app browser manually
                        inAppBrowserRef.addEventListener('exit', exitCB);
                        return [2 /*return*/];
                }
            });
        }); }));
    };
    /**
     * @private
     * @param {?} url
     * @param {?} compareWith
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.isURLMatch = /**
     * @private
     * @param {?} url
     * @param {?} compareWith
     * @return {?}
     */
    function (url, compareWith) {
        return compareWith.some((/**
         * @param {?} u
         * @return {?}
         */
        function (u) { return url.includes(u); }));
    };
    /**
     * Returns JS as a string to be executed in inAppBrowser which sets guid and device details in localStorage
     */
    /**
     * Returns JS as a string to be executed in inAppBrowser which sets guid and device details in localStorage
     * @private
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.getScript = /**
     * Returns JS as a string to be executed in inAppBrowser which sets guid and device details in localStorage
     * @private
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var deviceDetails, guid, guidScript, script;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deviceDetails = JSON.stringify(window['device']) || {};
                        return [4 /*yield*/, this.getuniqueDeviceID()];
                    case 1:
                        guid = _a.sent();
                        guidScript = guid ? "localStorage.setItem('guid', '" + guid + "')" : '';
                        script = guidScript + "\n          localStorage.setItem('additionalInfo', '" + deviceDetails + "')\n          window.isScriptExecuted = true;";
                        return [2 /*return*/, script];
                }
            });
        });
    };
    /**
     * @private
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.getuniqueDeviceID = /**
     * @private
     * @return {?}
     */
    function () {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            window['plugins'].uniqueDeviceID.get((/**
             * @param {?} guid
             * @return {?}
             */
            function (guid) {
                return resolve(guid);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return resolve(null);
            }));
        }));
    };
    /**
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.getUserInfo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var headers = new HttpHeaders();
            /*Edge case: Userinfo is retreived from cache when login page is opened and user cancels the login attempt  */
            headers = headers.set('Cache-Control', 'no-cache');
            headers = headers.set('Pragma', 'no-cache');
            _this.http.get(_this.util.getUserInfoUrl(), { headers: headers }).subscribe((/**
             * @param {?} tokenset
             * @return {?}
             */
            function (tokenset) {
                _this.setUserInfo(tokenset);
                return resolve(tokenset);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.destroyClientSession();
                return reject(error);
            }));
        }));
    };
    /*If SSD throws 401 during any http request due to refresh token expiry, cookie expiry or access revoke nullify the userinfo in memory
    and emit authState event  */
    /*If SSD throws 401 during any http request due to refresh token expiry, cookie expiry or access revoke nullify the userinfo in memory
      and emit authState event  */
    /**
     * @param {?} errorResponse
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.removeUserInfo = /*If SSD throws 401 during any http request due to refresh token expiry, cookie expiry or access revoke nullify the userinfo in memory
      and emit authState event  */
    /**
     * @param {?} errorResponse
     * @return {?}
     */
    function (errorResponse) {
        this.destroyClientSession();
        this.authStateSubject.next(errorResponse);
    };
    /**
     * Returns event when Auth state has changed due to session expiry, access revoke or cookie expiry.
     */
    /**
     * Returns event when Auth state has changed due to session expiry, access revoke or cookie expiry.
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.authState = /**
     * Returns event when Auth state has changed due to session expiry, access revoke or cookie expiry.
     * @return {?}
     */
    function () {
        return this.authStateSubject.asObservable();
    };
    /**
     * @private
     * @param {?} redirectBackUrl
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.loginWithRedirect = /**
     * @private
     * @param {?} redirectBackUrl
     * @return {?}
     */
    function (redirectBackUrl) {
        window.location.href = this.util.getWebLoginUrl(redirectBackUrl);
    };
    /**
     * Persists cookies in localStorage to be used during next app launch only for IOS
     */
    /**
     * Persists cookies in localStorage to be used during next app launch only for IOS
     * @private
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.persistCookies = /**
     * Persists cookies in localStorage to be used during next app launch only for IOS
     * @private
     * @return {?}
     */
    function () {
        if (window['device'] && window['device'].platform === 'iOS') {
            this.getCookie(this.cookieName, this.util.getSSDBasePath())
                .then((/**
             * @param {?} connectSid
             * @return {?}
             */
            function (connectSid) {
                localStorage.setItem('connectSid', connectSid);
            }));
        }
    };
    /**
     * Restores the connect.sid cookie from session storage during app bootstrap if device is mobile
     */
    /**
     * Restores the connect.sid cookie from session storage during app bootstrap if device is mobile
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.restoreCookies = /**
     * Restores the connect.sid cookie from session storage during app bootstrap if device is mobile
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var connectSidCookie;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        connectSidCookie = localStorage.getItem('connectSid');
                        if (!connectSidCookie) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.setCookie(this.util.getSSDBasePath(), this.cookieName, connectSidCookie)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *
     * @param url - site where the cookie is stored
     * @param cookieName - name of the cookie to restore
     * @param cookieValue - value of the cookie to restore
     */
    /**
     *
     * @private
     * @param {?} url - site where the cookie is stored
     * @param {?} cookieName - name of the cookie to restore
     * @param {?} cookieValue - value of the cookie to restore
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.setCookie = /**
     *
     * @private
     * @param {?} url - site where the cookie is stored
     * @param {?} cookieName - name of the cookie to restore
     * @param {?} cookieValue - value of the cookie to restore
     * @return {?}
     */
    function (url, cookieName, cookieValue) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            cookieMaster.setCookieValue(url, cookieName, cookieValue, (/**
             * @return {?}
             */
            function () {
                return resolve(true);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return reject(error);
            }));
        }));
    };
    /**
     *
     * @param  cookieName - name of the cookie to retrieve
     * @param   url - site where the cookie is stored
     */
    /**
     *
     * @private
     * @param {?} cookieName - name of the cookie to retrieve
     * @param {?} url - site where the cookie is stored
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.getCookie = /**
     *
     * @private
     * @param {?} cookieName - name of the cookie to retrieve
     * @param {?} url - site where the cookie is stored
     * @return {?}
     */
    function (cookieName, url) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            cookieMaster.getCookieValue(url, cookieName, (/**
             * @param {?} cookie
             * @return {?}
             */
            function (cookie) {
                return resolve(cookie.cookieValue);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return reject(error);
            }));
        }));
    };
    /**
     * Logout the current user, destroys session between client and server.
     * @param redirectBackUrl - URL where the user is navigated post logout. Valid only for Web.
     * For mobile use the Promise returned to perform post authentication actions
     */
    /**
     * Logout the current user, destroys session between client and server.
     * @param {?=} redirectBackUrl - URL where the user is navigated post logout. Valid only for Web.
     * For mobile use the Promise returned to perform post authentication actions
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.logout = /**
     * Logout the current user, destroys session between client and server.
     * @param {?=} redirectBackUrl - URL where the user is navigated post logout. Valid only for Web.
     * For mobile use the Promise returned to perform post authentication actions
     * @return {?}
     */
    function (redirectBackUrl) {
        var _this = this;
        /** @type {?} */
        var logoutUrl = (this.util.getPlatformType() === 'browser') ? this.util.getWebLogoutUrl(redirectBackUrl)
            : this.util.getMobileLogoutUrl();
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.http.get(logoutUrl).subscribe((/**
             * @param {?} idsLogoutInfo
             * @return {?}
             */
            function (idsLogoutInfo) {
                _this.destroyIDSSession(idsLogoutInfo)
                    .then((/**
                 * @return {?}
                 */
                function () {
                    return resolve();
                }))
                    .catch((/**
                 * @param {?} logoutErr
                 * @return {?}
                 */
                function (logoutErr) {
                    return reject(logoutErr);
                }));
            }), (/**
             * @param {?} logoutError
             * @return {?}
             */
            function (logoutError) {
                return reject(logoutError);
            }));
        }));
    };
    /**
     * @private
     * @param {?} idsInfo
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.destroyIDSSession = /**
     * @private
     * @param {?} idsInfo
     * @return {?}
     */
    function (idsInfo) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            if (idsInfo['sessionExists'] === false) {
                // No session present with SSD due to cookie expiry
                _this.destroyClientSession();
                _this.authStateSubject.next({ code: 'NO_SESSION', message: 'User session has already expired' });
                return resolve();
            }
            if (_this.util.getPlatformType() === 'browser') {
                window.location.href = idsInfo['idsURL'];
            }
            else {
                _this.logoutWithInappBrowser(idsInfo['idsURL'])
                    .then((/**
                 * @return {?}
                 */
                function () {
                    return resolve();
                }))
                    .catch((/**
                 * @param {?} sessionError
                 * @return {?}
                 */
                function (sessionError) {
                    return reject(sessionError);
                }));
            }
        }));
    };
    /**
     *
     * @param idsLogoutUrl - IDS logout url
     * Opens InApp browser and destroys the session
     */
    /**
     *
     * @private
     * @param {?} idsLogoutUrl - IDS logout url
     * Opens InApp browser and destroys the session
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.logoutWithInappBrowser = /**
     *
     * @private
     * @param {?} idsLogoutUrl - IDS logout url
     * Opens InApp browser and destroys the session
     * @return {?}
     */
    function (idsLogoutUrl) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var exitCB = (/**
             * @return {?}
             */
            function () {
                return reject({ code: 'auth-cancel', message: 'Authentication cancelled by user' });
            });
            /** @type {?} */
            var inAppBrowserRef = cordova.InAppBrowser.open(idsLogoutUrl, '_blank');
            inAppBrowserRef.addEventListener('message', (/**
             * @param {?} message
             * @return {?}
             */
            function (message) {
                // Remove exit listener if script closed the in app browser
                if (message && message.data && message.data.auth && message.data.auth === 'success') {
                    inAppBrowserRef.removeEventListener('exit', exitCB);
                    inAppBrowserRef.close();
                    _this.destroyClientSession();
                    return resolve();
                }
            }));
            // settle the promise if user closed the in app browser manually
            inAppBrowserRef.addEventListener('exit', exitCB);
        }));
    };
    /*Remove persisted cookies in local storage and nullify user info */
    /*Remove persisted cookies in local storage and nullify user info */
    /**
     * @private
     * @return {?}
     */
    NeutrinosOAuthClientService.prototype.destroyClientSession = /*Remove persisted cookies in local storage and nullify user info */
    /**
     * @private
     * @return {?}
     */
    function () {
        this.setUserInfo(null);
        window.localStorage.removeItem('connectSid');
    };
    NeutrinosOAuthClientService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NeutrinosOAuthClientService.ctorParameters = function () { return [
        { type: UtilService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ NeutrinosOAuthClientService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NeutrinosOAuthClientService_Factory() { return new NeutrinosOAuthClientService(i0.ɵɵinject(i1.UtilService), i0.ɵɵinject(i2.HttpClient)); }, token: NeutrinosOAuthClientService, providedIn: "root" });
    return NeutrinosOAuthClientService;
}());
export { NeutrinosOAuthClientService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NeutrinosOAuthClientService.prototype.cookieName;
    /**
     * @type {?}
     * @private
     */
    NeutrinosOAuthClientService.prototype.currentUserInfo;
    /**
     * @type {?}
     * @private
     */
    NeutrinosOAuthClientService.prototype.authStateSubject;
    /**
     * @type {?}
     * @private
     */
    NeutrinosOAuthClientService.prototype.util;
    /**
     * @type {?}
     * @private
     */
    NeutrinosOAuthClientService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,