/**
 * @fileoverview added by tsickle
 * Generated from: lib/cookie-interceptor.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { UtilService } from './services/util.service';
import { NeutrinosOAuthClientService } from './neutrinos-oauth-client.service';
import * as i0 from "@angular/core";
import * as i1 from "./services/util.service";
import * as i2 from "./neutrinos-oauth-client.service";
var CookieInterceptorService = /** @class */ (function () {
    function CookieInterceptorService(utilService, neutrinosOAuthClientService) {
        this.utilService = utilService;
        this.neutrinosOAuthClientService = neutrinosOAuthClientService;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    CookieInterceptorService.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        /* withCredentials adds cookies to the request for cross site (Only ssd urls).*/
        /** @type {?} */
        var baseUrl = this.utilService.getSSDBasePath();
        /** @type {?} */
        var isSSD = (baseUrl !== '' && request.url.includes(baseUrl));
        if (isSSD && this.isCrossDomain(baseUrl)) {
            request = request.clone({
                withCredentials: true
            });
        }
        return next.handle(request).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return event;
        })), catchError((/**
         * @param {?} errorResponse
         * @return {?}
         */
        function (errorResponse) {
            /*Intercept all requests and remove userinfo and cookies when status is 401 with code SESSION_EXPIRED, which means
            * cookies have expired or access has been revoked by the OAuth providers hence IDS rejected.  */
            if (errorResponse && errorResponse.hasOwnProperty('status') && errorResponse.status === 401 &&
                errorResponse.error.hasOwnProperty('code')) {
                _this.neutrinosOAuthClientService.removeUserInfo(errorResponse.error);
            }
            return throwError(errorResponse);
        })));
    };
    /**
     * Returns true is the ssd url is running on a different domain than where UI is hosted.
     * For mobile Returns false always since UI is already bundled with cordova
     * If the user is not using IDS and is cross domain isIDSEnabled can be set to false to skip adding withCredentials
     * @param ssdUrl - string
     */
    /**
     * Returns true is the ssd url is running on a different domain than where UI is hosted.
     * For mobile Returns false always since UI is already bundled with cordova
     * If the user is not using IDS and is cross domain isIDSEnabled can be set to false to skip adding withCredentials
     * @private
     * @param {?} ssdUrl - string
     * @return {?}
     */
    CookieInterceptorService.prototype.isCrossDomain = /**
     * Returns true is the ssd url is running on a different domain than where UI is hosted.
     * For mobile Returns false always since UI is already bundled with cordova
     * If the user is not using IDS and is cross domain isIDSEnabled can be set to false to skip adding withCredentials
     * @private
     * @param {?} ssdUrl - string
     * @return {?}
     */
    function (ssdUrl) {
        try {
            ssdUrl = new URL(ssdUrl);
            return (this.utilService.getPlatformType() === 'browser' && (ssdUrl.host !== location.host)
                && this.utilService.getEnvValue('isIDSEnabled') === 'true');
        }
        catch (e) {
            console.error(e);
        }
    };
    CookieInterceptorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CookieInterceptorService.ctorParameters = function () { return [
        { type: UtilService },
        { type: NeutrinosOAuthClientService }
    ]; };
    /** @nocollapse */ CookieInterceptorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CookieInterceptorService_Factory() { return new CookieInterceptorService(i0.ɵɵinject(i1.UtilService), i0.ɵɵinject(i2.NeutrinosOAuthClientService)); }, token: CookieInterceptorService, providedIn: "root" });
    return CookieInterceptorService;
}());
export { CookieInterceptorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CookieInterceptorService.prototype.utilService;
    /**
     * @type {?}
     * @private
     */
    CookieInterceptorService.prototype.neutrinosOAuthClientService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWludGVyY2VwdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZXV0cmlub3Mtb2F1dGgtY2xpZW50LyIsInNvdXJjZXMiOlsibGliL2Nvb2tpZS1pbnRlcmNlcHRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7O0FBRS9FO0lBS0Usa0NBQW9CLFdBQXdCLEVBQVUsMkJBQXdEO1FBQTFGLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQVUsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtJQUFJLENBQUM7Ozs7OztJQUVuSCw0Q0FBUzs7Ozs7SUFBVCxVQUFVLE9BQXlCLEVBQUUsSUFBaUI7UUFBdEQsaUJBcUJDOzs7WUFsQk8sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFOztZQUMzQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLEtBQUssRUFBRSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9ELElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDeEMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0JBQ3RCLGVBQWUsRUFBRSxJQUFJO2FBQ3RCLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxLQUFLO1lBQ3hDLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxFQUFDLEVBQUUsVUFBVTs7OztRQUFDLFVBQUMsYUFBZ0M7WUFDOUM7NEdBQ2dHO1lBQ2hHLElBQUksYUFBYSxJQUFJLGFBQWEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxHQUFHO2dCQUN6RixhQUFhLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDNUMsS0FBSSxDQUFDLDJCQUEyQixDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdEU7WUFDRCxPQUFPLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNuQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVEOzs7OztPQUtHOzs7Ozs7Ozs7SUFDSyxnREFBYTs7Ozs7Ozs7SUFBckIsVUFBc0IsTUFBTTtRQUMxQixJQUFJO1lBQ0YsTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxLQUFLLFNBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQzttQkFDdEYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEtBQUssTUFBTSxDQUFDLENBQUM7U0FDL0Q7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEI7SUFFSCxDQUFDOztnQkE3Q0YsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFMUSxXQUFXO2dCQUNYLDJCQUEyQjs7O21DQUxwQztDQXNEQyxBQS9DRCxJQStDQztTQTVDWSx3QkFBd0I7Ozs7OztJQUV2QiwrQ0FBZ0M7Ozs7O0lBQUUsK0RBQWdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cEhhbmRsZXIsIEh0dHBFdmVudCwgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBVdGlsU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvdXRpbC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTmV1dHJpbm9zT0F1dGhDbGllbnRTZXJ2aWNlIH0gZnJvbSAnLi9uZXV0cmlub3Mtb2F1dGgtY2xpZW50LnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29va2llSW50ZXJjZXB0b3JTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB1dGlsU2VydmljZTogVXRpbFNlcnZpY2UsIHByaXZhdGUgbmV1dHJpbm9zT0F1dGhDbGllbnRTZXJ2aWNlOiBOZXV0cmlub3NPQXV0aENsaWVudFNlcnZpY2UpIHsgfVxyXG5cclxuICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcblxyXG4gICAgLyogd2l0aENyZWRlbnRpYWxzIGFkZHMgY29va2llcyB0byB0aGUgcmVxdWVzdCBmb3IgY3Jvc3Mgc2l0ZSAoT25seSBzc2QgdXJscykuKi9cclxuICAgIGNvbnN0IGJhc2VVcmwgPSB0aGlzLnV0aWxTZXJ2aWNlLmdldFNTREJhc2VQYXRoKCk7XHJcbiAgICBjb25zdCBpc1NTRCA9IChiYXNlVXJsICE9PSAnJyAmJiByZXF1ZXN0LnVybC5pbmNsdWRlcyhiYXNlVXJsKSk7XHJcbiAgICBpZiAoaXNTU0QgJiYgdGhpcy5pc0Nyb3NzRG9tYWluKGJhc2VVcmwpKSB7XHJcbiAgICAgIHJlcXVlc3QgPSByZXF1ZXN0LmNsb25lKHtcclxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCkucGlwZShtYXAoZXZlbnQgPT4ge1xyXG4gICAgICByZXR1cm4gZXZlbnQ7XHJcbiAgICB9KSwgY2F0Y2hFcnJvcigoZXJyb3JSZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcclxuICAgICAgLypJbnRlcmNlcHQgYWxsIHJlcXVlc3RzIGFuZCByZW1vdmUgdXNlcmluZm8gYW5kIGNvb2tpZXMgd2hlbiBzdGF0dXMgaXMgNDAxIHdpdGggY29kZSBTRVNTSU9OX0VYUElSRUQsIHdoaWNoIG1lYW5zXHJcbiAgICAgICogY29va2llcyBoYXZlIGV4cGlyZWQgb3IgYWNjZXNzIGhhcyBiZWVuIHJldm9rZWQgYnkgdGhlIE9BdXRoIHByb3ZpZGVycyBoZW5jZSBJRFMgcmVqZWN0ZWQuICAqL1xyXG4gICAgICBpZiAoZXJyb3JSZXNwb25zZSAmJiBlcnJvclJlc3BvbnNlLmhhc093blByb3BlcnR5KCdzdGF0dXMnKSAmJiBlcnJvclJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxICYmXHJcbiAgICAgICAgZXJyb3JSZXNwb25zZS5lcnJvci5oYXNPd25Qcm9wZXJ0eSgnY29kZScpKSB7XHJcbiAgICAgICAgdGhpcy5uZXV0cmlub3NPQXV0aENsaWVudFNlcnZpY2UucmVtb3ZlVXNlckluZm8oZXJyb3JSZXNwb25zZS5lcnJvcik7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3JSZXNwb25zZSk7XHJcbiAgICB9KSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRydWUgaXMgdGhlIHNzZCB1cmwgaXMgcnVubmluZyBvbiBhIGRpZmZlcmVudCBkb21haW4gdGhhbiB3aGVyZSBVSSBpcyBob3N0ZWQuXHJcbiAgICogRm9yIG1vYmlsZSBSZXR1cm5zIGZhbHNlIGFsd2F5cyBzaW5jZSBVSSBpcyBhbHJlYWR5IGJ1bmRsZWQgd2l0aCBjb3Jkb3ZhXHJcbiAgICogSWYgdGhlIHVzZXIgaXMgbm90IHVzaW5nIElEUyBhbmQgaXMgY3Jvc3MgZG9tYWluIGlzSURTRW5hYmxlZCBjYW4gYmUgc2V0IHRvIGZhbHNlIHRvIHNraXAgYWRkaW5nIHdpdGhDcmVkZW50aWFsc1xyXG4gICAqIEBwYXJhbSBzc2RVcmwgLSBzdHJpbmdcclxuICAgKi9cclxuICBwcml2YXRlIGlzQ3Jvc3NEb21haW4oc3NkVXJsKTogYm9vbGVhbiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBzc2RVcmwgPSBuZXcgVVJMKHNzZFVybCk7XHJcbiAgICAgIHJldHVybiAodGhpcy51dGlsU2VydmljZS5nZXRQbGF0Zm9ybVR5cGUoKSA9PT0gJ2Jyb3dzZXInICYmIChzc2RVcmwuaG9zdCAhPT0gbG9jYXRpb24uaG9zdClcclxuICAgICAgICAmJiB0aGlzLnV0aWxTZXJ2aWNlLmdldEVudlZhbHVlKCdpc0lEU0VuYWJsZWQnKSA9PT0gJ3RydWUnKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufVxyXG4iXX0=