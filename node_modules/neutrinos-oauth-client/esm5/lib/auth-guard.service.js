/**
 * @fileoverview added by tsickle
 * Generated from: lib/auth-guard.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { NeutrinosOAuthClientService } from './neutrinos-oauth-client.service';
import * as i0 from "@angular/core";
import * as i1 from "./neutrinos-oauth-client.service";
import * as i2 from "@angular/router";
var NeutrinosAuthGuardService = /** @class */ (function () {
    function NeutrinosAuthGuardService(_neutrinosOAuthClientService, _router, _arouter) {
        this._neutrinosOAuthClientService = _neutrinosOAuthClientService;
        this._router = _router;
        this._arouter = _arouter;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    NeutrinosAuthGuardService.prototype.canActivate = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.currUrl = state.url;
            if (_this._neutrinosOAuthClientService.isLoggedIn) {
                return resolve(true);
            }
            else {
                _this._neutrinosOAuthClientService.login().then((/**
                 * @param {?} tokenSet
                 * @return {?}
                 */
                function (tokenSet) {
                    _this._router.navigate([_this.currUrl]);
                    return resolve(true);
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    console.error(err);
                    if (err && err.code == 'auth-cancel') {
                        // Added setTimeout for reloading the current route
                        setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            _this._router.navigateByUrl(_this.currUrl, { skipLocationChange: true }).then((/**
                             * @return {?}
                             */
                            function () {
                                return resolve(false);
                            }));
                        }), 500);
                    }
                    else {
                        return resolve(false);
                    }
                }));
            }
        }));
    };
    NeutrinosAuthGuardService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NeutrinosAuthGuardService.ctorParameters = function () { return [
        { type: NeutrinosOAuthClientService },
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    /** @nocollapse */ NeutrinosAuthGuardService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NeutrinosAuthGuardService_Factory() { return new NeutrinosAuthGuardService(i0.ɵɵinject(i1.NeutrinosOAuthClientService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i2.ActivatedRoute)); }, token: NeutrinosAuthGuardService, providedIn: "root" });
    return NeutrinosAuthGuardService;
}());
export { NeutrinosAuthGuardService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NeutrinosAuthGuardService.prototype.currUrl;
    /**
     * @type {?}
     * @private
     */
    NeutrinosAuthGuardService.prototype._neutrinosOAuthClientService;
    /**
     * @type {?}
     * @private
     */
    NeutrinosAuthGuardService.prototype._router;
    /**
     * @type {?}
     * @private
     */
    NeutrinosAuthGuardService.prototype._arouter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLW9hdXRoLWNsaWVudC8iLCJzb3VyY2VzIjpbImxpYi9hdXRoLWd1YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQXVCLE1BQU0sRUFBaUMsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQUUvRTtJQU9FLG1DQUFvQiw0QkFBeUQsRUFBVSxPQUFlLEVBQVUsUUFBd0I7UUFBcEgsaUNBQTRCLEdBQTVCLDRCQUE0QixDQUE2QjtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFnQjtJQUFJLENBQUM7Ozs7OztJQUU3SSwrQ0FBVzs7Ozs7SUFBWCxVQUFZLEtBQTZCLEVBQUUsS0FBMEI7UUFBckUsaUJBMEJDO1FBeEJDLE9BQU8sSUFBSSxPQUFPOzs7OztRQUFFLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDbEMsS0FBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3pCLElBQUcsS0FBSSxDQUFDLDRCQUE0QixDQUFDLFVBQVUsRUFBRTtnQkFDL0MsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDdEI7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLDRCQUE0QixDQUFDLEtBQUssRUFBRSxDQUFDLElBQUk7Ozs7Z0JBQUMsVUFBQSxRQUFRO29CQUNyRCxLQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO29CQUN0QyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdkIsQ0FBQyxFQUFDO3FCQUNELEtBQUs7Ozs7Z0JBQUMsVUFBQSxHQUFHO29CQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ25CLElBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksYUFBYSxFQUFFO3dCQUNuQyxtREFBbUQ7d0JBQ25ELFVBQVU7Ozt3QkFBQzs0QkFDVCxLQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFJLENBQUMsT0FBTyxFQUFDLEVBQUMsa0JBQWtCLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFJOzs7NEJBQUM7Z0NBQ3ZFLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDOzRCQUN4QixDQUFDLEVBQUMsQ0FBQzt3QkFDTCxDQUFDLEdBQUUsR0FBRyxDQUFDLENBQUM7cUJBQ1Q7eUJBQU07d0JBQ0wsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ3ZCO2dCQUNILENBQUMsRUFBQyxDQUFBO2FBQ0g7UUFDSCxDQUFDLEVBQUMsQ0FBQTtJQUNKLENBQUM7O2dCQW5DRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQUpRLDJCQUEyQjtnQkFEVSxNQUFNO2dCQUEzQyxjQUFjOzs7b0NBRHZCO0NBeUNDLEFBckNELElBcUNDO1NBbENZLHlCQUF5Qjs7Ozs7O0lBRXBDLDRDQUFnQjs7Ozs7SUFFSixpRUFBaUU7Ozs7O0lBQUUsNENBQXVCOzs7OztJQUFFLDZDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlclN0YXRlU25hcHNob3QsIFJvdXRlciwgUm91dGUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBOZXV0cmlub3NPQXV0aENsaWVudFNlcnZpY2UgfSBmcm9tICcuL25ldXRyaW5vcy1vYXV0aC1jbGllbnQuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZXV0cmlub3NBdXRoR3VhcmRTZXJ2aWNlIHtcclxuXHJcbiAgcHJpdmF0ZSBjdXJyVXJsO1xyXG4gIFxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX25ldXRyaW5vc09BdXRoQ2xpZW50U2VydmljZTogTmV1dHJpbm9zT0F1dGhDbGllbnRTZXJ2aWNlLCBwcml2YXRlIF9yb3V0ZXI6IFJvdXRlciwgcHJpdmF0ZSBfYXJvdXRlcjogQWN0aXZhdGVkUm91dGUpIHsgfVxyXG5cclxuICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBQcm9taXNlPGJvb2xlYW4+ICAge1xyXG4gICAgXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UgKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5jdXJyVXJsID0gc3RhdGUudXJsO1xyXG4gICAgICBpZih0aGlzLl9uZXV0cmlub3NPQXV0aENsaWVudFNlcnZpY2UuaXNMb2dnZWRJbikge1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuX25ldXRyaW5vc09BdXRoQ2xpZW50U2VydmljZS5sb2dpbigpLnRoZW4odG9rZW5TZXQgPT4ge1xyXG4gICAgICAgICAgdGhpcy5fcm91dGVyLm5hdmlnYXRlKFt0aGlzLmN1cnJVcmxdKTtcclxuICAgICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgICBpZihlcnIgJiYgZXJyLmNvZGUgPT0gJ2F1dGgtY2FuY2VsJykge1xyXG4gICAgICAgICAgICAvLyBBZGRlZCBzZXRUaW1lb3V0IGZvciByZWxvYWRpbmcgdGhlIGN1cnJlbnQgcm91dGVcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5fcm91dGVyLm5hdmlnYXRlQnlVcmwodGhpcy5jdXJyVXJsLHtza2lwTG9jYXRpb25DaGFuZ2U6IHRydWV9KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGZhbHNlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGZhbHNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH0gXHJcblxyXG59XHJcbiJdfQ==