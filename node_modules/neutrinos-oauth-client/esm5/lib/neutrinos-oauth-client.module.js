/**
 * @fileoverview added by tsickle
 * Generated from: lib/neutrinos-oauth-client.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, APP_INITIALIZER } from '@angular/core';
import { NeutrinosOauthComponent } from './neutrinos-oauth.component';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { CookieInterceptorService } from './cookie-interceptor.service';
import { NeutrinosOAuthClientService } from './neutrinos-oauth-client.service';
import { UtilService } from './services/util.service';
/**
 * @param {?} neutrinosOAuthService
 * @param {?} utilService
 * @return {?}
 */
export function getTokens(neutrinosOAuthService, utilService) {
    return (/**
     * @return {?}
     */
    function () {
        /**
         * For ios restore the cookies and get userInfo since iOS webview does not
         * persisit the cookie between app launches
         */
        if (utilService.getEnvValue('isIDSEnabled') === 'true') {
            if (window['device'] && window['device'].platform === 'iOS') {
                return neutrinosOAuthService.restoreCookies().then((/**
                 * @param {?} cookieExist
                 * @return {?}
                 */
                function (cookieExist) {
                    console.log('cookieExist' + cookieExist);
                    cookieExist ? neutrinosOAuthService.getUserInfo()
                        .catch((/**
                     * @param {?} userInfoErr
                     * @return {?}
                     */
                    function (userInfoErr) {
                        console.log(userInfoErr);
                    })) : null;
                }));
            }
            else {
                // Cannot get cookie for cross domain using JS. hence calling userinfo always
                return neutrinosOAuthService.getUserInfo()
                    .catch((/**
                 * @param {?} userInfoErr
                 * @return {?}
                 */
                function (userInfoErr) {
                    console.log(userInfoErr);
                }));
            }
        }
    });
}
// @dynamic (https://github.com/ng-packagr/ng-packagr/issues/641)
var NeutrinosOAuthClientModule = /** @class */ (function () {
    function NeutrinosOAuthClientModule() {
    }
    NeutrinosOAuthClientModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NeutrinosOauthComponent],
                    imports: [
                        HttpClientModule
                    ],
                    providers: [
                        {
                            provide: HTTP_INTERCEPTORS,
                            useClass: CookieInterceptorService,
                            multi: true
                        },
                        {
                            provide: APP_INITIALIZER,
                            useFactory: getTokens,
                            deps: [NeutrinosOAuthClientService, UtilService],
                            multi: true
                        },
                    ]
                },] }
    ];
    return NeutrinosOAuthClientModule;
}());
export { NeutrinosOAuthClientModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV1dHJpbm9zLW9hdXRoLWNsaWVudC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZXV0cmlub3Mtb2F1dGgtY2xpZW50LyIsInNvdXJjZXMiOlsibGliL25ldXRyaW5vcy1vYXV0aC1jbGllbnQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7Ozs7QUFFdEQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxxQkFBa0QsRUFBRSxXQUF3QjtJQUNwRzs7O0lBQU87UUFDTDs7O1dBR0c7UUFDSCxJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEtBQUssTUFBTSxFQUFFO1lBQ3RELElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLEtBQUssS0FBSyxFQUFHO2dCQUM1RCxPQUFPLHFCQUFxQixDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUk7Ozs7Z0JBQUMsVUFBQyxXQUFXO29CQUM3RCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxXQUFXLENBQUMsQ0FBQztvQkFDekMsV0FBVyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUU7eUJBQ2hELEtBQUs7Ozs7b0JBQUMsVUFBQSxXQUFXO3dCQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUMzQixDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNaLENBQUMsRUFBQyxDQUFDO2FBQ0o7aUJBQU07Z0JBQ0wsNkVBQTZFO2dCQUM3RSxPQUFPLHFCQUFxQixDQUFDLFdBQVcsRUFBRTtxQkFDekMsS0FBSzs7OztnQkFBQyxVQUFBLFdBQVc7b0JBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzNCLENBQUMsRUFBQyxDQUFDO2FBQ0o7U0FDRjtJQUNILENBQUMsRUFBQztBQUNKLENBQUM7O0FBR0Q7SUFBQTtJQW1CMEMsQ0FBQzs7Z0JBbkIxQyxRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsdUJBQXVCLENBQUM7b0JBQ3ZDLE9BQU8sRUFBRTt3QkFDUCxnQkFBZ0I7cUJBQ2pCO29CQUNELFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixRQUFRLEVBQUUsd0JBQXdCOzRCQUNsQyxLQUFLLEVBQUUsSUFBSTt5QkFDWjt3QkFDRDs0QkFDRSxPQUFPLEVBQUUsZUFBZTs0QkFDeEIsVUFBVSxFQUFFLFNBQVM7NEJBQ3JCLElBQUksRUFBRSxDQUFDLDJCQUEyQixFQUFFLFdBQVcsQ0FBQzs0QkFDaEQsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7aUJBQ0Y7O0lBQ3lDLGlDQUFDO0NBQUEsQUFuQjNDLElBbUIyQztTQUE5QiwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgQVBQX0lOSVRJQUxJWkVSIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5ldXRyaW5vc09hdXRoQ29tcG9uZW50IH0gZnJvbSAnLi9uZXV0cmlub3Mtb2F1dGguY29tcG9uZW50JztcclxuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSwgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IENvb2tpZUludGVyY2VwdG9yU2VydmljZSB9IGZyb20gJy4vY29va2llLWludGVyY2VwdG9yLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOZXV0cmlub3NPQXV0aENsaWVudFNlcnZpY2UgfSBmcm9tICcuL25ldXRyaW5vcy1vYXV0aC1jbGllbnQuc2VydmljZSc7XHJcbmltcG9ydCB7IFV0aWxTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy91dGlsLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRva2VucyhuZXV0cmlub3NPQXV0aFNlcnZpY2U6IE5ldXRyaW5vc09BdXRoQ2xpZW50U2VydmljZSwgdXRpbFNlcnZpY2U6IFV0aWxTZXJ2aWNlKSB7XHJcbiAgcmV0dXJuICgpID0+IHtcclxuICAgIC8qKlxyXG4gICAgICogRm9yIGlvcyByZXN0b3JlIHRoZSBjb29raWVzIGFuZCBnZXQgdXNlckluZm8gc2luY2UgaU9TIHdlYnZpZXcgZG9lcyBub3RcclxuICAgICAqIHBlcnNpc2l0IHRoZSBjb29raWUgYmV0d2VlbiBhcHAgbGF1bmNoZXNcclxuICAgICAqL1xyXG4gICAgaWYgKHV0aWxTZXJ2aWNlLmdldEVudlZhbHVlKCdpc0lEU0VuYWJsZWQnKSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgIGlmICh3aW5kb3dbJ2RldmljZSddICYmIHdpbmRvd1snZGV2aWNlJ10ucGxhdGZvcm0gPT09ICdpT1MnICkge1xyXG4gICAgICAgIHJldHVybiBuZXV0cmlub3NPQXV0aFNlcnZpY2UucmVzdG9yZUNvb2tpZXMoKS50aGVuKChjb29raWVFeGlzdCkgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2Nvb2tpZUV4aXN0JyArIGNvb2tpZUV4aXN0KTtcclxuICAgICAgICAgIGNvb2tpZUV4aXN0ID8gbmV1dHJpbm9zT0F1dGhTZXJ2aWNlLmdldFVzZXJJbmZvKClcclxuICAgICAgICAgIC5jYXRjaCh1c2VySW5mb0VyciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXJJbmZvRXJyKTtcclxuICAgICAgICAgIH0pIDogbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBDYW5ub3QgZ2V0IGNvb2tpZSBmb3IgY3Jvc3MgZG9tYWluIHVzaW5nIEpTLiBoZW5jZSBjYWxsaW5nIHVzZXJpbmZvIGFsd2F5c1xyXG4gICAgICAgIHJldHVybiBuZXV0cmlub3NPQXV0aFNlcnZpY2UuZ2V0VXNlckluZm8oKVxyXG4gICAgICAgIC5jYXRjaCh1c2VySW5mb0VyciA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyh1c2VySW5mb0Vycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG4vLyBAZHluYW1pYyAoaHR0cHM6Ly9naXRodWIuY29tL25nLXBhY2thZ3IvbmctcGFja2Fnci9pc3N1ZXMvNjQxKVxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW05ldXRyaW5vc09hdXRoQ29tcG9uZW50XSxcclxuICBpbXBvcnRzOiBbXHJcbiAgICBIdHRwQ2xpZW50TW9kdWxlXHJcbiAgXSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXHJcbiAgICAgIHVzZUNsYXNzOiBDb29raWVJbnRlcmNlcHRvclNlcnZpY2UsXHJcbiAgICAgIG11bHRpOiB0cnVlXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXHJcbiAgICAgIHVzZUZhY3Rvcnk6IGdldFRva2VucyxcclxuICAgICAgZGVwczogW05ldXRyaW5vc09BdXRoQ2xpZW50U2VydmljZSwgVXRpbFNlcnZpY2VdLFxyXG4gICAgICBtdWx0aTogdHJ1ZVxyXG4gICAgfSxcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZXV0cmlub3NPQXV0aENsaWVudE1vZHVsZSB7IH1cclxuIl19